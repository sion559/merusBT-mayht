/*---------------------------------------------------------------------------------------*/
/*   Merus Audio MA120   register map                                                    */
/*                                                                                       */
/*   Provides : Defines for registers and symbols in merus audio amplifiers              */
/*              Macros for set and get content of symbols                                */
/*              Read-modify-write on write to symbols less then 8 bits                   */
/*                                                                                       */
/*   Symbols is a collection of 1 to 8 bits within a single address                      */
/*                                                                                       */
/*   Provided as is for internal use only - do not copy - do not share                   */
/*                                                                                       */
/*   Timestamp                        :                         Tue Apr 30 09:38:10 2019 */
/*   Created from database            :                                       ma120_rev1 */
/*   Errors and updates please contact:       Jorgen Kragh Jakobsen, jkj@merus-audio.com */
/*---------------------------------------------------------------------------------------*/

#include <stdint.h>


#ifndef _MA120_H_
#define _MA120_H_


//------------------------------------------------------------------------------core__pa__PMP_select---
// Power Mode Profile selection
#define MA_core__pa__PMP_select__a 0x0000
#define MA_core__pa__PMP_select__len 3
#define MA_core__pa__PMP_select__mask 0x07
#define MA_core__pa__PMP_select__shift 0x00
#define MA_core__pa__PMP_select__reset 0x02
#define MA_core__pa__PMP_select__inputonly 0
#define set_obj_MA_core__pa__PMP_select(o,y) ({ uint8_t __ret = o.read(0); o.write(0,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__pa__PMP_select(y) ({ uint8_t __ret = ma_read_byte(0); ma_write_byte(0,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__pa__PMP_select(o) (o.read(0) & 0x07)>>0
#define get_MA_core__pa__PMP_select() ( ma_read_byte(0) & 0x07)>>0
//------------------------------------------------------------------------------core__pa__mode_pbtl---
// High to use PBTL mode
#define MA_core__pa__mode_pbtl__a 0x0000
#define MA_core__pa__mode_pbtl__len 1
#define MA_core__pa__mode_pbtl__mask 0x08
#define MA_core__pa__mode_pbtl__shift 0x03
#define MA_core__pa__mode_pbtl__reset 0x00
#define MA_core__pa__mode_pbtl__inputonly 0
#define set_obj_MA_core__pa__mode_pbtl(o,y) ({ uint8_t __ret = o.read(0); o.write(0,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pa__mode_pbtl(y) ({ uint8_t __ret = ma_read_byte(0); ma_write_byte(0,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pa__mode_pbtl(o) (o.read(0) & 0x08)>>3
#define get_MA_core__pa__mode_pbtl() ( ma_read_byte(0) & 0x08)>>3
//------------------------------------------------------------------------------core__pa__pvdd_scale---
// Pvdd level config. for DNR optimization.
#define MA_core__pa__pvdd_scale__a 0x0000
#define MA_core__pa__pvdd_scale__len 2
#define MA_core__pa__pvdd_scale__mask 0x30
#define MA_core__pa__pvdd_scale__shift 0x04
#define MA_core__pa__pvdd_scale__reset 0x03
#define MA_core__pa__pvdd_scale__inputonly 0
#define set_obj_MA_core__pa__pvdd_scale(o,y) ({ uint8_t __ret = o.read(0); o.write(0,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pa__pvdd_scale(y) ({ uint8_t __ret = ma_read_byte(0); ma_write_byte(0,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pa__pvdd_scale(o) (o.read(0) & 0x30)>>4
#define get_MA_core__pa__pvdd_scale() ( ma_read_byte(0) & 0x30)>>4
//------------------------------------------------------------------------------core__pa__TBD_reg_ctrl---
// High: override pin programmed settings with register stettings<br>
#define MA_core__pa__TBD_reg_ctrl__a 0x0000
#define MA_core__pa__TBD_reg_ctrl__len 1
#define MA_core__pa__TBD_reg_ctrl__mask 0x40
#define MA_core__pa__TBD_reg_ctrl__shift 0x06
#define MA_core__pa__TBD_reg_ctrl__reset 0x00
#define MA_core__pa__TBD_reg_ctrl__inputonly 0
#define set_obj_MA_core__pa__TBD_reg_ctrl(o,y) ({ uint8_t __ret = o.read(0); o.write(0,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__pa__TBD_reg_ctrl(y) ({ uint8_t __ret = ma_read_byte(0); ma_write_byte(0,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__pa__TBD_reg_ctrl(o) (o.read(0) & 0x40)>>6
#define get_MA_core__pa__TBD_reg_ctrl() ( ma_read_byte(0) & 0x40)>>6
//------------------------------------------------------------------------------core__pa__gd_dVdt---
// Gate driver dV/dt (strength) selection. "00" = lowest, "11" = highest<br>
#define MA_core__pa__gd_dVdt__a 0x0001
#define MA_core__pa__gd_dVdt__len 2
#define MA_core__pa__gd_dVdt__mask 0x03
#define MA_core__pa__gd_dVdt__shift 0x00
#define MA_core__pa__gd_dVdt__reset 0x03
#define MA_core__pa__gd_dVdt__inputonly 0
#define set_obj_MA_core__pa__gd_dVdt(o,y) ({ uint8_t __ret = o.read(1); o.write(1,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pa__gd_dVdt(y) ({ uint8_t __ret = ma_read_byte(1); ma_write_byte(1,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pa__gd_dVdt(o) (o.read(1) & 0x03)>>0
#define get_MA_core__pa__gd_dVdt() ( ma_read_byte(1) & 0x03)>>0
//------------------------------------------------------------------------------core__pa__mute_ch0---
// High to force channel 0 to mute.
#define MA_core__pa__mute_ch0__a 0x0002
#define MA_core__pa__mute_ch0__len 1
#define MA_core__pa__mute_ch0__mask 0x01
#define MA_core__pa__mute_ch0__shift 0x00
#define MA_core__pa__mute_ch0__reset 0x00
#define MA_core__pa__mute_ch0__inputonly 0
#define set_obj_MA_core__pa__mute_ch0(o,y) ({ uint8_t __ret = o.read(2); o.write(2,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa__mute_ch0(y) ({ uint8_t __ret = ma_read_byte(2); ma_write_byte(2,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa__mute_ch0(o) (o.read(2) & 0x01)>>0
#define get_MA_core__pa__mute_ch0() ( ma_read_byte(2) & 0x01)>>0
//------------------------------------------------------------------------------core__pa__mute_ch1---
// High to force channel 1 to mute
#define MA_core__pa__mute_ch1__a 0x0002
#define MA_core__pa__mute_ch1__len 1
#define MA_core__pa__mute_ch1__mask 0x02
#define MA_core__pa__mute_ch1__shift 0x01
#define MA_core__pa__mute_ch1__reset 0x00
#define MA_core__pa__mute_ch1__inputonly 0
#define set_obj_MA_core__pa__mute_ch1(o,y) ({ uint8_t __ret = o.read(2); o.write(2,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa__mute_ch1(y) ({ uint8_t __ret = ma_read_byte(2); ma_write_byte(2,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa__mute_ch1(o) (o.read(2) & 0x02)>>1
#define get_MA_core__pa__mute_ch1() ( ma_read_byte(2) & 0x02)>>1
//------------------------------------------------------------------------------core__pa__disable_ch0---
// 
#define MA_core__pa__disable_ch0__a 0x0002
#define MA_core__pa__disable_ch0__len 1
#define MA_core__pa__disable_ch0__mask 0x04
#define MA_core__pa__disable_ch0__shift 0x02
#define MA_core__pa__disable_ch0__reset 0x00
#define MA_core__pa__disable_ch0__inputonly 0
#define set_obj_MA_core__pa__disable_ch0(o,y) ({ uint8_t __ret = o.read(2); o.write(2,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pa__disable_ch0(y) ({ uint8_t __ret = ma_read_byte(2); ma_write_byte(2,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pa__disable_ch0(o) (o.read(2) & 0x04)>>2
#define get_MA_core__pa__disable_ch0() ( ma_read_byte(2) & 0x04)>>2
//------------------------------------------------------------------------------core__pa__disable_ch1---
// High to disable channel 1.
#define MA_core__pa__disable_ch1__a 0x0002
#define MA_core__pa__disable_ch1__len 1
#define MA_core__pa__disable_ch1__mask 0x08
#define MA_core__pa__disable_ch1__shift 0x03
#define MA_core__pa__disable_ch1__reset 0x00
#define MA_core__pa__disable_ch1__inputonly 0
#define set_obj_MA_core__pa__disable_ch1(o,y) ({ uint8_t __ret = o.read(2); o.write(2,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pa__disable_ch1(y) ({ uint8_t __ret = ma_read_byte(2); ma_write_byte(2,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pa__disable_ch1(o) (o.read(2) & 0x08)>>3
#define get_MA_core__pa__disable_ch1() ( ma_read_byte(2) & 0x08)>>3
//------------------------------------------------------------------------------core__pa__standby---
// High to force chip standby.
#define MA_core__pa__standby__a 0x0002
#define MA_core__pa__standby__len 1
#define MA_core__pa__standby__mask 0x10
#define MA_core__pa__standby__shift 0x04
#define MA_core__pa__standby__reset 0x00
#define MA_core__pa__standby__inputonly 0
#define set_obj_MA_core__pa__standby(o,y) ({ uint8_t __ret = o.read(2); o.write(2,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__pa__standby(y) ({ uint8_t __ret = ma_read_byte(2); ma_write_byte(2,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__pa__standby(o) (o.read(2) & 0x10)>>4
#define get_MA_core__pa__standby() ( ma_read_byte(2) & 0x10)>>4
//------------------------------------------------------------------------------core__pa__dsp_enable---
// High to enable the digital audio processor
#define MA_core__pa__dsp_enable__a 0x0005
#define MA_core__pa__dsp_enable__len 1
#define MA_core__pa__dsp_enable__mask 0x02
#define MA_core__pa__dsp_enable__shift 0x01
#define MA_core__pa__dsp_enable__reset 0x00
#define MA_core__pa__dsp_enable__inputonly 0
#define set_obj_MA_core__pa__dsp_enable(o,y) ({ uint8_t __ret = o.read(5); o.write(5,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa__dsp_enable(y) ({ uint8_t __ret = ma_read_byte(5); ma_write_byte(5,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa__dsp_enable(o) (o.read(5) & 0x02)>>1
#define get_MA_core__pa__dsp_enable() ( ma_read_byte(5) & 0x02)>>1
//------------------------------------------------------------------------------core__pa__dsp_restart---
// High: the DSP is halted, Low: the DSP is running
#define MA_core__pa__dsp_restart__a 0x0005
#define MA_core__pa__dsp_restart__len 1
#define MA_core__pa__dsp_restart__mask 0x04
#define MA_core__pa__dsp_restart__shift 0x02
#define MA_core__pa__dsp_restart__reset 0x00
#define MA_core__pa__dsp_restart__inputonly 0
#define set_obj_MA_core__pa__dsp_restart(o,y) ({ uint8_t __ret = o.read(5); o.write(5,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pa__dsp_restart(y) ({ uint8_t __ret = ma_read_byte(5); ma_write_byte(5,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pa__dsp_restart(o) (o.read(5) & 0x04)>>2
#define get_MA_core__pa__dsp_restart() ( ma_read_byte(5) & 0x04)>>2
//------------------------------------------------------------------------------core__pa__volume_ch0---
// Channel 0 volume setting
#define MA_core__pa__volume_ch0__a 0x0003
#define MA_core__pa__volume_ch0__len 8
#define MA_core__pa__volume_ch0__mask 0xff
#define MA_core__pa__volume_ch0__shift 0x00
#define MA_core__pa__volume_ch0__reset 0x20
#define MA_core__pa__volume_ch0__inputonly 0
#define set_obj_MA_core__pa__volume_ch0(o,y) o.write(3,y);
#define set_MA_core__pa__volume_ch0(y) ma_write_byte(3,y);
#define get_obj_MA_core__pa__volume_ch0(o) (o.read(3) & 0xff)>>0
#define get_MA_core__pa__volume_ch0() ( ma_read_byte(3) & 0xff)>>0
//------------------------------------------------------------------------------core__pa__volume_ch1---
// Channel 1 volume setting
#define MA_core__pa__volume_ch1__a 0x0004
#define MA_core__pa__volume_ch1__len 8
#define MA_core__pa__volume_ch1__mask 0xff
#define MA_core__pa__volume_ch1__shift 0x00
#define MA_core__pa__volume_ch1__reset 0x20
#define MA_core__pa__volume_ch1__inputonly 0
#define set_obj_MA_core__pa__volume_ch1(o,y) o.write(4,y);
#define set_MA_core__pa__volume_ch1(y) ma_write_byte(4,y);
#define get_obj_MA_core__pa__volume_ch1(o) (o.read(4) & 0xff)>>0
#define get_MA_core__pa__volume_ch1() ( ma_read_byte(4) & 0xff)>>0
//------------------------------------------------------------------------------core__pa__dsp_bypass---
// High to take audio directly from i2s/tdm input
#define MA_core__pa__dsp_bypass__a 0x0005
#define MA_core__pa__dsp_bypass__len 1
#define MA_core__pa__dsp_bypass__mask 0x08
#define MA_core__pa__dsp_bypass__shift 0x03
#define MA_core__pa__dsp_bypass__reset 0x00
#define MA_core__pa__dsp_bypass__inputonly 0
#define set_obj_MA_core__pa__dsp_bypass(o,y) ({ uint8_t __ret = o.read(5); o.write(5,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pa__dsp_bypass(y) ({ uint8_t __ret = ma_read_byte(5); ma_write_byte(5,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pa__dsp_bypass(o) (o.read(5) & 0x08)>>3
#define get_MA_core__pa__dsp_bypass() ( ma_read_byte(5) & 0x08)>>3
//------------------------------------------------------------------------------core__pa__vol_instant---
// High: Apply volume settings instantly - without ramp
#define MA_core__pa__vol_instant__a 0x0005
#define MA_core__pa__vol_instant__len 1
#define MA_core__pa__vol_instant__mask 0x01
#define MA_core__pa__vol_instant__shift 0x00
#define MA_core__pa__vol_instant__reset 0x00
#define MA_core__pa__vol_instant__inputonly 0
#define set_obj_MA_core__pa__vol_instant(o,y) ({ uint8_t __ret = o.read(5); o.write(5,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa__vol_instant(y) ({ uint8_t __ret = ma_read_byte(5); ma_write_byte(5,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa__vol_instant(o) (o.read(5) & 0x01)>>0
#define get_MA_core__pa__vol_instant() ( ma_read_byte(5) & 0x01)>>0
//------------------------------------------------------------------------------core__pa__clip_pin---
// State of the "clip" signal driving the nClip pin -- "1" means "clip"<br>
#define MA_core__pa__clip_pin__a 0x0006
#define MA_core__pa__clip_pin__len 1
#define MA_core__pa__clip_pin__mask 0x01
#define MA_core__pa__clip_pin__shift 0x00
#define MA_core__pa__clip_pin__reset 0x00
#define MA_core__pa__clip_pin__inputonly 1
#define set_obj_MA_core__pa__clip_pin(o,y) ({ uint8_t __ret = o.read(6); o.write(6,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa__clip_pin(y) ({ uint8_t __ret = ma_read_byte(6); ma_write_byte(6,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa__clip_pin(o) (o.read(6) & 0x01)>>0
#define get_MA_core__pa__clip_pin() ( ma_read_byte(6) & 0x01)>>0
//------------------------------------------------------------------------------core__pa__err_pin---
// Status of the "err" signal driving the nErr pin -- "1" means "error"<br>
#define MA_core__pa__err_pin__a 0x0006
#define MA_core__pa__err_pin__len 1
#define MA_core__pa__err_pin__mask 0x02
#define MA_core__pa__err_pin__shift 0x01
#define MA_core__pa__err_pin__reset 0x00
#define MA_core__pa__err_pin__inputonly 1
#define set_obj_MA_core__pa__err_pin(o,y) ({ uint8_t __ret = o.read(6); o.write(6,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa__err_pin(y) ({ uint8_t __ret = ma_read_byte(6); ma_write_byte(6,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa__err_pin(o) (o.read(6) & 0x02)>>1
#define get_MA_core__pa__err_pin() ( ma_read_byte(6) & 0x02)>>1
//------------------------------------------------------------------------------core__pa__temp_chip---
// Current chip temperature reading
#define MA_core__pa__temp_chip__a 0x0007
#define MA_core__pa__temp_chip__len 8
#define MA_core__pa__temp_chip__mask 0xff
#define MA_core__pa__temp_chip__shift 0x00
#define MA_core__pa__temp_chip__reset 0x00
#define MA_core__pa__temp_chip__inputonly 1
#define set_obj_MA_core__pa__temp_chip(o,y) o.write(7,y);
#define set_MA_core__pa__temp_chip(y) ma_write_byte(7,y);
#define get_obj_MA_core__pa__temp_chip(o) (o.read(7) & 0xff)>>0
#define get_MA_core__pa__temp_chip() ( ma_read_byte(7) & 0xff)>>0
//------------------------------------------------------------------------------core__pa__pvdd_chip---
// Current chip Pvdd reading
#define MA_core__pa__pvdd_chip__a 0x0008
#define MA_core__pa__pvdd_chip__len 8
#define MA_core__pa__pvdd_chip__mask 0xff
#define MA_core__pa__pvdd_chip__shift 0x00
#define MA_core__pa__pvdd_chip__reset 0x00
#define MA_core__pa__pvdd_chip__inputonly 1
#define set_obj_MA_core__pa__pvdd_chip(o,y) o.write(8,y);
#define set_MA_core__pa__pvdd_chip(y) ma_write_byte(8,y);
#define get_obj_MA_core__pa__pvdd_chip(o) (o.read(8) & 0xff)>>0
#define get_MA_core__pa__pvdd_chip() ( ma_read_byte(8) & 0xff)>>0
//------------------------------------------------------------------------------core__pa__attack_ch1---
// Channel 1 attack time for limiter
#define MA_core__pa__attack_ch1__a 0x000a
#define MA_core__pa__attack_ch1__len 5
#define MA_core__pa__attack_ch1__mask 0x1f
#define MA_core__pa__attack_ch1__shift 0x00
#define MA_core__pa__attack_ch1__reset 0x00
#define MA_core__pa__attack_ch1__inputonly 0
#define set_obj_MA_core__pa__attack_ch1(o,y) ({ uint8_t __ret = o.read(10); o.write(10,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__pa__attack_ch1(y) ({ uint8_t __ret = ma_read_byte(10); ma_write_byte(10,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__pa__attack_ch1(o) (o.read(10) & 0x1f)>>0
#define get_MA_core__pa__attack_ch1() ( ma_read_byte(10) & 0x1f)>>0
//------------------------------------------------------------------------------core__pa__attack_ch0---
// Channel 0 attack time for limiter
#define MA_core__pa__attack_ch0__a 0x0009
#define MA_core__pa__attack_ch0__len 5
#define MA_core__pa__attack_ch0__mask 0x1f
#define MA_core__pa__attack_ch0__shift 0x00
#define MA_core__pa__attack_ch0__reset 0x00
#define MA_core__pa__attack_ch0__inputonly 0
#define set_obj_MA_core__pa__attack_ch0(o,y) ({ uint8_t __ret = o.read(9); o.write(9,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__pa__attack_ch0(y) ({ uint8_t __ret = ma_read_byte(9); ma_write_byte(9,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__pa__attack_ch0(o) (o.read(9) & 0x1f)>>0
#define get_MA_core__pa__attack_ch0() ( ma_read_byte(9) & 0x1f)>>0
//------------------------------------------------------------------------------core__pa__release_ch0---
// Channel 0 release time for limiter
#define MA_core__pa__release_ch0__a 0x000b
#define MA_core__pa__release_ch0__len 5
#define MA_core__pa__release_ch0__mask 0x1f
#define MA_core__pa__release_ch0__shift 0x00
#define MA_core__pa__release_ch0__reset 0x12
#define MA_core__pa__release_ch0__inputonly 0
#define set_obj_MA_core__pa__release_ch0(o,y) ({ uint8_t __ret = o.read(11); o.write(11,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__pa__release_ch0(y) ({ uint8_t __ret = ma_read_byte(11); ma_write_byte(11,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__pa__release_ch0(o) (o.read(11) & 0x1f)>>0
#define get_MA_core__pa__release_ch0() ( ma_read_byte(11) & 0x1f)>>0
//------------------------------------------------------------------------------core__pa__release_ch1---
// Channel 1 release time for limiter
#define MA_core__pa__release_ch1__a 0x000c
#define MA_core__pa__release_ch1__len 5
#define MA_core__pa__release_ch1__mask 0x1f
#define MA_core__pa__release_ch1__shift 0x00
#define MA_core__pa__release_ch1__reset 0x12
#define MA_core__pa__release_ch1__inputonly 0
#define set_obj_MA_core__pa__release_ch1(o,y) ({ uint8_t __ret = o.read(12); o.write(12,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__pa__release_ch1(y) ({ uint8_t __ret = ma_read_byte(12); ma_write_byte(12,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__pa__release_ch1(o) (o.read(12) & 0x1f)>>0
#define get_MA_core__pa__release_ch1() ( ma_read_byte(12) & 0x1f)>>0
//------------------------------------------------------------------------------core__pa__threshold_ch0---
// Channel 0 limiter threshold
#define MA_core__pa__threshold_ch0__a 0x000d
#define MA_core__pa__threshold_ch0__len 8
#define MA_core__pa__threshold_ch0__mask 0xff
#define MA_core__pa__threshold_ch0__shift 0x00
#define MA_core__pa__threshold_ch0__reset 0x00
#define MA_core__pa__threshold_ch0__inputonly 0
#define set_obj_MA_core__pa__threshold_ch0(o,y) o.write(13,y);
#define set_MA_core__pa__threshold_ch0(y) ma_write_byte(13,y);
#define get_obj_MA_core__pa__threshold_ch0(o) (o.read(13) & 0xff)>>0
#define get_MA_core__pa__threshold_ch0() ( ma_read_byte(13) & 0xff)>>0
//------------------------------------------------------------------------------core__pa__threshold_ch1---
// Channel 1 limiter threshold
#define MA_core__pa__threshold_ch1__a 0x000e
#define MA_core__pa__threshold_ch1__len 8
#define MA_core__pa__threshold_ch1__mask 0xff
#define MA_core__pa__threshold_ch1__shift 0x00
#define MA_core__pa__threshold_ch1__reset 0x00
#define MA_core__pa__threshold_ch1__inputonly 0
#define set_obj_MA_core__pa__threshold_ch1(o,y) o.write(14,y);
#define set_MA_core__pa__threshold_ch1(y) ma_write_byte(14,y);
#define get_obj_MA_core__pa__threshold_ch1(o) (o.read(14) & 0xff)>>0
#define get_MA_core__pa__threshold_ch1() ( ma_read_byte(14) & 0xff)>>0
//------------------------------------------------------------------------------core__i2s_tdm__data_alignment---
// 000: i2s, 001: left justified, 100: right justified 16bit, 101: right justified 18bit, 110: right justified 20bit, 111: right justified 24bit
#define MA_core__i2s_tdm__data_alignment__a 0x0010
#define MA_core__i2s_tdm__data_alignment__len 3
#define MA_core__i2s_tdm__data_alignment__mask 0x07
#define MA_core__i2s_tdm__data_alignment__shift 0x00
#define MA_core__i2s_tdm__data_alignment__reset 0x00
#define MA_core__i2s_tdm__data_alignment__inputonly 0
#define set_obj_MA_core__i2s_tdm__data_alignment(o,y) ({ uint8_t __ret = o.read(16); o.write(16,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__data_alignment(y) ({ uint8_t __ret = ma_read_byte(16); ma_write_byte(16,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__data_alignment(o) (o.read(16) & 0x07)>>0
#define get_MA_core__i2s_tdm__data_alignment() ( ma_read_byte(16) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__sck_pol---
// 0: data change on rising edge of sck
#define MA_core__i2s_tdm__sck_pol__a 0x0010
#define MA_core__i2s_tdm__sck_pol__len 1
#define MA_core__i2s_tdm__sck_pol__mask 0x08
#define MA_core__i2s_tdm__sck_pol__shift 0x03
#define MA_core__i2s_tdm__sck_pol__reset 0x01
#define MA_core__i2s_tdm__sck_pol__inputonly 0
#define set_obj_MA_core__i2s_tdm__sck_pol(o,y) ({ uint8_t __ret = o.read(16); o.write(16,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__i2s_tdm__sck_pol(y) ({ uint8_t __ret = ma_read_byte(16); ma_write_byte(16,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__i2s_tdm__sck_pol(o) (o.read(16) & 0x08)>>3
#define get_MA_core__i2s_tdm__sck_pol() ( ma_read_byte(16) & 0x08)>>3
//------------------------------------------------------------------------------core__i2s_tdm__slot_size---
// Channel slot size: 00: 32bit, 01: 24bit, 10: 16bit
#define MA_core__i2s_tdm__slot_size__a 0x0010
#define MA_core__i2s_tdm__slot_size__len 2
#define MA_core__i2s_tdm__slot_size__mask 0x30
#define MA_core__i2s_tdm__slot_size__shift 0x04
#define MA_core__i2s_tdm__slot_size__reset 0x00
#define MA_core__i2s_tdm__slot_size__inputonly 0
#define set_obj_MA_core__i2s_tdm__slot_size(o,y) ({ uint8_t __ret = o.read(16); o.write(16,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__i2s_tdm__slot_size(y) ({ uint8_t __ret = ma_read_byte(16); ma_write_byte(16,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__i2s_tdm__slot_size(o) (o.read(16) & 0x30)>>4
#define get_MA_core__i2s_tdm__slot_size() ( ma_read_byte(16) & 0x30)>>4
//------------------------------------------------------------------------------core__i2s_tdm__ws_fs_rising---
// 0: Frame start at rising ws/fs
#define MA_core__i2s_tdm__ws_fs_rising__a 0x0010
#define MA_core__i2s_tdm__ws_fs_rising__len 1
#define MA_core__i2s_tdm__ws_fs_rising__mask 0x40
#define MA_core__i2s_tdm__ws_fs_rising__shift 0x06
#define MA_core__i2s_tdm__ws_fs_rising__reset 0x00
#define MA_core__i2s_tdm__ws_fs_rising__inputonly 0
#define set_obj_MA_core__i2s_tdm__ws_fs_rising(o,y) ({ uint8_t __ret = o.read(16); o.write(16,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__i2s_tdm__ws_fs_rising(y) ({ uint8_t __ret = ma_read_byte(16); ma_write_byte(16,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__i2s_tdm__ws_fs_rising(o) (o.read(16) & 0x40)>>6
#define get_MA_core__i2s_tdm__ws_fs_rising() ( ma_read_byte(16) & 0x40)>>6
//------------------------------------------------------------------------------core__i2s_tdm__lsb_first---
// 0: The lsb is transmitted first
#define MA_core__i2s_tdm__lsb_first__a 0x0010
#define MA_core__i2s_tdm__lsb_first__len 1
#define MA_core__i2s_tdm__lsb_first__mask 0x80
#define MA_core__i2s_tdm__lsb_first__shift 0x07
#define MA_core__i2s_tdm__lsb_first__reset 0x00
#define MA_core__i2s_tdm__lsb_first__inputonly 0
#define set_obj_MA_core__i2s_tdm__lsb_first(o,y) ({ uint8_t __ret = o.read(16); o.write(16,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__i2s_tdm__lsb_first(y) ({ uint8_t __ret = ma_read_byte(16); ma_write_byte(16,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__i2s_tdm__lsb_first(o) (o.read(16) & 0x80)>>7
#define get_MA_core__i2s_tdm__lsb_first() ( ma_read_byte(16) & 0x80)>>7
//------------------------------------------------------------------------------core__i2s_tdm__tdm_input_map0---
// tdm input map ch0 xxx (thh)
#define MA_core__i2s_tdm__tdm_input_map0__a 0x0011
#define MA_core__i2s_tdm__tdm_input_map0__len 5
#define MA_core__i2s_tdm__tdm_input_map0__mask 0x1f
#define MA_core__i2s_tdm__tdm_input_map0__shift 0x00
#define MA_core__i2s_tdm__tdm_input_map0__reset 0x00
#define MA_core__i2s_tdm__tdm_input_map0__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_input_map0(o,y) ({ uint8_t __ret = o.read(17); o.write(17,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__i2s_tdm__tdm_input_map0(y) ({ uint8_t __ret = ma_read_byte(17); ma_write_byte(17,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__i2s_tdm__tdm_input_map0(o) (o.read(17) & 0x1f)>>0
#define get_MA_core__i2s_tdm__tdm_input_map0() ( ma_read_byte(17) & 0x1f)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_input_map1---
// tdm input map ch1 xxx (thh)
#define MA_core__i2s_tdm__tdm_input_map1__a 0x0012
#define MA_core__i2s_tdm__tdm_input_map1__len 5
#define MA_core__i2s_tdm__tdm_input_map1__mask 0x1f
#define MA_core__i2s_tdm__tdm_input_map1__shift 0x00
#define MA_core__i2s_tdm__tdm_input_map1__reset 0x01
#define MA_core__i2s_tdm__tdm_input_map1__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_input_map1(o,y) ({ uint8_t __ret = o.read(18); o.write(18,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__i2s_tdm__tdm_input_map1(y) ({ uint8_t __ret = ma_read_byte(18); ma_write_byte(18,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__i2s_tdm__tdm_input_map1(o) (o.read(18) & 0x1f)>>0
#define get_MA_core__i2s_tdm__tdm_input_map1() ( ma_read_byte(18) & 0x1f)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_input_map2---
// tdm input map ch2 xxx (thh)
#define MA_core__i2s_tdm__tdm_input_map2__a 0x0013
#define MA_core__i2s_tdm__tdm_input_map2__len 5
#define MA_core__i2s_tdm__tdm_input_map2__mask 0x1f
#define MA_core__i2s_tdm__tdm_input_map2__shift 0x00
#define MA_core__i2s_tdm__tdm_input_map2__reset 0x00
#define MA_core__i2s_tdm__tdm_input_map2__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_input_map2(o,y) ({ uint8_t __ret = o.read(19); o.write(19,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__i2s_tdm__tdm_input_map2(y) ({ uint8_t __ret = ma_read_byte(19); ma_write_byte(19,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__i2s_tdm__tdm_input_map2(o) (o.read(19) & 0x1f)>>0
#define get_MA_core__i2s_tdm__tdm_input_map2() ( ma_read_byte(19) & 0x1f)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_input_map3---
// tdm input map ch3 xxx (thh)
#define MA_core__i2s_tdm__tdm_input_map3__a 0x0014
#define MA_core__i2s_tdm__tdm_input_map3__len 5
#define MA_core__i2s_tdm__tdm_input_map3__mask 0x1f
#define MA_core__i2s_tdm__tdm_input_map3__shift 0x00
#define MA_core__i2s_tdm__tdm_input_map3__reset 0x00
#define MA_core__i2s_tdm__tdm_input_map3__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_input_map3(o,y) ({ uint8_t __ret = o.read(20); o.write(20,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__i2s_tdm__tdm_input_map3(y) ({ uint8_t __ret = ma_read_byte(20); ma_write_byte(20,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__i2s_tdm__tdm_input_map3(o) (o.read(20) & 0x1f)>>0
#define get_MA_core__i2s_tdm__tdm_input_map3() ( ma_read_byte(20) & 0x1f)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map0---
// tdm output map slot0 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map0__a 0x0015
#define MA_core__i2s_tdm__tdm_output_map0__len 3
#define MA_core__i2s_tdm__tdm_output_map0__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map0__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map0__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map0__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map0(o,y) ({ uint8_t __ret = o.read(21); o.write(21,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map0(y) ({ uint8_t __ret = ma_read_byte(21); ma_write_byte(21,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map0(o) (o.read(21) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map0() ( ma_read_byte(21) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map1---
// tdm output map slot1 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map1__a 0x0015
#define MA_core__i2s_tdm__tdm_output_map1__len 3
#define MA_core__i2s_tdm__tdm_output_map1__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map1__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map1__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map1__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map1(o,y) ({ uint8_t __ret = o.read(21); o.write(21,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map1(y) ({ uint8_t __ret = ma_read_byte(21); ma_write_byte(21,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map1(o) (o.read(21) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map1() ( ma_read_byte(21) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map2---
// tdm output map slot2 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map2__a 0x0016
#define MA_core__i2s_tdm__tdm_output_map2__len 3
#define MA_core__i2s_tdm__tdm_output_map2__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map2__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map2__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map2__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map2(o,y) ({ uint8_t __ret = o.read(22); o.write(22,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map2(y) ({ uint8_t __ret = ma_read_byte(22); ma_write_byte(22,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map2(o) (o.read(22) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map2() ( ma_read_byte(22) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map3---
// tdm output map slot3 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map3__a 0x0016
#define MA_core__i2s_tdm__tdm_output_map3__len 3
#define MA_core__i2s_tdm__tdm_output_map3__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map3__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map3__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map3__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map3(o,y) ({ uint8_t __ret = o.read(22); o.write(22,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map3(y) ({ uint8_t __ret = ma_read_byte(22); ma_write_byte(22,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map3(o) (o.read(22) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map3() ( ma_read_byte(22) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map4---
// tdm output map slot4 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map4__a 0x0017
#define MA_core__i2s_tdm__tdm_output_map4__len 3
#define MA_core__i2s_tdm__tdm_output_map4__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map4__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map4__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map4__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map4(o,y) ({ uint8_t __ret = o.read(23); o.write(23,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map4(y) ({ uint8_t __ret = ma_read_byte(23); ma_write_byte(23,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map4(o) (o.read(23) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map4() ( ma_read_byte(23) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map5---
// tdm output map slot5 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map5__a 0x0017
#define MA_core__i2s_tdm__tdm_output_map5__len 3
#define MA_core__i2s_tdm__tdm_output_map5__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map5__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map5__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map5__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map5(o,y) ({ uint8_t __ret = o.read(23); o.write(23,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map5(y) ({ uint8_t __ret = ma_read_byte(23); ma_write_byte(23,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map5(o) (o.read(23) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map5() ( ma_read_byte(23) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map6---
// tdm output map slot6 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map6__a 0x0018
#define MA_core__i2s_tdm__tdm_output_map6__len 3
#define MA_core__i2s_tdm__tdm_output_map6__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map6__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map6__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map6__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map6(o,y) ({ uint8_t __ret = o.read(24); o.write(24,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map6(y) ({ uint8_t __ret = ma_read_byte(24); ma_write_byte(24,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map6(o) (o.read(24) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map6() ( ma_read_byte(24) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map7---
// tdm output map slot7 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map7__a 0x0018
#define MA_core__i2s_tdm__tdm_output_map7__len 3
#define MA_core__i2s_tdm__tdm_output_map7__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map7__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map7__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map7__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map7(o,y) ({ uint8_t __ret = o.read(24); o.write(24,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map7(y) ({ uint8_t __ret = ma_read_byte(24); ma_write_byte(24,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map7(o) (o.read(24) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map7() ( ma_read_byte(24) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map8---
// tdm output map slot8 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map8__a 0x0019
#define MA_core__i2s_tdm__tdm_output_map8__len 3
#define MA_core__i2s_tdm__tdm_output_map8__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map8__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map8__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map8__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map8(o,y) ({ uint8_t __ret = o.read(25); o.write(25,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map8(y) ({ uint8_t __ret = ma_read_byte(25); ma_write_byte(25,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map8(o) (o.read(25) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map8() ( ma_read_byte(25) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map9---
// tdm output map slot9 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map9__a 0x0019
#define MA_core__i2s_tdm__tdm_output_map9__len 3
#define MA_core__i2s_tdm__tdm_output_map9__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map9__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map9__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map9__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map9(o,y) ({ uint8_t __ret = o.read(25); o.write(25,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map9(y) ({ uint8_t __ret = ma_read_byte(25); ma_write_byte(25,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map9(o) (o.read(25) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map9() ( ma_read_byte(25) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map10---
// tdm output map slot10 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map10__a 0x001a
#define MA_core__i2s_tdm__tdm_output_map10__len 3
#define MA_core__i2s_tdm__tdm_output_map10__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map10__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map10__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map10__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map10(o,y) ({ uint8_t __ret = o.read(26); o.write(26,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map10(y) ({ uint8_t __ret = ma_read_byte(26); ma_write_byte(26,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map10(o) (o.read(26) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map10() ( ma_read_byte(26) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map11---
// tdm output map slot11 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map11__a 0x001a
#define MA_core__i2s_tdm__tdm_output_map11__len 3
#define MA_core__i2s_tdm__tdm_output_map11__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map11__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map11__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map11__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map11(o,y) ({ uint8_t __ret = o.read(26); o.write(26,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map11(y) ({ uint8_t __ret = ma_read_byte(26); ma_write_byte(26,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map11(o) (o.read(26) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map11() ( ma_read_byte(26) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map12---
// tdm output map slot12 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map12__a 0x001b
#define MA_core__i2s_tdm__tdm_output_map12__len 3
#define MA_core__i2s_tdm__tdm_output_map12__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map12__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map12__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map12__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map12(o,y) ({ uint8_t __ret = o.read(27); o.write(27,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map12(y) ({ uint8_t __ret = ma_read_byte(27); ma_write_byte(27,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map12(o) (o.read(27) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map12() ( ma_read_byte(27) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map13---
// tdm output map slot13 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map13__a 0x001b
#define MA_core__i2s_tdm__tdm_output_map13__len 3
#define MA_core__i2s_tdm__tdm_output_map13__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map13__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map13__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map13__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map13(o,y) ({ uint8_t __ret = o.read(27); o.write(27,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map13(y) ({ uint8_t __ret = ma_read_byte(27); ma_write_byte(27,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map13(o) (o.read(27) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map13() ( ma_read_byte(27) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map14---
// tdm output map slot14 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map14__a 0x001c
#define MA_core__i2s_tdm__tdm_output_map14__len 3
#define MA_core__i2s_tdm__tdm_output_map14__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map14__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map14__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map14__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map14(o,y) ({ uint8_t __ret = o.read(28); o.write(28,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map14(y) ({ uint8_t __ret = ma_read_byte(28); ma_write_byte(28,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map14(o) (o.read(28) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map14() ( ma_read_byte(28) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map15---
// tdm output map slot15 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map15__a 0x001c
#define MA_core__i2s_tdm__tdm_output_map15__len 3
#define MA_core__i2s_tdm__tdm_output_map15__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map15__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map15__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map15__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map15(o,y) ({ uint8_t __ret = o.read(28); o.write(28,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map15(y) ({ uint8_t __ret = ma_read_byte(28); ma_write_byte(28,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map15(o) (o.read(28) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map15() ( ma_read_byte(28) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map16---
// tdm output map slot16 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map16__a 0x001d
#define MA_core__i2s_tdm__tdm_output_map16__len 3
#define MA_core__i2s_tdm__tdm_output_map16__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map16__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map16__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map16__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map16(o,y) ({ uint8_t __ret = o.read(29); o.write(29,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map16(y) ({ uint8_t __ret = ma_read_byte(29); ma_write_byte(29,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map16(o) (o.read(29) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map16() ( ma_read_byte(29) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map17---
// tdm output map slot17 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map17__a 0x001d
#define MA_core__i2s_tdm__tdm_output_map17__len 3
#define MA_core__i2s_tdm__tdm_output_map17__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map17__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map17__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map17__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map17(o,y) ({ uint8_t __ret = o.read(29); o.write(29,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map17(y) ({ uint8_t __ret = ma_read_byte(29); ma_write_byte(29,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map17(o) (o.read(29) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map17() ( ma_read_byte(29) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map18---
// tdm output map slot18 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map18__a 0x001e
#define MA_core__i2s_tdm__tdm_output_map18__len 3
#define MA_core__i2s_tdm__tdm_output_map18__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map18__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map18__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map18__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map18(o,y) ({ uint8_t __ret = o.read(30); o.write(30,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map18(y) ({ uint8_t __ret = ma_read_byte(30); ma_write_byte(30,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map18(o) (o.read(30) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map18() ( ma_read_byte(30) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map19---
// tdm output map slot19 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map19__a 0x001e
#define MA_core__i2s_tdm__tdm_output_map19__len 3
#define MA_core__i2s_tdm__tdm_output_map19__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map19__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map19__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map19__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map19(o,y) ({ uint8_t __ret = o.read(30); o.write(30,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map19(y) ({ uint8_t __ret = ma_read_byte(30); ma_write_byte(30,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map19(o) (o.read(30) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map19() ( ma_read_byte(30) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map20---
// tdm output map slot20 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map20__a 0x001f
#define MA_core__i2s_tdm__tdm_output_map20__len 3
#define MA_core__i2s_tdm__tdm_output_map20__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map20__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map20__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map20__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map20(o,y) ({ uint8_t __ret = o.read(31); o.write(31,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map20(y) ({ uint8_t __ret = ma_read_byte(31); ma_write_byte(31,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map20(o) (o.read(31) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map20() ( ma_read_byte(31) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map21---
// tdm output map slot21 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map21__a 0x001f
#define MA_core__i2s_tdm__tdm_output_map21__len 3
#define MA_core__i2s_tdm__tdm_output_map21__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map21__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map21__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map21__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map21(o,y) ({ uint8_t __ret = o.read(31); o.write(31,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map21(y) ({ uint8_t __ret = ma_read_byte(31); ma_write_byte(31,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map21(o) (o.read(31) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map21() ( ma_read_byte(31) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map22---
// tdm output map slot22 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map22__a 0x0020
#define MA_core__i2s_tdm__tdm_output_map22__len 3
#define MA_core__i2s_tdm__tdm_output_map22__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map22__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map22__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map22__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map22(o,y) ({ uint8_t __ret = o.read(32); o.write(32,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map22(y) ({ uint8_t __ret = ma_read_byte(32); ma_write_byte(32,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map22(o) (o.read(32) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map22() ( ma_read_byte(32) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map23---
// tdm output map slot23 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map23__a 0x0020
#define MA_core__i2s_tdm__tdm_output_map23__len 3
#define MA_core__i2s_tdm__tdm_output_map23__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map23__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map23__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map23__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map23(o,y) ({ uint8_t __ret = o.read(32); o.write(32,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map23(y) ({ uint8_t __ret = ma_read_byte(32); ma_write_byte(32,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map23(o) (o.read(32) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map23() ( ma_read_byte(32) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map24---
// tdm output map slot24 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map24__a 0x0021
#define MA_core__i2s_tdm__tdm_output_map24__len 3
#define MA_core__i2s_tdm__tdm_output_map24__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map24__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map24__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map24__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map24(o,y) ({ uint8_t __ret = o.read(33); o.write(33,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map24(y) ({ uint8_t __ret = ma_read_byte(33); ma_write_byte(33,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map24(o) (o.read(33) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map24() ( ma_read_byte(33) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map25---
// tdm output map slot25 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map25__a 0x0021
#define MA_core__i2s_tdm__tdm_output_map25__len 3
#define MA_core__i2s_tdm__tdm_output_map25__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map25__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map25__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map25__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map25(o,y) ({ uint8_t __ret = o.read(33); o.write(33,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map25(y) ({ uint8_t __ret = ma_read_byte(33); ma_write_byte(33,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map25(o) (o.read(33) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map25() ( ma_read_byte(33) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map26---
// tdm output map slot26 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map26__a 0x0022
#define MA_core__i2s_tdm__tdm_output_map26__len 3
#define MA_core__i2s_tdm__tdm_output_map26__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map26__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map26__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map26__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map26(o,y) ({ uint8_t __ret = o.read(34); o.write(34,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map26(y) ({ uint8_t __ret = ma_read_byte(34); ma_write_byte(34,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map26(o) (o.read(34) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map26() ( ma_read_byte(34) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map27---
// tdm output map slot27 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map27__a 0x0022
#define MA_core__i2s_tdm__tdm_output_map27__len 3
#define MA_core__i2s_tdm__tdm_output_map27__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map27__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map27__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map27__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map27(o,y) ({ uint8_t __ret = o.read(34); o.write(34,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map27(y) ({ uint8_t __ret = ma_read_byte(34); ma_write_byte(34,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map27(o) (o.read(34) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map27() ( ma_read_byte(34) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map28---
// tdm output map slot28 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map28__a 0x0023
#define MA_core__i2s_tdm__tdm_output_map28__len 3
#define MA_core__i2s_tdm__tdm_output_map28__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map28__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map28__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map28__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map28(o,y) ({ uint8_t __ret = o.read(35); o.write(35,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map28(y) ({ uint8_t __ret = ma_read_byte(35); ma_write_byte(35,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map28(o) (o.read(35) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map28() ( ma_read_byte(35) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map29---
// tdm output map slot29 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map29__a 0x0023
#define MA_core__i2s_tdm__tdm_output_map29__len 3
#define MA_core__i2s_tdm__tdm_output_map29__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map29__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map29__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map29__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map29(o,y) ({ uint8_t __ret = o.read(35); o.write(35,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map29(y) ({ uint8_t __ret = ma_read_byte(35); ma_write_byte(35,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map29(o) (o.read(35) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map29() ( ma_read_byte(35) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map30---
// tdm output map slot30 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map30__a 0x0024
#define MA_core__i2s_tdm__tdm_output_map30__len 3
#define MA_core__i2s_tdm__tdm_output_map30__mask 0x07
#define MA_core__i2s_tdm__tdm_output_map30__shift 0x00
#define MA_core__i2s_tdm__tdm_output_map30__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map30__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map30(o,y) ({ uint8_t __ret = o.read(36); o.write(36,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__i2s_tdm__tdm_output_map30(y) ({ uint8_t __ret = ma_read_byte(36); ma_write_byte(36,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map30(o) (o.read(36) & 0x07)>>0
#define get_MA_core__i2s_tdm__tdm_output_map30() ( ma_read_byte(36) & 0x07)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tdm_output_map31---
// tdm output map slot31 xxx (thh)
#define MA_core__i2s_tdm__tdm_output_map31__a 0x0024
#define MA_core__i2s_tdm__tdm_output_map31__len 3
#define MA_core__i2s_tdm__tdm_output_map31__mask 0x38
#define MA_core__i2s_tdm__tdm_output_map31__shift 0x03
#define MA_core__i2s_tdm__tdm_output_map31__reset 0x00
#define MA_core__i2s_tdm__tdm_output_map31__inputonly 0
#define set_obj_MA_core__i2s_tdm__tdm_output_map31(o,y) ({ uint8_t __ret = o.read(36); o.write(36,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__i2s_tdm__tdm_output_map31(y) ({ uint8_t __ret = ma_read_byte(36); ma_write_byte(36,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__i2s_tdm__tdm_output_map31(o) (o.read(36) & 0x38)>>3
#define get_MA_core__i2s_tdm__tdm_output_map31() ( ma_read_byte(36) & 0x38)>>3
//------------------------------------------------------------------------------core__i2s_tdm__tx_loopback---
// 1: tx audio data is a loop back of rx audio data
#define MA_core__i2s_tdm__tx_loopback__a 0x0025
#define MA_core__i2s_tdm__tx_loopback__len 1
#define MA_core__i2s_tdm__tx_loopback__mask 0x01
#define MA_core__i2s_tdm__tx_loopback__shift 0x00
#define MA_core__i2s_tdm__tx_loopback__reset 0x00
#define MA_core__i2s_tdm__tx_loopback__inputonly 0
#define set_obj_MA_core__i2s_tdm__tx_loopback(o,y) ({ uint8_t __ret = o.read(37); o.write(37,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__i2s_tdm__tx_loopback(y) ({ uint8_t __ret = ma_read_byte(37); ma_write_byte(37,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__i2s_tdm__tx_loopback(o) (o.read(37) & 0x01)>>0
#define get_MA_core__i2s_tdm__tx_loopback() ( ma_read_byte(37) & 0x01)>>0
//------------------------------------------------------------------------------core__i2s_tdm__tx_enable---
// 1: enable the i2s / tdm data output pin
#define MA_core__i2s_tdm__tx_enable__a 0x0025
#define MA_core__i2s_tdm__tx_enable__len 1
#define MA_core__i2s_tdm__tx_enable__mask 0x04
#define MA_core__i2s_tdm__tx_enable__shift 0x02
#define MA_core__i2s_tdm__tx_enable__reset 0x00
#define MA_core__i2s_tdm__tx_enable__inputonly 0
#define set_obj_MA_core__i2s_tdm__tx_enable(o,y) ({ uint8_t __ret = o.read(37); o.write(37,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__i2s_tdm__tx_enable(y) ({ uint8_t __ret = ma_read_byte(37); ma_write_byte(37,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__i2s_tdm__tx_enable(o) (o.read(37) & 0x04)>>2
#define get_MA_core__i2s_tdm__tx_enable() ( ma_read_byte(37) & 0x04)>>2
//------------------------------------------------------------------------------core__i2s_tdm__rx_enable---
// 1: enable the i2s / tdm receiver. (Must be enabled to play audio)
#define MA_core__i2s_tdm__rx_enable__a 0x0025
#define MA_core__i2s_tdm__rx_enable__len 1
#define MA_core__i2s_tdm__rx_enable__mask 0x02
#define MA_core__i2s_tdm__rx_enable__shift 0x01
#define MA_core__i2s_tdm__rx_enable__reset 0x01
#define MA_core__i2s_tdm__rx_enable__inputonly 0
#define set_obj_MA_core__i2s_tdm__rx_enable(o,y) ({ uint8_t __ret = o.read(37); o.write(37,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__i2s_tdm__rx_enable(y) ({ uint8_t __ret = ma_read_byte(37); ma_write_byte(37,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__i2s_tdm__rx_enable(o) (o.read(37) & 0x02)>>1
#define get_MA_core__i2s_tdm__rx_enable() ( ma_read_byte(37) & 0x02)>>1
//------------------------------------------------------------------------------core__i2s_tdm__tx_strong_drive---
// 1: Enable extra drive strength on i2s / tdm data output pin (i2s_do)
#define MA_core__i2s_tdm__tx_strong_drive__a 0x0025
#define MA_core__i2s_tdm__tx_strong_drive__len 1
#define MA_core__i2s_tdm__tx_strong_drive__mask 0x08
#define MA_core__i2s_tdm__tx_strong_drive__shift 0x03
#define MA_core__i2s_tdm__tx_strong_drive__reset 0x01
#define MA_core__i2s_tdm__tx_strong_drive__inputonly 0
#define set_obj_MA_core__i2s_tdm__tx_strong_drive(o,y) ({ uint8_t __ret = o.read(37); o.write(37,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__i2s_tdm__tx_strong_drive(y) ({ uint8_t __ret = ma_read_byte(37); ma_write_byte(37,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__i2s_tdm__tx_strong_drive(o) (o.read(37) & 0x08)>>3
#define get_MA_core__i2s_tdm__tx_strong_drive() ( ma_read_byte(37) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__0__pwmFreqMode__a 0x0030
#define MA_core__pmc__pm_cfg__0__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__0__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__0__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__0__pwmFreqMode__reset 0x03
#define MA_core__pmc__pm_cfg__0__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(48); o.write(48,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__0__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(48); ma_write_byte(48,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__0__pwmFreqMode(o) (o.read(48) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__0__pwmFreqMode() ( ma_read_byte(48) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__0__gdsFreqMode__a 0x0030
#define MA_core__pmc__pm_cfg__0__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__0__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__0__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__0__gdsFreqMode__reset 0x03
#define MA_core__pmc__pm_cfg__0__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(48); o.write(48,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__0__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(48); ma_write_byte(48,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__0__gdsFreqMode(o) (o.read(48) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__0__gdsFreqMode() ( ma_read_byte(48) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__0__modType__a 0x0030
#define MA_core__pmc__pm_cfg__0__modType__len 2
#define MA_core__pmc__pm_cfg__0__modType__mask 0x30
#define MA_core__pmc__pm_cfg__0__modType__shift 0x04
#define MA_core__pmc__pm_cfg__0__modType__reset 0x03
#define MA_core__pmc__pm_cfg__0__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__modType(o,y) ({ uint8_t __ret = o.read(48); o.write(48,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__0__modType(y) ({ uint8_t __ret = ma_read_byte(48); ma_write_byte(48,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__0__modType(o) (o.read(48) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__0__modType() ( ma_read_byte(48) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__0__lf_bw_scale__a 0x0030
#define MA_core__pmc__pm_cfg__0__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__0__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__0__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__0__lf_bw_scale__reset 0x00
#define MA_core__pmc__pm_cfg__0__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(48); o.write(48,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__0__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(48); ma_write_byte(48,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__0__lf_bw_scale(o) (o.read(48) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__0__lf_bw_scale() ( ma_read_byte(48) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__0__pbtl_half__a 0x0031
#define MA_core__pmc__pm_cfg__0__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__0__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__0__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__0__pbtl_half__reset 0x01
#define MA_core__pmc__pm_cfg__0__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__pbtl_half(o,y) ({ uint8_t __ret = o.read(49); o.write(49,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__0__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(49); ma_write_byte(49,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__0__pbtl_half(o) (o.read(49) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__0__pbtl_half() ( ma_read_byte(49) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__0__gd_hvpu_low__a 0x0031
#define MA_core__pmc__pm_cfg__0__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__0__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__0__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__0__gd_hvpu_low__reset 0x01
#define MA_core__pmc__pm_cfg__0__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(49); o.write(49,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__0__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(49); ma_write_byte(49,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__0__gd_hvpu_low(o) (o.read(49) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__0__gd_hvpu_low() ( ma_read_byte(49) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__0__dtsteps_nom__a 0x0031
#define MA_core__pmc__pm_cfg__0__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__0__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__0__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__0__dtsteps_nom__reset 0x05
#define MA_core__pmc__pm_cfg__0__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(49); o.write(49,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__0__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(49); ma_write_byte(49,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__0__dtsteps_nom(o) (o.read(49) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__0__dtsteps_nom() ( ma_read_byte(49) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__0__bal_bw__a 0x0031
#define MA_core__pmc__pm_cfg__0__bal_bw__len 2
#define MA_core__pmc__pm_cfg__0__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__0__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__0__bal_bw__reset 0x01
#define MA_core__pmc__pm_cfg__0__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__bal_bw(o,y) ({ uint8_t __ret = o.read(49); o.write(49,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__0__bal_bw(y) ({ uint8_t __ret = ma_read_byte(49); ma_write_byte(49,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__0__bal_bw(o) (o.read(49) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__0__bal_bw() ( ma_read_byte(49) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__1__pwmFreqMode__a 0x0033
#define MA_core__pmc__pm_cfg__1__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__1__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__1__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__1__pwmFreqMode__reset 0x03
#define MA_core__pmc__pm_cfg__1__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(51); o.write(51,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__1__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(51); ma_write_byte(51,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__1__pwmFreqMode(o) (o.read(51) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__1__pwmFreqMode() ( ma_read_byte(51) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__1__gdsFreqMode__a 0x0033
#define MA_core__pmc__pm_cfg__1__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__1__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__1__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__1__gdsFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__1__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(51); o.write(51,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__1__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(51); ma_write_byte(51,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__1__gdsFreqMode(o) (o.read(51) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__1__gdsFreqMode() ( ma_read_byte(51) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__1__modType__a 0x0033
#define MA_core__pmc__pm_cfg__1__modType__len 2
#define MA_core__pmc__pm_cfg__1__modType__mask 0x30
#define MA_core__pmc__pm_cfg__1__modType__shift 0x04
#define MA_core__pmc__pm_cfg__1__modType__reset 0x03
#define MA_core__pmc__pm_cfg__1__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__modType(o,y) ({ uint8_t __ret = o.read(51); o.write(51,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__1__modType(y) ({ uint8_t __ret = ma_read_byte(51); ma_write_byte(51,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__1__modType(o) (o.read(51) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__1__modType() ( ma_read_byte(51) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__1__lf_bw_scale__a 0x0033
#define MA_core__pmc__pm_cfg__1__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__1__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__1__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__1__lf_bw_scale__reset 0x00
#define MA_core__pmc__pm_cfg__1__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(51); o.write(51,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__1__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(51); ma_write_byte(51,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__1__lf_bw_scale(o) (o.read(51) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__1__lf_bw_scale() ( ma_read_byte(51) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__1__pbtl_half__a 0x0034
#define MA_core__pmc__pm_cfg__1__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__1__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__1__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__1__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__1__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__pbtl_half(o,y) ({ uint8_t __ret = o.read(52); o.write(52,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__1__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(52); ma_write_byte(52,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__1__pbtl_half(o) (o.read(52) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__1__pbtl_half() ( ma_read_byte(52) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__1__gd_hvpu_low__a 0x0034
#define MA_core__pmc__pm_cfg__1__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__1__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__1__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__1__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__1__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(52); o.write(52,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__1__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(52); ma_write_byte(52,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__1__gd_hvpu_low(o) (o.read(52) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__1__gd_hvpu_low() ( ma_read_byte(52) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__1__dtsteps_nom__a 0x0034
#define MA_core__pmc__pm_cfg__1__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__1__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__1__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__1__dtsteps_nom__reset 0x03
#define MA_core__pmc__pm_cfg__1__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(52); o.write(52,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__1__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(52); ma_write_byte(52,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__1__dtsteps_nom(o) (o.read(52) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__1__dtsteps_nom() ( ma_read_byte(52) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__1__bal_bw__a 0x0034
#define MA_core__pmc__pm_cfg__1__bal_bw__len 2
#define MA_core__pmc__pm_cfg__1__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__1__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__1__bal_bw__reset 0x02
#define MA_core__pmc__pm_cfg__1__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__bal_bw(o,y) ({ uint8_t __ret = o.read(52); o.write(52,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__1__bal_bw(y) ({ uint8_t __ret = ma_read_byte(52); ma_write_byte(52,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__1__bal_bw(o) (o.read(52) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__1__bal_bw() ( ma_read_byte(52) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__2__pwmFreqMode__a 0x0036
#define MA_core__pmc__pm_cfg__2__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__2__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__2__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__2__pwmFreqMode__reset 0x03
#define MA_core__pmc__pm_cfg__2__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(54); o.write(54,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__2__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(54); ma_write_byte(54,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__2__pwmFreqMode(o) (o.read(54) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__2__pwmFreqMode() ( ma_read_byte(54) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__2__gdsFreqMode__a 0x0036
#define MA_core__pmc__pm_cfg__2__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__2__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__2__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__2__gdsFreqMode__reset 0x00
#define MA_core__pmc__pm_cfg__2__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(54); o.write(54,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__2__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(54); ma_write_byte(54,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__2__gdsFreqMode(o) (o.read(54) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__2__gdsFreqMode() ( ma_read_byte(54) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__2__modType__a 0x0036
#define MA_core__pmc__pm_cfg__2__modType__len 2
#define MA_core__pmc__pm_cfg__2__modType__mask 0x30
#define MA_core__pmc__pm_cfg__2__modType__shift 0x04
#define MA_core__pmc__pm_cfg__2__modType__reset 0x03
#define MA_core__pmc__pm_cfg__2__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__modType(o,y) ({ uint8_t __ret = o.read(54); o.write(54,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__2__modType(y) ({ uint8_t __ret = ma_read_byte(54); ma_write_byte(54,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__2__modType(o) (o.read(54) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__2__modType() ( ma_read_byte(54) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__2__lf_bw_scale__a 0x0036
#define MA_core__pmc__pm_cfg__2__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__2__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__2__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__2__lf_bw_scale__reset 0x00
#define MA_core__pmc__pm_cfg__2__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(54); o.write(54,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__2__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(54); ma_write_byte(54,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__2__lf_bw_scale(o) (o.read(54) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__2__lf_bw_scale() ( ma_read_byte(54) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__2__pbtl_half__a 0x0037
#define MA_core__pmc__pm_cfg__2__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__2__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__2__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__2__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__2__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__pbtl_half(o,y) ({ uint8_t __ret = o.read(55); o.write(55,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__2__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(55); ma_write_byte(55,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__2__pbtl_half(o) (o.read(55) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__2__pbtl_half() ( ma_read_byte(55) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__2__gd_hvpu_low__a 0x0037
#define MA_core__pmc__pm_cfg__2__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__2__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__2__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__2__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__2__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(55); o.write(55,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__2__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(55); ma_write_byte(55,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__2__gd_hvpu_low(o) (o.read(55) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__2__gd_hvpu_low() ( ma_read_byte(55) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__2__dtsteps_nom__a 0x0037
#define MA_core__pmc__pm_cfg__2__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__2__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__2__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__2__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__2__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(55); o.write(55,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__2__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(55); ma_write_byte(55,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__2__dtsteps_nom(o) (o.read(55) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__2__dtsteps_nom() ( ma_read_byte(55) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__2__bal_bw__a 0x0037
#define MA_core__pmc__pm_cfg__2__bal_bw__len 2
#define MA_core__pmc__pm_cfg__2__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__2__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__2__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__2__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__bal_bw(o,y) ({ uint8_t __ret = o.read(55); o.write(55,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__2__bal_bw(y) ({ uint8_t __ret = ma_read_byte(55); ma_write_byte(55,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__2__bal_bw(o) (o.read(55) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__2__bal_bw() ( ma_read_byte(55) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__3__pwmFreqMode__a 0x0039
#define MA_core__pmc__pm_cfg__3__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__3__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__3__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__3__pwmFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__3__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(57); o.write(57,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__3__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(57); ma_write_byte(57,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__3__pwmFreqMode(o) (o.read(57) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__3__pwmFreqMode() ( ma_read_byte(57) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__3__gdsFreqMode__a 0x0039
#define MA_core__pmc__pm_cfg__3__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__3__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__3__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__3__gdsFreqMode__reset 0x00
#define MA_core__pmc__pm_cfg__3__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(57); o.write(57,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__3__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(57); ma_write_byte(57,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__3__gdsFreqMode(o) (o.read(57) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__3__gdsFreqMode() ( ma_read_byte(57) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__3__modType__a 0x0039
#define MA_core__pmc__pm_cfg__3__modType__len 2
#define MA_core__pmc__pm_cfg__3__modType__mask 0x30
#define MA_core__pmc__pm_cfg__3__modType__shift 0x04
#define MA_core__pmc__pm_cfg__3__modType__reset 0x02
#define MA_core__pmc__pm_cfg__3__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__modType(o,y) ({ uint8_t __ret = o.read(57); o.write(57,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__3__modType(y) ({ uint8_t __ret = ma_read_byte(57); ma_write_byte(57,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__3__modType(o) (o.read(57) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__3__modType() ( ma_read_byte(57) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__3__lf_bw_scale__a 0x0039
#define MA_core__pmc__pm_cfg__3__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__3__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__3__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__3__lf_bw_scale__reset 0x00
#define MA_core__pmc__pm_cfg__3__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(57); o.write(57,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__3__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(57); ma_write_byte(57,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__3__lf_bw_scale(o) (o.read(57) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__3__lf_bw_scale() ( ma_read_byte(57) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__3__pbtl_half__a 0x003a
#define MA_core__pmc__pm_cfg__3__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__3__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__3__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__3__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__3__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__pbtl_half(o,y) ({ uint8_t __ret = o.read(58); o.write(58,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__3__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(58); ma_write_byte(58,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__3__pbtl_half(o) (o.read(58) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__3__pbtl_half() ( ma_read_byte(58) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__3__gd_hvpu_low__a 0x003a
#define MA_core__pmc__pm_cfg__3__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__3__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__3__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__3__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__3__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(58); o.write(58,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__3__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(58); ma_write_byte(58,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__3__gd_hvpu_low(o) (o.read(58) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__3__gd_hvpu_low() ( ma_read_byte(58) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__3__dtsteps_nom__a 0x003a
#define MA_core__pmc__pm_cfg__3__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__3__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__3__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__3__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__3__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(58); o.write(58,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__3__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(58); ma_write_byte(58,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__3__dtsteps_nom(o) (o.read(58) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__3__dtsteps_nom() ( ma_read_byte(58) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__3__bal_bw__a 0x003a
#define MA_core__pmc__pm_cfg__3__bal_bw__len 2
#define MA_core__pmc__pm_cfg__3__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__3__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__3__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__3__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__bal_bw(o,y) ({ uint8_t __ret = o.read(58); o.write(58,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__3__bal_bw(y) ({ uint8_t __ret = ma_read_byte(58); ma_write_byte(58,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__3__bal_bw(o) (o.read(58) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__3__bal_bw() ( ma_read_byte(58) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__4__pwmFreqMode__a 0x003c
#define MA_core__pmc__pm_cfg__4__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__4__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__4__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__4__pwmFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__4__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(60); o.write(60,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__4__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(60); ma_write_byte(60,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__4__pwmFreqMode(o) (o.read(60) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__4__pwmFreqMode() ( ma_read_byte(60) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__4__gdsFreqMode__a 0x003c
#define MA_core__pmc__pm_cfg__4__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__4__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__4__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__4__gdsFreqMode__reset 0x03
#define MA_core__pmc__pm_cfg__4__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(60); o.write(60,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__4__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(60); ma_write_byte(60,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__4__gdsFreqMode(o) (o.read(60) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__4__gdsFreqMode() ( ma_read_byte(60) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__4__modType__a 0x003c
#define MA_core__pmc__pm_cfg__4__modType__len 2
#define MA_core__pmc__pm_cfg__4__modType__mask 0x30
#define MA_core__pmc__pm_cfg__4__modType__shift 0x04
#define MA_core__pmc__pm_cfg__4__modType__reset 0x03
#define MA_core__pmc__pm_cfg__4__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__modType(o,y) ({ uint8_t __ret = o.read(60); o.write(60,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__4__modType(y) ({ uint8_t __ret = ma_read_byte(60); ma_write_byte(60,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__4__modType(o) (o.read(60) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__4__modType() ( ma_read_byte(60) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__4__lf_bw_scale__a 0x003c
#define MA_core__pmc__pm_cfg__4__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__4__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__4__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__4__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__4__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(60); o.write(60,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__4__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(60); ma_write_byte(60,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__4__lf_bw_scale(o) (o.read(60) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__4__lf_bw_scale() ( ma_read_byte(60) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__4__pbtl_half__a 0x003d
#define MA_core__pmc__pm_cfg__4__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__4__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__4__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__4__pbtl_half__reset 0x01
#define MA_core__pmc__pm_cfg__4__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__pbtl_half(o,y) ({ uint8_t __ret = o.read(61); o.write(61,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__4__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(61); ma_write_byte(61,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__4__pbtl_half(o) (o.read(61) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__4__pbtl_half() ( ma_read_byte(61) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__4__gd_hvpu_low__a 0x003d
#define MA_core__pmc__pm_cfg__4__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__4__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__4__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__4__gd_hvpu_low__reset 0x01
#define MA_core__pmc__pm_cfg__4__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(61); o.write(61,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__4__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(61); ma_write_byte(61,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__4__gd_hvpu_low(o) (o.read(61) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__4__gd_hvpu_low() ( ma_read_byte(61) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__4__dtsteps_nom__a 0x003d
#define MA_core__pmc__pm_cfg__4__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__4__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__4__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__4__dtsteps_nom__reset 0x05
#define MA_core__pmc__pm_cfg__4__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(61); o.write(61,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__4__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(61); ma_write_byte(61,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__4__dtsteps_nom(o) (o.read(61) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__4__dtsteps_nom() ( ma_read_byte(61) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__4__bal_bw__a 0x003d
#define MA_core__pmc__pm_cfg__4__bal_bw__len 2
#define MA_core__pmc__pm_cfg__4__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__4__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__4__bal_bw__reset 0x01
#define MA_core__pmc__pm_cfg__4__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__bal_bw(o,y) ({ uint8_t __ret = o.read(61); o.write(61,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__4__bal_bw(y) ({ uint8_t __ret = ma_read_byte(61); ma_write_byte(61,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__4__bal_bw(o) (o.read(61) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__4__bal_bw() ( ma_read_byte(61) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__5__pwmFreqMode__a 0x003f
#define MA_core__pmc__pm_cfg__5__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__5__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__5__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__5__pwmFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__5__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(63); o.write(63,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__5__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(63); ma_write_byte(63,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__5__pwmFreqMode(o) (o.read(63) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__5__pwmFreqMode() ( ma_read_byte(63) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__5__gdsFreqMode__a 0x003f
#define MA_core__pmc__pm_cfg__5__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__5__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__5__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__5__gdsFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__5__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(63); o.write(63,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__5__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(63); ma_write_byte(63,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__5__gdsFreqMode(o) (o.read(63) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__5__gdsFreqMode() ( ma_read_byte(63) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__5__modType__a 0x003f
#define MA_core__pmc__pm_cfg__5__modType__len 2
#define MA_core__pmc__pm_cfg__5__modType__mask 0x30
#define MA_core__pmc__pm_cfg__5__modType__shift 0x04
#define MA_core__pmc__pm_cfg__5__modType__reset 0x03
#define MA_core__pmc__pm_cfg__5__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__modType(o,y) ({ uint8_t __ret = o.read(63); o.write(63,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__5__modType(y) ({ uint8_t __ret = ma_read_byte(63); ma_write_byte(63,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__5__modType(o) (o.read(63) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__5__modType() ( ma_read_byte(63) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__5__lf_bw_scale__a 0x003f
#define MA_core__pmc__pm_cfg__5__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__5__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__5__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__5__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__5__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(63); o.write(63,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__5__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(63); ma_write_byte(63,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__5__lf_bw_scale(o) (o.read(63) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__5__lf_bw_scale() ( ma_read_byte(63) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__5__pbtl_half__a 0x0040
#define MA_core__pmc__pm_cfg__5__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__5__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__5__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__5__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__5__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__pbtl_half(o,y) ({ uint8_t __ret = o.read(64); o.write(64,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__5__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(64); ma_write_byte(64,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__5__pbtl_half(o) (o.read(64) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__5__pbtl_half() ( ma_read_byte(64) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__5__gd_hvpu_low__a 0x0040
#define MA_core__pmc__pm_cfg__5__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__5__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__5__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__5__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__5__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(64); o.write(64,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__5__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(64); ma_write_byte(64,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__5__gd_hvpu_low(o) (o.read(64) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__5__gd_hvpu_low() ( ma_read_byte(64) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__5__dtsteps_nom__a 0x0040
#define MA_core__pmc__pm_cfg__5__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__5__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__5__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__5__dtsteps_nom__reset 0x03
#define MA_core__pmc__pm_cfg__5__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(64); o.write(64,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__5__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(64); ma_write_byte(64,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__5__dtsteps_nom(o) (o.read(64) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__5__dtsteps_nom() ( ma_read_byte(64) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__5__bal_bw__a 0x0040
#define MA_core__pmc__pm_cfg__5__bal_bw__len 2
#define MA_core__pmc__pm_cfg__5__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__5__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__5__bal_bw__reset 0x02
#define MA_core__pmc__pm_cfg__5__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__bal_bw(o,y) ({ uint8_t __ret = o.read(64); o.write(64,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__5__bal_bw(y) ({ uint8_t __ret = ma_read_byte(64); ma_write_byte(64,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__5__bal_bw(o) (o.read(64) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__5__bal_bw() ( ma_read_byte(64) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__6__pwmFreqMode__a 0x0042
#define MA_core__pmc__pm_cfg__6__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__6__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__6__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__6__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__6__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(66); o.write(66,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__6__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(66); ma_write_byte(66,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__6__pwmFreqMode(o) (o.read(66) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__6__pwmFreqMode() ( ma_read_byte(66) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__6__gdsFreqMode__a 0x0042
#define MA_core__pmc__pm_cfg__6__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__6__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__6__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__6__gdsFreqMode__reset 0x00
#define MA_core__pmc__pm_cfg__6__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(66); o.write(66,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__6__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(66); ma_write_byte(66,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__6__gdsFreqMode(o) (o.read(66) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__6__gdsFreqMode() ( ma_read_byte(66) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__6__modType__a 0x0042
#define MA_core__pmc__pm_cfg__6__modType__len 2
#define MA_core__pmc__pm_cfg__6__modType__mask 0x30
#define MA_core__pmc__pm_cfg__6__modType__shift 0x04
#define MA_core__pmc__pm_cfg__6__modType__reset 0x03
#define MA_core__pmc__pm_cfg__6__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__modType(o,y) ({ uint8_t __ret = o.read(66); o.write(66,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__6__modType(y) ({ uint8_t __ret = ma_read_byte(66); ma_write_byte(66,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__6__modType(o) (o.read(66) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__6__modType() ( ma_read_byte(66) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__6__lf_bw_scale__a 0x0042
#define MA_core__pmc__pm_cfg__6__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__6__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__6__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__6__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__6__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(66); o.write(66,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__6__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(66); ma_write_byte(66,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__6__lf_bw_scale(o) (o.read(66) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__6__lf_bw_scale() ( ma_read_byte(66) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__6__pbtl_half__a 0x0043
#define MA_core__pmc__pm_cfg__6__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__6__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__6__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__6__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__6__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__pbtl_half(o,y) ({ uint8_t __ret = o.read(67); o.write(67,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__6__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(67); ma_write_byte(67,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__6__pbtl_half(o) (o.read(67) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__6__pbtl_half() ( ma_read_byte(67) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__6__gd_hvpu_low__a 0x0043
#define MA_core__pmc__pm_cfg__6__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__6__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__6__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__6__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__6__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(67); o.write(67,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__6__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(67); ma_write_byte(67,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__6__gd_hvpu_low(o) (o.read(67) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__6__gd_hvpu_low() ( ma_read_byte(67) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__6__dtsteps_nom__a 0x0043
#define MA_core__pmc__pm_cfg__6__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__6__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__6__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__6__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__6__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(67); o.write(67,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__6__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(67); ma_write_byte(67,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__6__dtsteps_nom(o) (o.read(67) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__6__dtsteps_nom() ( ma_read_byte(67) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__6__bal_bw__a 0x0043
#define MA_core__pmc__pm_cfg__6__bal_bw__len 2
#define MA_core__pmc__pm_cfg__6__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__6__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__6__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__6__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__bal_bw(o,y) ({ uint8_t __ret = o.read(67); o.write(67,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__6__bal_bw(y) ({ uint8_t __ret = ma_read_byte(67); ma_write_byte(67,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__6__bal_bw(o) (o.read(67) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__6__bal_bw() ( ma_read_byte(67) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__7__pwmFreqMode__a 0x0045
#define MA_core__pmc__pm_cfg__7__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__7__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__7__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__7__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__7__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(69); o.write(69,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__7__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(69); ma_write_byte(69,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__7__pwmFreqMode(o) (o.read(69) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__7__pwmFreqMode() ( ma_read_byte(69) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__7__gdsFreqMode__a 0x0045
#define MA_core__pmc__pm_cfg__7__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__7__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__7__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__7__gdsFreqMode__reset 0x00
#define MA_core__pmc__pm_cfg__7__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(69); o.write(69,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__7__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(69); ma_write_byte(69,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__7__gdsFreqMode(o) (o.read(69) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__7__gdsFreqMode() ( ma_read_byte(69) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__7__modType__a 0x0045
#define MA_core__pmc__pm_cfg__7__modType__len 2
#define MA_core__pmc__pm_cfg__7__modType__mask 0x30
#define MA_core__pmc__pm_cfg__7__modType__shift 0x04
#define MA_core__pmc__pm_cfg__7__modType__reset 0x02
#define MA_core__pmc__pm_cfg__7__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__modType(o,y) ({ uint8_t __ret = o.read(69); o.write(69,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__7__modType(y) ({ uint8_t __ret = ma_read_byte(69); ma_write_byte(69,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__7__modType(o) (o.read(69) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__7__modType() ( ma_read_byte(69) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__7__lf_bw_scale__a 0x0045
#define MA_core__pmc__pm_cfg__7__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__7__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__7__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__7__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__7__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(69); o.write(69,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__7__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(69); ma_write_byte(69,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__7__lf_bw_scale(o) (o.read(69) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__7__lf_bw_scale() ( ma_read_byte(69) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__7__pbtl_half__a 0x0046
#define MA_core__pmc__pm_cfg__7__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__7__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__7__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__7__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__7__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__pbtl_half(o,y) ({ uint8_t __ret = o.read(70); o.write(70,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__7__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(70); ma_write_byte(70,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__7__pbtl_half(o) (o.read(70) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__7__pbtl_half() ( ma_read_byte(70) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__7__gd_hvpu_low__a 0x0046
#define MA_core__pmc__pm_cfg__7__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__7__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__7__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__7__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__7__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(70); o.write(70,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__7__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(70); ma_write_byte(70,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__7__gd_hvpu_low(o) (o.read(70) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__7__gd_hvpu_low() ( ma_read_byte(70) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__7__dtsteps_nom__a 0x0046
#define MA_core__pmc__pm_cfg__7__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__7__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__7__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__7__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__7__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(70); o.write(70,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__7__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(70); ma_write_byte(70,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__7__dtsteps_nom(o) (o.read(70) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__7__dtsteps_nom() ( ma_read_byte(70) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__7__bal_bw__a 0x0046
#define MA_core__pmc__pm_cfg__7__bal_bw__len 2
#define MA_core__pmc__pm_cfg__7__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__7__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__7__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__7__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__bal_bw(o,y) ({ uint8_t __ret = o.read(70); o.write(70,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__7__bal_bw(y) ({ uint8_t __ret = ma_read_byte(70); ma_write_byte(70,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__7__bal_bw(o) (o.read(70) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__7__bal_bw() ( ma_read_byte(70) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__8__pwmFreqMode__a 0x0048
#define MA_core__pmc__pm_cfg__8__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__8__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__8__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__8__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__8__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(72); o.write(72,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__8__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(72); ma_write_byte(72,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__8__pwmFreqMode(o) (o.read(72) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__8__pwmFreqMode() ( ma_read_byte(72) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__8__gdsFreqMode__a 0x0048
#define MA_core__pmc__pm_cfg__8__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__8__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__8__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__8__gdsFreqMode__reset 0x03
#define MA_core__pmc__pm_cfg__8__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(72); o.write(72,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__8__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(72); ma_write_byte(72,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__8__gdsFreqMode(o) (o.read(72) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__8__gdsFreqMode() ( ma_read_byte(72) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__8__modType__a 0x0048
#define MA_core__pmc__pm_cfg__8__modType__len 2
#define MA_core__pmc__pm_cfg__8__modType__mask 0x30
#define MA_core__pmc__pm_cfg__8__modType__shift 0x04
#define MA_core__pmc__pm_cfg__8__modType__reset 0x03
#define MA_core__pmc__pm_cfg__8__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__modType(o,y) ({ uint8_t __ret = o.read(72); o.write(72,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__8__modType(y) ({ uint8_t __ret = ma_read_byte(72); ma_write_byte(72,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__8__modType(o) (o.read(72) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__8__modType() ( ma_read_byte(72) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__8__lf_bw_scale__a 0x0048
#define MA_core__pmc__pm_cfg__8__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__8__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__8__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__8__lf_bw_scale__reset 0x03
#define MA_core__pmc__pm_cfg__8__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(72); o.write(72,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__8__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(72); ma_write_byte(72,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__8__lf_bw_scale(o) (o.read(72) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__8__lf_bw_scale() ( ma_read_byte(72) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__8__pbtl_half__a 0x0049
#define MA_core__pmc__pm_cfg__8__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__8__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__8__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__8__pbtl_half__reset 0x01
#define MA_core__pmc__pm_cfg__8__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__pbtl_half(o,y) ({ uint8_t __ret = o.read(73); o.write(73,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__8__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(73); ma_write_byte(73,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__8__pbtl_half(o) (o.read(73) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__8__pbtl_half() ( ma_read_byte(73) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__8__gd_hvpu_low__a 0x0049
#define MA_core__pmc__pm_cfg__8__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__8__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__8__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__8__gd_hvpu_low__reset 0x01
#define MA_core__pmc__pm_cfg__8__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(73); o.write(73,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__8__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(73); ma_write_byte(73,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__8__gd_hvpu_low(o) (o.read(73) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__8__gd_hvpu_low() ( ma_read_byte(73) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__8__dtsteps_nom__a 0x0049
#define MA_core__pmc__pm_cfg__8__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__8__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__8__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__8__dtsteps_nom__reset 0x05
#define MA_core__pmc__pm_cfg__8__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(73); o.write(73,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__8__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(73); ma_write_byte(73,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__8__dtsteps_nom(o) (o.read(73) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__8__dtsteps_nom() ( ma_read_byte(73) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__8__bal_bw__a 0x0049
#define MA_core__pmc__pm_cfg__8__bal_bw__len 2
#define MA_core__pmc__pm_cfg__8__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__8__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__8__bal_bw__reset 0x01
#define MA_core__pmc__pm_cfg__8__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__bal_bw(o,y) ({ uint8_t __ret = o.read(73); o.write(73,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__8__bal_bw(y) ({ uint8_t __ret = ma_read_byte(73); ma_write_byte(73,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__8__bal_bw(o) (o.read(73) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__8__bal_bw() ( ma_read_byte(73) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__9__pwmFreqMode__a 0x004b
#define MA_core__pmc__pm_cfg__9__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__9__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__9__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__9__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__9__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(75); o.write(75,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__9__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(75); ma_write_byte(75,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__9__pwmFreqMode(o) (o.read(75) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__9__pwmFreqMode() ( ma_read_byte(75) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__9__gdsFreqMode__a 0x004b
#define MA_core__pmc__pm_cfg__9__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__9__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__9__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__9__gdsFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__9__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(75); o.write(75,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__9__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(75); ma_write_byte(75,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__9__gdsFreqMode(o) (o.read(75) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__9__gdsFreqMode() ( ma_read_byte(75) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__9__modType__a 0x004b
#define MA_core__pmc__pm_cfg__9__modType__len 2
#define MA_core__pmc__pm_cfg__9__modType__mask 0x30
#define MA_core__pmc__pm_cfg__9__modType__shift 0x04
#define MA_core__pmc__pm_cfg__9__modType__reset 0x03
#define MA_core__pmc__pm_cfg__9__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__modType(o,y) ({ uint8_t __ret = o.read(75); o.write(75,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__9__modType(y) ({ uint8_t __ret = ma_read_byte(75); ma_write_byte(75,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__9__modType(o) (o.read(75) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__9__modType() ( ma_read_byte(75) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__9__lf_bw_scale__a 0x004b
#define MA_core__pmc__pm_cfg__9__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__9__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__9__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__9__lf_bw_scale__reset 0x03
#define MA_core__pmc__pm_cfg__9__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(75); o.write(75,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__9__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(75); ma_write_byte(75,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__9__lf_bw_scale(o) (o.read(75) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__9__lf_bw_scale() ( ma_read_byte(75) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__9__pbtl_half__a 0x004c
#define MA_core__pmc__pm_cfg__9__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__9__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__9__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__9__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__9__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__pbtl_half(o,y) ({ uint8_t __ret = o.read(76); o.write(76,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__9__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(76); ma_write_byte(76,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__9__pbtl_half(o) (o.read(76) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__9__pbtl_half() ( ma_read_byte(76) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__9__gd_hvpu_low__a 0x004c
#define MA_core__pmc__pm_cfg__9__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__9__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__9__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__9__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__9__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(76); o.write(76,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__9__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(76); ma_write_byte(76,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__9__gd_hvpu_low(o) (o.read(76) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__9__gd_hvpu_low() ( ma_read_byte(76) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__9__dtsteps_nom__a 0x004c
#define MA_core__pmc__pm_cfg__9__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__9__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__9__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__9__dtsteps_nom__reset 0x03
#define MA_core__pmc__pm_cfg__9__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(76); o.write(76,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__9__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(76); ma_write_byte(76,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__9__dtsteps_nom(o) (o.read(76) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__9__dtsteps_nom() ( ma_read_byte(76) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__9__bal_bw__a 0x004c
#define MA_core__pmc__pm_cfg__9__bal_bw__len 2
#define MA_core__pmc__pm_cfg__9__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__9__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__9__bal_bw__reset 0x02
#define MA_core__pmc__pm_cfg__9__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__bal_bw(o,y) ({ uint8_t __ret = o.read(76); o.write(76,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__9__bal_bw(y) ({ uint8_t __ret = ma_read_byte(76); ma_write_byte(76,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__9__bal_bw(o) (o.read(76) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__9__bal_bw() ( ma_read_byte(76) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__10__pwmFreqMode__a 0x004e
#define MA_core__pmc__pm_cfg__10__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__10__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__10__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__10__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__10__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(78); o.write(78,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__10__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(78); ma_write_byte(78,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__10__pwmFreqMode(o) (o.read(78) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__10__pwmFreqMode() ( ma_read_byte(78) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__10__gdsFreqMode__a 0x004e
#define MA_core__pmc__pm_cfg__10__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__10__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__10__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__10__gdsFreqMode__reset 0x00
#define MA_core__pmc__pm_cfg__10__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(78); o.write(78,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__10__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(78); ma_write_byte(78,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__10__gdsFreqMode(o) (o.read(78) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__10__gdsFreqMode() ( ma_read_byte(78) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__10__modType__a 0x004e
#define MA_core__pmc__pm_cfg__10__modType__len 2
#define MA_core__pmc__pm_cfg__10__modType__mask 0x30
#define MA_core__pmc__pm_cfg__10__modType__shift 0x04
#define MA_core__pmc__pm_cfg__10__modType__reset 0x03
#define MA_core__pmc__pm_cfg__10__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__modType(o,y) ({ uint8_t __ret = o.read(78); o.write(78,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__10__modType(y) ({ uint8_t __ret = ma_read_byte(78); ma_write_byte(78,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__10__modType(o) (o.read(78) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__10__modType() ( ma_read_byte(78) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__10__lf_bw_scale__a 0x004e
#define MA_core__pmc__pm_cfg__10__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__10__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__10__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__10__lf_bw_scale__reset 0x03
#define MA_core__pmc__pm_cfg__10__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(78); o.write(78,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__10__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(78); ma_write_byte(78,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__10__lf_bw_scale(o) (o.read(78) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__10__lf_bw_scale() ( ma_read_byte(78) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__10__pbtl_half__a 0x004f
#define MA_core__pmc__pm_cfg__10__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__10__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__10__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__10__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__10__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__pbtl_half(o,y) ({ uint8_t __ret = o.read(79); o.write(79,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__10__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(79); ma_write_byte(79,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__10__pbtl_half(o) (o.read(79) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__10__pbtl_half() ( ma_read_byte(79) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__10__gd_hvpu_low__a 0x004f
#define MA_core__pmc__pm_cfg__10__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__10__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__10__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__10__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__10__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(79); o.write(79,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__10__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(79); ma_write_byte(79,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__10__gd_hvpu_low(o) (o.read(79) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__10__gd_hvpu_low() ( ma_read_byte(79) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__10__dtsteps_nom__a 0x004f
#define MA_core__pmc__pm_cfg__10__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__10__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__10__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__10__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__10__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(79); o.write(79,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__10__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(79); ma_write_byte(79,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__10__dtsteps_nom(o) (o.read(79) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__10__dtsteps_nom() ( ma_read_byte(79) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__10__bal_bw__a 0x004f
#define MA_core__pmc__pm_cfg__10__bal_bw__len 2
#define MA_core__pmc__pm_cfg__10__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__10__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__10__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__10__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__bal_bw(o,y) ({ uint8_t __ret = o.read(79); o.write(79,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__10__bal_bw(y) ({ uint8_t __ret = ma_read_byte(79); ma_write_byte(79,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__10__bal_bw(o) (o.read(79) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__10__bal_bw() ( ma_read_byte(79) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__11__pwmFreqMode__a 0x0051
#define MA_core__pmc__pm_cfg__11__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__11__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__11__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__11__pwmFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__11__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(81); o.write(81,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__11__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(81); ma_write_byte(81,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__11__pwmFreqMode(o) (o.read(81) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__11__pwmFreqMode() ( ma_read_byte(81) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__11__gdsFreqMode__a 0x0051
#define MA_core__pmc__pm_cfg__11__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__11__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__11__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__11__gdsFreqMode__reset 0x00
#define MA_core__pmc__pm_cfg__11__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(81); o.write(81,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__11__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(81); ma_write_byte(81,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__11__gdsFreqMode(o) (o.read(81) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__11__gdsFreqMode() ( ma_read_byte(81) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__11__modType__a 0x0051
#define MA_core__pmc__pm_cfg__11__modType__len 2
#define MA_core__pmc__pm_cfg__11__modType__mask 0x30
#define MA_core__pmc__pm_cfg__11__modType__shift 0x04
#define MA_core__pmc__pm_cfg__11__modType__reset 0x03
#define MA_core__pmc__pm_cfg__11__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__modType(o,y) ({ uint8_t __ret = o.read(81); o.write(81,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__11__modType(y) ({ uint8_t __ret = ma_read_byte(81); ma_write_byte(81,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__11__modType(o) (o.read(81) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__11__modType() ( ma_read_byte(81) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__11__lf_bw_scale__a 0x0051
#define MA_core__pmc__pm_cfg__11__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__11__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__11__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__11__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__11__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(81); o.write(81,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__11__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(81); ma_write_byte(81,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__11__lf_bw_scale(o) (o.read(81) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__11__lf_bw_scale() ( ma_read_byte(81) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__11__pbtl_half__a 0x0052
#define MA_core__pmc__pm_cfg__11__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__11__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__11__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__11__pbtl_half__reset 0x01
#define MA_core__pmc__pm_cfg__11__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__pbtl_half(o,y) ({ uint8_t __ret = o.read(82); o.write(82,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__11__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(82); ma_write_byte(82,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__11__pbtl_half(o) (o.read(82) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__11__pbtl_half() ( ma_read_byte(82) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__11__gd_hvpu_low__a 0x0052
#define MA_core__pmc__pm_cfg__11__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__11__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__11__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__11__gd_hvpu_low__reset 0x01
#define MA_core__pmc__pm_cfg__11__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(82); o.write(82,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__11__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(82); ma_write_byte(82,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__11__gd_hvpu_low(o) (o.read(82) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__11__gd_hvpu_low() ( ma_read_byte(82) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__11__dtsteps_nom__a 0x0052
#define MA_core__pmc__pm_cfg__11__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__11__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__11__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__11__dtsteps_nom__reset 0x05
#define MA_core__pmc__pm_cfg__11__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(82); o.write(82,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__11__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(82); ma_write_byte(82,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__11__dtsteps_nom(o) (o.read(82) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__11__dtsteps_nom() ( ma_read_byte(82) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__11__bal_bw__a 0x0052
#define MA_core__pmc__pm_cfg__11__bal_bw__len 2
#define MA_core__pmc__pm_cfg__11__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__11__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__11__bal_bw__reset 0x01
#define MA_core__pmc__pm_cfg__11__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__bal_bw(o,y) ({ uint8_t __ret = o.read(82); o.write(82,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__11__bal_bw(y) ({ uint8_t __ret = ma_read_byte(82); ma_write_byte(82,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__11__bal_bw(o) (o.read(82) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__11__bal_bw() ( ma_read_byte(82) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__12__pwmFreqMode__a 0x0054
#define MA_core__pmc__pm_cfg__12__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__12__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__12__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__12__pwmFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__12__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(84); o.write(84,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__12__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(84); ma_write_byte(84,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__12__pwmFreqMode(o) (o.read(84) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__12__pwmFreqMode() ( ma_read_byte(84) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__12__gdsFreqMode__a 0x0054
#define MA_core__pmc__pm_cfg__12__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__12__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__12__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__12__gdsFreqMode__reset 0x03
#define MA_core__pmc__pm_cfg__12__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(84); o.write(84,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__12__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(84); ma_write_byte(84,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__12__gdsFreqMode(o) (o.read(84) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__12__gdsFreqMode() ( ma_read_byte(84) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__12__modType__a 0x0054
#define MA_core__pmc__pm_cfg__12__modType__len 2
#define MA_core__pmc__pm_cfg__12__modType__mask 0x30
#define MA_core__pmc__pm_cfg__12__modType__shift 0x04
#define MA_core__pmc__pm_cfg__12__modType__reset 0x03
#define MA_core__pmc__pm_cfg__12__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__modType(o,y) ({ uint8_t __ret = o.read(84); o.write(84,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__12__modType(y) ({ uint8_t __ret = ma_read_byte(84); ma_write_byte(84,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__12__modType(o) (o.read(84) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__12__modType() ( ma_read_byte(84) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__12__lf_bw_scale__a 0x0054
#define MA_core__pmc__pm_cfg__12__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__12__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__12__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__12__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__12__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(84); o.write(84,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__12__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(84); ma_write_byte(84,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__12__lf_bw_scale(o) (o.read(84) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__12__lf_bw_scale() ( ma_read_byte(84) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__12__pbtl_half__a 0x0055
#define MA_core__pmc__pm_cfg__12__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__12__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__12__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__12__pbtl_half__reset 0x01
#define MA_core__pmc__pm_cfg__12__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__pbtl_half(o,y) ({ uint8_t __ret = o.read(85); o.write(85,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__12__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(85); ma_write_byte(85,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__12__pbtl_half(o) (o.read(85) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__12__pbtl_half() ( ma_read_byte(85) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__12__gd_hvpu_low__a 0x0055
#define MA_core__pmc__pm_cfg__12__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__12__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__12__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__12__gd_hvpu_low__reset 0x01
#define MA_core__pmc__pm_cfg__12__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(85); o.write(85,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__12__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(85); ma_write_byte(85,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__12__gd_hvpu_low(o) (o.read(85) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__12__gd_hvpu_low() ( ma_read_byte(85) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__12__dtsteps_nom__a 0x0055
#define MA_core__pmc__pm_cfg__12__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__12__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__12__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__12__dtsteps_nom__reset 0x05
#define MA_core__pmc__pm_cfg__12__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(85); o.write(85,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__12__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(85); ma_write_byte(85,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__12__dtsteps_nom(o) (o.read(85) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__12__dtsteps_nom() ( ma_read_byte(85) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__12__bal_bw__a 0x0055
#define MA_core__pmc__pm_cfg__12__bal_bw__len 2
#define MA_core__pmc__pm_cfg__12__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__12__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__12__bal_bw__reset 0x01
#define MA_core__pmc__pm_cfg__12__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__bal_bw(o,y) ({ uint8_t __ret = o.read(85); o.write(85,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__12__bal_bw(y) ({ uint8_t __ret = ma_read_byte(85); ma_write_byte(85,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__12__bal_bw(o) (o.read(85) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__12__bal_bw() ( ma_read_byte(85) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__13__pwmFreqMode__a 0x0057
#define MA_core__pmc__pm_cfg__13__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__13__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__13__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__13__pwmFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__13__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(87); o.write(87,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__13__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(87); ma_write_byte(87,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__13__pwmFreqMode(o) (o.read(87) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__13__pwmFreqMode() ( ma_read_byte(87) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__13__gdsFreqMode__a 0x0057
#define MA_core__pmc__pm_cfg__13__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__13__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__13__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__13__gdsFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__13__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(87); o.write(87,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__13__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(87); ma_write_byte(87,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__13__gdsFreqMode(o) (o.read(87) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__13__gdsFreqMode() ( ma_read_byte(87) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__13__modType__a 0x0057
#define MA_core__pmc__pm_cfg__13__modType__len 2
#define MA_core__pmc__pm_cfg__13__modType__mask 0x30
#define MA_core__pmc__pm_cfg__13__modType__shift 0x04
#define MA_core__pmc__pm_cfg__13__modType__reset 0x03
#define MA_core__pmc__pm_cfg__13__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__modType(o,y) ({ uint8_t __ret = o.read(87); o.write(87,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__13__modType(y) ({ uint8_t __ret = ma_read_byte(87); ma_write_byte(87,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__13__modType(o) (o.read(87) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__13__modType() ( ma_read_byte(87) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__13__lf_bw_scale__a 0x0057
#define MA_core__pmc__pm_cfg__13__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__13__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__13__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__13__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__13__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(87); o.write(87,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__13__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(87); ma_write_byte(87,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__13__lf_bw_scale(o) (o.read(87) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__13__lf_bw_scale() ( ma_read_byte(87) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__13__pbtl_half__a 0x0058
#define MA_core__pmc__pm_cfg__13__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__13__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__13__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__13__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__13__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__pbtl_half(o,y) ({ uint8_t __ret = o.read(88); o.write(88,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__13__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(88); ma_write_byte(88,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__13__pbtl_half(o) (o.read(88) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__13__pbtl_half() ( ma_read_byte(88) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__13__gd_hvpu_low__a 0x0058
#define MA_core__pmc__pm_cfg__13__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__13__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__13__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__13__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__13__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(88); o.write(88,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__13__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(88); ma_write_byte(88,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__13__gd_hvpu_low(o) (o.read(88) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__13__gd_hvpu_low() ( ma_read_byte(88) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__13__dtsteps_nom__a 0x0058
#define MA_core__pmc__pm_cfg__13__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__13__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__13__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__13__dtsteps_nom__reset 0x03
#define MA_core__pmc__pm_cfg__13__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(88); o.write(88,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__13__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(88); ma_write_byte(88,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__13__dtsteps_nom(o) (o.read(88) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__13__dtsteps_nom() ( ma_read_byte(88) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__13__bal_bw__a 0x0058
#define MA_core__pmc__pm_cfg__13__bal_bw__len 2
#define MA_core__pmc__pm_cfg__13__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__13__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__13__bal_bw__reset 0x02
#define MA_core__pmc__pm_cfg__13__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__bal_bw(o,y) ({ uint8_t __ret = o.read(88); o.write(88,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__13__bal_bw(y) ({ uint8_t __ret = ma_read_byte(88); ma_write_byte(88,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__13__bal_bw(o) (o.read(88) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__13__bal_bw() ( ma_read_byte(88) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__14__pwmFreqMode__a 0x005a
#define MA_core__pmc__pm_cfg__14__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__14__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__14__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__14__pwmFreqMode__reset 0x03
#define MA_core__pmc__pm_cfg__14__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(90); o.write(90,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__14__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(90); ma_write_byte(90,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__14__pwmFreqMode(o) (o.read(90) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__14__pwmFreqMode() ( ma_read_byte(90) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__14__gdsFreqMode__a 0x005a
#define MA_core__pmc__pm_cfg__14__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__14__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__14__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__14__gdsFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__14__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(90); o.write(90,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__14__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(90); ma_write_byte(90,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__14__gdsFreqMode(o) (o.read(90) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__14__gdsFreqMode() ( ma_read_byte(90) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__14__modType__a 0x005a
#define MA_core__pmc__pm_cfg__14__modType__len 2
#define MA_core__pmc__pm_cfg__14__modType__mask 0x30
#define MA_core__pmc__pm_cfg__14__modType__shift 0x04
#define MA_core__pmc__pm_cfg__14__modType__reset 0x03
#define MA_core__pmc__pm_cfg__14__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__modType(o,y) ({ uint8_t __ret = o.read(90); o.write(90,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__14__modType(y) ({ uint8_t __ret = ma_read_byte(90); ma_write_byte(90,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__14__modType(o) (o.read(90) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__14__modType() ( ma_read_byte(90) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__14__lf_bw_scale__a 0x005a
#define MA_core__pmc__pm_cfg__14__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__14__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__14__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__14__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__14__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(90); o.write(90,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__14__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(90); ma_write_byte(90,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__14__lf_bw_scale(o) (o.read(90) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__14__lf_bw_scale() ( ma_read_byte(90) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__14__pbtl_half__a 0x005b
#define MA_core__pmc__pm_cfg__14__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__14__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__14__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__14__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__14__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__pbtl_half(o,y) ({ uint8_t __ret = o.read(91); o.write(91,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__14__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(91); ma_write_byte(91,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__14__pbtl_half(o) (o.read(91) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__14__pbtl_half() ( ma_read_byte(91) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__14__gd_hvpu_low__a 0x005b
#define MA_core__pmc__pm_cfg__14__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__14__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__14__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__14__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__14__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(91); o.write(91,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__14__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(91); ma_write_byte(91,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__14__gd_hvpu_low(o) (o.read(91) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__14__gd_hvpu_low() ( ma_read_byte(91) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__14__dtsteps_nom__a 0x005b
#define MA_core__pmc__pm_cfg__14__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__14__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__14__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__14__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__14__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(91); o.write(91,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__14__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(91); ma_write_byte(91,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__14__dtsteps_nom(o) (o.read(91) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__14__dtsteps_nom() ( ma_read_byte(91) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__14__bal_bw__a 0x005b
#define MA_core__pmc__pm_cfg__14__bal_bw__len 2
#define MA_core__pmc__pm_cfg__14__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__14__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__14__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__14__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__bal_bw(o,y) ({ uint8_t __ret = o.read(91); o.write(91,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__14__bal_bw(y) ({ uint8_t __ret = ma_read_byte(91); ma_write_byte(91,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__14__bal_bw(o) (o.read(91) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__14__bal_bw() ( ma_read_byte(91) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__15__pwmFreqMode__a 0x005d
#define MA_core__pmc__pm_cfg__15__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__15__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__15__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__15__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__15__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(93); o.write(93,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__15__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(93); ma_write_byte(93,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__15__pwmFreqMode(o) (o.read(93) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__15__pwmFreqMode() ( ma_read_byte(93) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__15__gdsFreqMode__a 0x005d
#define MA_core__pmc__pm_cfg__15__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__15__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__15__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__15__gdsFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__15__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(93); o.write(93,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__15__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(93); ma_write_byte(93,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__15__gdsFreqMode(o) (o.read(93) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__15__gdsFreqMode() ( ma_read_byte(93) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__15__modType__a 0x005d
#define MA_core__pmc__pm_cfg__15__modType__len 2
#define MA_core__pmc__pm_cfg__15__modType__mask 0x30
#define MA_core__pmc__pm_cfg__15__modType__shift 0x04
#define MA_core__pmc__pm_cfg__15__modType__reset 0x02
#define MA_core__pmc__pm_cfg__15__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__modType(o,y) ({ uint8_t __ret = o.read(93); o.write(93,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__15__modType(y) ({ uint8_t __ret = ma_read_byte(93); ma_write_byte(93,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__15__modType(o) (o.read(93) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__15__modType() ( ma_read_byte(93) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__15__lf_bw_scale__a 0x005d
#define MA_core__pmc__pm_cfg__15__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__15__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__15__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__15__lf_bw_scale__reset 0x01
#define MA_core__pmc__pm_cfg__15__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(93); o.write(93,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__15__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(93); ma_write_byte(93,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__15__lf_bw_scale(o) (o.read(93) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__15__lf_bw_scale() ( ma_read_byte(93) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__15__pbtl_half__a 0x005e
#define MA_core__pmc__pm_cfg__15__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__15__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__15__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__15__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__15__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__pbtl_half(o,y) ({ uint8_t __ret = o.read(94); o.write(94,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__15__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(94); ma_write_byte(94,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__15__pbtl_half(o) (o.read(94) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__15__pbtl_half() ( ma_read_byte(94) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__15__gd_hvpu_low__a 0x005e
#define MA_core__pmc__pm_cfg__15__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__15__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__15__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__15__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__15__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(94); o.write(94,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__15__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(94); ma_write_byte(94,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__15__gd_hvpu_low(o) (o.read(94) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__15__gd_hvpu_low() ( ma_read_byte(94) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__15__dtsteps_nom__a 0x005e
#define MA_core__pmc__pm_cfg__15__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__15__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__15__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__15__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__15__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(94); o.write(94,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__15__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(94); ma_write_byte(94,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__15__dtsteps_nom(o) (o.read(94) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__15__dtsteps_nom() ( ma_read_byte(94) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__15__bal_bw__a 0x005e
#define MA_core__pmc__pm_cfg__15__bal_bw__len 2
#define MA_core__pmc__pm_cfg__15__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__15__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__15__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__15__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__bal_bw(o,y) ({ uint8_t __ret = o.read(94); o.write(94,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__15__bal_bw(y) ({ uint8_t __ret = ma_read_byte(94); ma_write_byte(94,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__15__bal_bw(o) (o.read(94) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__15__bal_bw() ( ma_read_byte(94) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__16__pwmFreqMode__a 0x0060
#define MA_core__pmc__pm_cfg__16__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__16__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__16__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__16__pwmFreqMode__reset 0x02
#define MA_core__pmc__pm_cfg__16__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(96); o.write(96,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__16__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(96); ma_write_byte(96,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__16__pwmFreqMode(o) (o.read(96) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__16__pwmFreqMode() ( ma_read_byte(96) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__16__gdsFreqMode__a 0x0060
#define MA_core__pmc__pm_cfg__16__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__16__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__16__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__16__gdsFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__16__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(96); o.write(96,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__16__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(96); ma_write_byte(96,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__16__gdsFreqMode(o) (o.read(96) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__16__gdsFreqMode() ( ma_read_byte(96) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__16__modType__a 0x0060
#define MA_core__pmc__pm_cfg__16__modType__len 2
#define MA_core__pmc__pm_cfg__16__modType__mask 0x30
#define MA_core__pmc__pm_cfg__16__modType__shift 0x04
#define MA_core__pmc__pm_cfg__16__modType__reset 0x01
#define MA_core__pmc__pm_cfg__16__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__modType(o,y) ({ uint8_t __ret = o.read(96); o.write(96,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__16__modType(y) ({ uint8_t __ret = ma_read_byte(96); ma_write_byte(96,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__16__modType(o) (o.read(96) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__16__modType() ( ma_read_byte(96) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__16__lf_bw_scale__a 0x0060
#define MA_core__pmc__pm_cfg__16__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__16__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__16__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__16__lf_bw_scale__reset 0x00
#define MA_core__pmc__pm_cfg__16__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(96); o.write(96,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__16__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(96); ma_write_byte(96,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__16__lf_bw_scale(o) (o.read(96) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__16__lf_bw_scale() ( ma_read_byte(96) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__16__pbtl_half__a 0x0061
#define MA_core__pmc__pm_cfg__16__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__16__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__16__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__16__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__16__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__pbtl_half(o,y) ({ uint8_t __ret = o.read(97); o.write(97,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__16__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(97); ma_write_byte(97,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__16__pbtl_half(o) (o.read(97) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__16__pbtl_half() ( ma_read_byte(97) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__16__gd_hvpu_low__a 0x0061
#define MA_core__pmc__pm_cfg__16__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__16__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__16__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__16__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__16__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(97); o.write(97,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__16__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(97); ma_write_byte(97,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__16__gd_hvpu_low(o) (o.read(97) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__16__gd_hvpu_low() ( ma_read_byte(97) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__16__dtsteps_nom__a 0x0061
#define MA_core__pmc__pm_cfg__16__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__16__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__16__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__16__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__16__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(97); o.write(97,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__16__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(97); ma_write_byte(97,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__16__dtsteps_nom(o) (o.read(97) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__16__dtsteps_nom() ( ma_read_byte(97) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__16__bal_bw__a 0x0061
#define MA_core__pmc__pm_cfg__16__bal_bw__len 2
#define MA_core__pmc__pm_cfg__16__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__16__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__16__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__16__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__bal_bw(o,y) ({ uint8_t __ret = o.read(97); o.write(97,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__16__bal_bw(y) ({ uint8_t __ret = ma_read_byte(97); ma_write_byte(97,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__16__bal_bw(o) (o.read(97) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__16__bal_bw() ( ma_read_byte(97) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__17__pwmFreqMode__a 0x0063
#define MA_core__pmc__pm_cfg__17__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__17__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__17__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__17__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__17__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(99); o.write(99,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__17__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(99); ma_write_byte(99,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__17__pwmFreqMode(o) (o.read(99) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__17__pwmFreqMode() ( ma_read_byte(99) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__17__gdsFreqMode__a 0x0063
#define MA_core__pmc__pm_cfg__17__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__17__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__17__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__17__gdsFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__17__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(99); o.write(99,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__17__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(99); ma_write_byte(99,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__17__gdsFreqMode(o) (o.read(99) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__17__gdsFreqMode() ( ma_read_byte(99) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__17__modType__a 0x0063
#define MA_core__pmc__pm_cfg__17__modType__len 2
#define MA_core__pmc__pm_cfg__17__modType__mask 0x30
#define MA_core__pmc__pm_cfg__17__modType__shift 0x04
#define MA_core__pmc__pm_cfg__17__modType__reset 0x01
#define MA_core__pmc__pm_cfg__17__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__modType(o,y) ({ uint8_t __ret = o.read(99); o.write(99,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__17__modType(y) ({ uint8_t __ret = ma_read_byte(99); ma_write_byte(99,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__17__modType(o) (o.read(99) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__17__modType() ( ma_read_byte(99) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__17__lf_bw_scale__a 0x0063
#define MA_core__pmc__pm_cfg__17__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__17__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__17__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__17__lf_bw_scale__reset 0x00
#define MA_core__pmc__pm_cfg__17__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(99); o.write(99,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__17__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(99); ma_write_byte(99,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__17__lf_bw_scale(o) (o.read(99) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__17__lf_bw_scale() ( ma_read_byte(99) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__17__pbtl_half__a 0x0064
#define MA_core__pmc__pm_cfg__17__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__17__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__17__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__17__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__17__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__pbtl_half(o,y) ({ uint8_t __ret = o.read(100); o.write(100,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__17__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(100); ma_write_byte(100,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__17__pbtl_half(o) (o.read(100) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__17__pbtl_half() ( ma_read_byte(100) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__17__gd_hvpu_low__a 0x0064
#define MA_core__pmc__pm_cfg__17__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__17__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__17__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__17__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__17__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(100); o.write(100,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__17__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(100); ma_write_byte(100,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__17__gd_hvpu_low(o) (o.read(100) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__17__gd_hvpu_low() ( ma_read_byte(100) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__17__dtsteps_nom__a 0x0064
#define MA_core__pmc__pm_cfg__17__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__17__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__17__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__17__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__17__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(100); o.write(100,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__17__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(100); ma_write_byte(100,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__17__dtsteps_nom(o) (o.read(100) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__17__dtsteps_nom() ( ma_read_byte(100) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__17__bal_bw__a 0x0064
#define MA_core__pmc__pm_cfg__17__bal_bw__len 2
#define MA_core__pmc__pm_cfg__17__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__17__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__17__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__17__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__bal_bw(o,y) ({ uint8_t __ret = o.read(100); o.write(100,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__17__bal_bw(y) ({ uint8_t __ret = ma_read_byte(100); ma_write_byte(100,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__17__bal_bw(o) (o.read(100) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__17__bal_bw() ( ma_read_byte(100) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__18__pwmFreqMode__a 0x0066
#define MA_core__pmc__pm_cfg__18__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__18__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__18__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__18__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__18__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(102); o.write(102,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__18__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(102); ma_write_byte(102,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__18__pwmFreqMode(o) (o.read(102) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__18__pwmFreqMode() ( ma_read_byte(102) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__18__gdsFreqMode__a 0x0066
#define MA_core__pmc__pm_cfg__18__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__18__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__18__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__18__gdsFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__18__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(102); o.write(102,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__18__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(102); ma_write_byte(102,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__18__gdsFreqMode(o) (o.read(102) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__18__gdsFreqMode() ( ma_read_byte(102) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__18__modType__a 0x0066
#define MA_core__pmc__pm_cfg__18__modType__len 2
#define MA_core__pmc__pm_cfg__18__modType__mask 0x30
#define MA_core__pmc__pm_cfg__18__modType__shift 0x04
#define MA_core__pmc__pm_cfg__18__modType__reset 0x01
#define MA_core__pmc__pm_cfg__18__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__modType(o,y) ({ uint8_t __ret = o.read(102); o.write(102,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__18__modType(y) ({ uint8_t __ret = ma_read_byte(102); ma_write_byte(102,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__18__modType(o) (o.read(102) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__18__modType() ( ma_read_byte(102) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__18__lf_bw_scale__a 0x0066
#define MA_core__pmc__pm_cfg__18__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__18__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__18__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__18__lf_bw_scale__reset 0x00
#define MA_core__pmc__pm_cfg__18__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(102); o.write(102,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__18__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(102); ma_write_byte(102,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__18__lf_bw_scale(o) (o.read(102) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__18__lf_bw_scale() ( ma_read_byte(102) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__18__pbtl_half__a 0x0067
#define MA_core__pmc__pm_cfg__18__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__18__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__18__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__18__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__18__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__pbtl_half(o,y) ({ uint8_t __ret = o.read(103); o.write(103,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__18__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(103); ma_write_byte(103,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__18__pbtl_half(o) (o.read(103) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__18__pbtl_half() ( ma_read_byte(103) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__18__gd_hvpu_low__a 0x0067
#define MA_core__pmc__pm_cfg__18__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__18__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__18__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__18__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__18__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(103); o.write(103,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__18__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(103); ma_write_byte(103,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__18__gd_hvpu_low(o) (o.read(103) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__18__gd_hvpu_low() ( ma_read_byte(103) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__18__dtsteps_nom__a 0x0067
#define MA_core__pmc__pm_cfg__18__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__18__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__18__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__18__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__18__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(103); o.write(103,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__18__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(103); ma_write_byte(103,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__18__dtsteps_nom(o) (o.read(103) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__18__dtsteps_nom() ( ma_read_byte(103) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__18__bal_bw__a 0x0067
#define MA_core__pmc__pm_cfg__18__bal_bw__len 2
#define MA_core__pmc__pm_cfg__18__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__18__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__18__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__18__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__bal_bw(o,y) ({ uint8_t __ret = o.read(103); o.write(103,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__18__bal_bw(y) ({ uint8_t __ret = ma_read_byte(103); ma_write_byte(103,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__18__bal_bw(o) (o.read(103) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__18__bal_bw() ( ma_read_byte(103) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__pwmFreqMode---
// 0:Base, 1:Base/2, 2:Base/4, 3:Base/8
#define MA_core__pmc__pm_cfg__19__pwmFreqMode__a 0x0069
#define MA_core__pmc__pm_cfg__19__pwmFreqMode__len 2
#define MA_core__pmc__pm_cfg__19__pwmFreqMode__mask 0x03
#define MA_core__pmc__pm_cfg__19__pwmFreqMode__shift 0x00
#define MA_core__pmc__pm_cfg__19__pwmFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__19__pwmFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__pwmFreqMode(o,y) ({ uint8_t __ret = o.read(105); o.write(105,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__19__pwmFreqMode(y) ({ uint8_t __ret = ma_read_byte(105); ma_write_byte(105,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__19__pwmFreqMode(o) (o.read(105) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__19__pwmFreqMode() ( ma_read_byte(105) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__gdsFreqMode---
// GD serial bus reshesh rate. 0:fsw*2, 1:fsw*(2/3), 2:fsw/?, 3: fsw/?
#define MA_core__pmc__pm_cfg__19__gdsFreqMode__a 0x0069
#define MA_core__pmc__pm_cfg__19__gdsFreqMode__len 2
#define MA_core__pmc__pm_cfg__19__gdsFreqMode__mask 0x0c
#define MA_core__pmc__pm_cfg__19__gdsFreqMode__shift 0x02
#define MA_core__pmc__pm_cfg__19__gdsFreqMode__reset 0x01
#define MA_core__pmc__pm_cfg__19__gdsFreqMode__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__gdsFreqMode(o,y) ({ uint8_t __ret = o.read(105); o.write(105,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__pm_cfg__19__gdsFreqMode(y) ({ uint8_t __ret = ma_read_byte(105); ma_write_byte(105,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__pm_cfg__19__gdsFreqMode(o) (o.read(105) & 0x0c)>>2
#define get_MA_core__pmc__pm_cfg__19__gdsFreqMode() ( ma_read_byte(105) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__modType---
// PWM BTL modulation type; 0 => 2-level (AD), 1 => 3-level (BD), 2 => 3-level (FC no-CM), 3 => 5-level
#define MA_core__pmc__pm_cfg__19__modType__a 0x0069
#define MA_core__pmc__pm_cfg__19__modType__len 2
#define MA_core__pmc__pm_cfg__19__modType__mask 0x30
#define MA_core__pmc__pm_cfg__19__modType__shift 0x04
#define MA_core__pmc__pm_cfg__19__modType__reset 0x01
#define MA_core__pmc__pm_cfg__19__modType__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__modType(o,y) ({ uint8_t __ret = o.read(105); o.write(105,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__pm_cfg__19__modType(y) ({ uint8_t __ret = ma_read_byte(105); ma_write_byte(105,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__pm_cfg__19__modType(o) (o.read(105) & 0x30)>>4
#define get_MA_core__pmc__pm_cfg__19__modType() ( ma_read_byte(105) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__lf_bw_scale---
// Loop filter freq. resp. mode; 0 => low-bw, 1=> mid-bw; 2,3=> high-bw
#define MA_core__pmc__pm_cfg__19__lf_bw_scale__a 0x0069
#define MA_core__pmc__pm_cfg__19__lf_bw_scale__len 2
#define MA_core__pmc__pm_cfg__19__lf_bw_scale__mask 0xc0
#define MA_core__pmc__pm_cfg__19__lf_bw_scale__shift 0x06
#define MA_core__pmc__pm_cfg__19__lf_bw_scale__reset 0x00
#define MA_core__pmc__pm_cfg__19__lf_bw_scale__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__lf_bw_scale(o,y) ({ uint8_t __ret = o.read(105); o.write(105,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__19__lf_bw_scale(y) ({ uint8_t __ret = ma_read_byte(105); ma_write_byte(105,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__19__lf_bw_scale(o) (o.read(105) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__19__lf_bw_scale() ( ma_read_byte(105) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__pbtl_half---
// High to use only a single channel for PBTL operation (power saving feature), low for std. PBTL.
#define MA_core__pmc__pm_cfg__19__pbtl_half__a 0x006a
#define MA_core__pmc__pm_cfg__19__pbtl_half__len 1
#define MA_core__pmc__pm_cfg__19__pbtl_half__mask 0x01
#define MA_core__pmc__pm_cfg__19__pbtl_half__shift 0x00
#define MA_core__pmc__pm_cfg__19__pbtl_half__reset 0x00
#define MA_core__pmc__pm_cfg__19__pbtl_half__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__pbtl_half(o,y) ({ uint8_t __ret = o.read(106); o.write(106,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__pm_cfg__19__pbtl_half(y) ({ uint8_t __ret = ma_read_byte(106); ma_write_byte(106,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__pm_cfg__19__pbtl_half(o) (o.read(106) & 0x01)>>0
#define get_MA_core__pmc__pm_cfg__19__pbtl_half() ( ma_read_byte(106) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__gd_hvpu_low---
// High to use reduced-pullup (x1/4) in gate driver for gate charge power saving.
#define MA_core__pmc__pm_cfg__19__gd_hvpu_low__a 0x006a
#define MA_core__pmc__pm_cfg__19__gd_hvpu_low__len 1
#define MA_core__pmc__pm_cfg__19__gd_hvpu_low__mask 0x02
#define MA_core__pmc__pm_cfg__19__gd_hvpu_low__shift 0x01
#define MA_core__pmc__pm_cfg__19__gd_hvpu_low__reset 0x00
#define MA_core__pmc__pm_cfg__19__gd_hvpu_low__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__gd_hvpu_low(o,y) ({ uint8_t __ret = o.read(106); o.write(106,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__pm_cfg__19__gd_hvpu_low(y) ({ uint8_t __ret = ma_read_byte(106); ma_write_byte(106,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__pm_cfg__19__gd_hvpu_low(o) (o.read(106) & 0x02)>>1
#define get_MA_core__pmc__pm_cfg__19__gd_hvpu_low() ( ma_read_byte(106) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__dtsteps_nom---
// Nominal number of dead time steps (5-ish ns per step.)
#define MA_core__pmc__pm_cfg__19__dtsteps_nom__a 0x006a
#define MA_core__pmc__pm_cfg__19__dtsteps_nom__len 4
#define MA_core__pmc__pm_cfg__19__dtsteps_nom__mask 0x3c
#define MA_core__pmc__pm_cfg__19__dtsteps_nom__shift 0x02
#define MA_core__pmc__pm_cfg__19__dtsteps_nom__reset 0x02
#define MA_core__pmc__pm_cfg__19__dtsteps_nom__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__dtsteps_nom(o,y) ({ uint8_t __ret = o.read(106); o.write(106,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__pm_cfg__19__dtsteps_nom(y) ({ uint8_t __ret = ma_read_byte(106); ma_write_byte(106,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__pm_cfg__19__dtsteps_nom(o) (o.read(106) & 0x3c)>>2
#define get_MA_core__pmc__pm_cfg__19__dtsteps_nom() ( ma_read_byte(106) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__bal_bw---
// Vcfly balancing HW loop gain/bandwidth. "00" => lowest. "11" => highest.
#define MA_core__pmc__pm_cfg__19__bal_bw__a 0x006a
#define MA_core__pmc__pm_cfg__19__bal_bw__len 2
#define MA_core__pmc__pm_cfg__19__bal_bw__mask 0xc0
#define MA_core__pmc__pm_cfg__19__bal_bw__shift 0x06
#define MA_core__pmc__pm_cfg__19__bal_bw__reset 0x03
#define MA_core__pmc__pm_cfg__19__bal_bw__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__bal_bw(o,y) ({ uint8_t __ret = o.read(106); o.write(106,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__pm_cfg__19__bal_bw(y) ({ uint8_t __ret = ma_read_byte(106); ma_write_byte(106,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__pm_cfg__19__bal_bw(o) (o.read(106) & 0xc0)>>6
#define get_MA_core__pmc__pm_cfg__19__bal_bw() ( ma_read_byte(106) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__PMP0__PMcfg0_idx---
// 4b. PowerMode 0 settings pointer.
#define MA_core__pmc__otp__PMP0__PMcfg0_idx__a 0x006c
#define MA_core__pmc__otp__PMP0__PMcfg0_idx__len 4
#define MA_core__pmc__otp__PMP0__PMcfg0_idx__mask 0x0f
#define MA_core__pmc__otp__PMP0__PMcfg0_idx__shift 0x00
#define MA_core__pmc__otp__PMP0__PMcfg0_idx__reset 0x00
#define MA_core__pmc__otp__PMP0__PMcfg0_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__PMcfg0_idx(o,y) ({ uint8_t __ret = o.read(108); o.write(108,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP0__PMcfg0_idx(y) ({ uint8_t __ret = ma_read_byte(108); ma_write_byte(108,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP0__PMcfg0_idx(o) (o.read(108) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP0__PMcfg0_idx() ( ma_read_byte(108) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP0__PMcfg1_idx---
// 4b. PowerMode 1 settings pointer.
#define MA_core__pmc__otp__PMP0__PMcfg1_idx__a 0x006c
#define MA_core__pmc__otp__PMP0__PMcfg1_idx__len 4
#define MA_core__pmc__otp__PMP0__PMcfg1_idx__mask 0xf0
#define MA_core__pmc__otp__PMP0__PMcfg1_idx__shift 0x04
#define MA_core__pmc__otp__PMP0__PMcfg1_idx__reset 0x00
#define MA_core__pmc__otp__PMP0__PMcfg1_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__PMcfg1_idx(o,y) ({ uint8_t __ret = o.read(108); o.write(108,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP0__PMcfg1_idx(y) ({ uint8_t __ret = ma_read_byte(108); ma_write_byte(108,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP0__PMcfg1_idx(o) (o.read(108) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP0__PMcfg1_idx() ( ma_read_byte(108) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP0__PMcfg2_idx---
// 4b. PowerMode 2 settings pointer.
#define MA_core__pmc__otp__PMP0__PMcfg2_idx__a 0x006d
#define MA_core__pmc__otp__PMP0__PMcfg2_idx__len 4
#define MA_core__pmc__otp__PMP0__PMcfg2_idx__mask 0x0f
#define MA_core__pmc__otp__PMP0__PMcfg2_idx__shift 0x00
#define MA_core__pmc__otp__PMP0__PMcfg2_idx__reset 0x01
#define MA_core__pmc__otp__PMP0__PMcfg2_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__PMcfg2_idx(o,y) ({ uint8_t __ret = o.read(109); o.write(109,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP0__PMcfg2_idx(y) ({ uint8_t __ret = ma_read_byte(109); ma_write_byte(109,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP0__PMcfg2_idx(o) (o.read(109) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP0__PMcfg2_idx() ( ma_read_byte(109) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP0__PMcfg3_idx---
// 4b. PowerMode 3 settings pointer.
#define MA_core__pmc__otp__PMP0__PMcfg3_idx__a 0x006d
#define MA_core__pmc__otp__PMP0__PMcfg3_idx__len 4
#define MA_core__pmc__otp__PMP0__PMcfg3_idx__mask 0xf0
#define MA_core__pmc__otp__PMP0__PMcfg3_idx__shift 0x04
#define MA_core__pmc__otp__PMP0__PMcfg3_idx__reset 0x02
#define MA_core__pmc__otp__PMP0__PMcfg3_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__PMcfg3_idx(o,y) ({ uint8_t __ret = o.read(109); o.write(109,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP0__PMcfg3_idx(y) ({ uint8_t __ret = ma_read_byte(109); ma_write_byte(109,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP0__PMcfg3_idx(o) (o.read(109) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP0__PMcfg3_idx() ( ma_read_byte(109) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP0__PMcfg_lowPvdd_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 5)
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx__a 0x006e
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx__len 2
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx__mask 0x03
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx__shift 0x00
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx__reset 0x00
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx(o,y) ({ uint8_t __ret = o.read(110); o.write(110,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx(y) ({ uint8_t __ret = ma_read_byte(110); ma_write_byte(110,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx(o) (o.read(110) & 0x03)>>0
#define get_MA_core__pmc__otp__PMP0__PMcfg_lowPvdd_idx() ( ma_read_byte(110) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP0__PMcfg_lowPvddT_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 6)
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx__a 0x006e
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx__len 2
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx__mask 0x0c
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx__shift 0x02
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx__reset 0x00
#define MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx(o,y) ({ uint8_t __ret = o.read(110); o.write(110,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx(y) ({ uint8_t __ret = ma_read_byte(110); ma_write_byte(110,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx(o) (o.read(110) & 0x0c)>>2
#define get_MA_core__pmc__otp__PMP0__PMcfg_lowPvddT_idx() ( ma_read_byte(110) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__otp__PMP0__PM_max---
// 2b.  Max. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP0__PM_max__a 0x006e
#define MA_core__pmc__otp__PMP0__PM_max__len 2
#define MA_core__pmc__otp__PMP0__PM_max__mask 0x30
#define MA_core__pmc__otp__PMP0__PM_max__shift 0x04
#define MA_core__pmc__otp__PMP0__PM_max__reset 0x03
#define MA_core__pmc__otp__PMP0__PM_max__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__PM_max(o,y) ({ uint8_t __ret = o.read(110); o.write(110,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__otp__PMP0__PM_max(y) ({ uint8_t __ret = ma_read_byte(110); ma_write_byte(110,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__otp__PMP0__PM_max(o) (o.read(110) & 0x30)>>4
#define get_MA_core__pmc__otp__PMP0__PM_max() ( ma_read_byte(110) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP0__PM_min---
// 2b.  Min. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP0__PM_min__a 0x006e
#define MA_core__pmc__otp__PMP0__PM_min__len 2
#define MA_core__pmc__otp__PMP0__PM_min__mask 0xc0
#define MA_core__pmc__otp__PMP0__PM_min__shift 0x06
#define MA_core__pmc__otp__PMP0__PM_min__reset 0x01
#define MA_core__pmc__otp__PMP0__PM_min__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__PM_min(o,y) ({ uint8_t __ret = o.read(110); o.write(110,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__otp__PMP0__PM_min(y) ({ uint8_t __ret = ma_read_byte(110); ma_write_byte(110,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__otp__PMP0__PM_min(o) (o.read(110) & 0xc0)>>6
#define get_MA_core__pmc__otp__PMP0__PM_min() ( ma_read_byte(110) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__PMP0__lf_int1_rscale_low---
// 1b. Resistance/impedance level of DAC-LF interface. 1 => low-noise.
#define MA_core__pmc__otp__PMP0__lf_int1_rscale_low__a 0x006f
#define MA_core__pmc__otp__PMP0__lf_int1_rscale_low__len 1
#define MA_core__pmc__otp__PMP0__lf_int1_rscale_low__mask 0x01
#define MA_core__pmc__otp__PMP0__lf_int1_rscale_low__shift 0x00
#define MA_core__pmc__otp__PMP0__lf_int1_rscale_low__reset 0x00
#define MA_core__pmc__otp__PMP0__lf_int1_rscale_low__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__lf_int1_rscale_low(o,y) ({ uint8_t __ret = o.read(111); o.write(111,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__otp__PMP0__lf_int1_rscale_low(y) ({ uint8_t __ret = ma_read_byte(111); ma_write_byte(111,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__otp__PMP0__lf_int1_rscale_low(o) (o.read(111) & 0x01)>>0
#define get_MA_core__pmc__otp__PMP0__lf_int1_rscale_low() ( ma_read_byte(111) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP0__lf_bias_scale---
// 2b. Loop filter bias setting; 0 => low-bias, 1 => mid-bias, 2,3 => high-bias (low-noise)
#define MA_core__pmc__otp__PMP0__lf_bias_scale__a 0x006f
#define MA_core__pmc__otp__PMP0__lf_bias_scale__len 2
#define MA_core__pmc__otp__PMP0__lf_bias_scale__mask 0x06
#define MA_core__pmc__otp__PMP0__lf_bias_scale__shift 0x01
#define MA_core__pmc__otp__PMP0__lf_bias_scale__reset 0x00
#define MA_core__pmc__otp__PMP0__lf_bias_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__lf_bias_scale(o,y) ({ uint8_t __ret = o.read(111); o.write(111,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__pmc__otp__PMP0__lf_bias_scale(y) ({ uint8_t __ret = ma_read_byte(111); ma_write_byte(111,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__pmc__otp__PMP0__lf_bias_scale(o) (o.read(111) & 0x06)>>1
#define get_MA_core__pmc__otp__PMP0__lf_bias_scale() ( ma_read_byte(111) & 0x06)>>1
//------------------------------------------------------------------------------core__pmc__otp__PMP0__lf_int3_c_scale---
// 2b. Loop filter integrator 3 time constant tuning handle. "00" => fast (least stable), "11" => normal/slow.
#define MA_core__pmc__otp__PMP0__lf_int3_c_scale__a 0x006f
#define MA_core__pmc__otp__PMP0__lf_int3_c_scale__len 2
#define MA_core__pmc__otp__PMP0__lf_int3_c_scale__mask 0x18
#define MA_core__pmc__otp__PMP0__lf_int3_c_scale__shift 0x03
#define MA_core__pmc__otp__PMP0__lf_int3_c_scale__reset 0x03
#define MA_core__pmc__otp__PMP0__lf_int3_c_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__lf_int3_c_scale(o,y) ({ uint8_t __ret = o.read(111); o.write(111,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__pmc__otp__PMP0__lf_int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(111); ma_write_byte(111,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__pmc__otp__PMP0__lf_int3_c_scale(o) (o.read(111) & 0x18)>>3
#define get_MA_core__pmc__otp__PMP0__lf_int3_c_scale() ( ma_read_byte(111) & 0x18)>>3
//------------------------------------------------------------------------------core__pmc__otp__PMP0__lf_gain_fwd---
// 3b. Loop filter forward gain setting. "100" = nominal/middle.
#define MA_core__pmc__otp__PMP0__lf_gain_fwd__a 0x006f
#define MA_core__pmc__otp__PMP0__lf_gain_fwd__len 3
#define MA_core__pmc__otp__PMP0__lf_gain_fwd__mask 0xe0
#define MA_core__pmc__otp__PMP0__lf_gain_fwd__shift 0x05
#define MA_core__pmc__otp__PMP0__lf_gain_fwd__reset 0x04
#define MA_core__pmc__otp__PMP0__lf_gain_fwd__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__lf_gain_fwd(o,y) ({ uint8_t __ret = o.read(111); o.write(111,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__otp__PMP0__lf_gain_fwd(y) ({ uint8_t __ret = ma_read_byte(111); ma_write_byte(111,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__otp__PMP0__lf_gain_fwd(o) (o.read(111) & 0xe0)>>5
#define get_MA_core__pmc__otp__PMP0__lf_gain_fwd() ( ma_read_byte(111) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__otp__PMP1__PMcfg0_idx---
// 4b. PowerMode 0 settings pointer.
#define MA_core__pmc__otp__PMP1__PMcfg0_idx__a 0x0071
#define MA_core__pmc__otp__PMP1__PMcfg0_idx__len 4
#define MA_core__pmc__otp__PMP1__PMcfg0_idx__mask 0x0f
#define MA_core__pmc__otp__PMP1__PMcfg0_idx__shift 0x00
#define MA_core__pmc__otp__PMP1__PMcfg0_idx__reset 0x00
#define MA_core__pmc__otp__PMP1__PMcfg0_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__PMcfg0_idx(o,y) ({ uint8_t __ret = o.read(113); o.write(113,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP1__PMcfg0_idx(y) ({ uint8_t __ret = ma_read_byte(113); ma_write_byte(113,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP1__PMcfg0_idx(o) (o.read(113) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP1__PMcfg0_idx() ( ma_read_byte(113) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP1__PMcfg1_idx---
// 4b. PowerMode 1 settings pointer.
#define MA_core__pmc__otp__PMP1__PMcfg1_idx__a 0x0071
#define MA_core__pmc__otp__PMP1__PMcfg1_idx__len 4
#define MA_core__pmc__otp__PMP1__PMcfg1_idx__mask 0xf0
#define MA_core__pmc__otp__PMP1__PMcfg1_idx__shift 0x04
#define MA_core__pmc__otp__PMP1__PMcfg1_idx__reset 0x00
#define MA_core__pmc__otp__PMP1__PMcfg1_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__PMcfg1_idx(o,y) ({ uint8_t __ret = o.read(113); o.write(113,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP1__PMcfg1_idx(y) ({ uint8_t __ret = ma_read_byte(113); ma_write_byte(113,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP1__PMcfg1_idx(o) (o.read(113) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP1__PMcfg1_idx() ( ma_read_byte(113) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP1__PMcfg2_idx---
// 4b. PowerMode 2 settings pointer.
#define MA_core__pmc__otp__PMP1__PMcfg2_idx__a 0x0072
#define MA_core__pmc__otp__PMP1__PMcfg2_idx__len 4
#define MA_core__pmc__otp__PMP1__PMcfg2_idx__mask 0x0f
#define MA_core__pmc__otp__PMP1__PMcfg2_idx__shift 0x00
#define MA_core__pmc__otp__PMP1__PMcfg2_idx__reset 0x01
#define MA_core__pmc__otp__PMP1__PMcfg2_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__PMcfg2_idx(o,y) ({ uint8_t __ret = o.read(114); o.write(114,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP1__PMcfg2_idx(y) ({ uint8_t __ret = ma_read_byte(114); ma_write_byte(114,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP1__PMcfg2_idx(o) (o.read(114) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP1__PMcfg2_idx() ( ma_read_byte(114) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP1__PMcfg3_idx---
// 4b. PowerMode 3 settings pointer.
#define MA_core__pmc__otp__PMP1__PMcfg3_idx__a 0x0072
#define MA_core__pmc__otp__PMP1__PMcfg3_idx__len 4
#define MA_core__pmc__otp__PMP1__PMcfg3_idx__mask 0xf0
#define MA_core__pmc__otp__PMP1__PMcfg3_idx__shift 0x04
#define MA_core__pmc__otp__PMP1__PMcfg3_idx__reset 0x03
#define MA_core__pmc__otp__PMP1__PMcfg3_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__PMcfg3_idx(o,y) ({ uint8_t __ret = o.read(114); o.write(114,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP1__PMcfg3_idx(y) ({ uint8_t __ret = ma_read_byte(114); ma_write_byte(114,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP1__PMcfg3_idx(o) (o.read(114) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP1__PMcfg3_idx() ( ma_read_byte(114) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP1__PMcfg_lowPvdd_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 5)
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx__a 0x0073
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx__len 2
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx__mask 0x03
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx__shift 0x00
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx__reset 0x00
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx(o,y) ({ uint8_t __ret = o.read(115); o.write(115,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx(y) ({ uint8_t __ret = ma_read_byte(115); ma_write_byte(115,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx(o) (o.read(115) & 0x03)>>0
#define get_MA_core__pmc__otp__PMP1__PMcfg_lowPvdd_idx() ( ma_read_byte(115) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP1__PMcfg_lowPvddT_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 6)
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx__a 0x0073
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx__len 2
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx__mask 0x0c
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx__shift 0x02
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx__reset 0x00
#define MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx(o,y) ({ uint8_t __ret = o.read(115); o.write(115,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx(y) ({ uint8_t __ret = ma_read_byte(115); ma_write_byte(115,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx(o) (o.read(115) & 0x0c)>>2
#define get_MA_core__pmc__otp__PMP1__PMcfg_lowPvddT_idx() ( ma_read_byte(115) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__otp__PMP1__PM_max---
// 2b.  Max. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP1__PM_max__a 0x0073
#define MA_core__pmc__otp__PMP1__PM_max__len 2
#define MA_core__pmc__otp__PMP1__PM_max__mask 0x30
#define MA_core__pmc__otp__PMP1__PM_max__shift 0x04
#define MA_core__pmc__otp__PMP1__PM_max__reset 0x03
#define MA_core__pmc__otp__PMP1__PM_max__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__PM_max(o,y) ({ uint8_t __ret = o.read(115); o.write(115,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__otp__PMP1__PM_max(y) ({ uint8_t __ret = ma_read_byte(115); ma_write_byte(115,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__otp__PMP1__PM_max(o) (o.read(115) & 0x30)>>4
#define get_MA_core__pmc__otp__PMP1__PM_max() ( ma_read_byte(115) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP1__PM_min---
// 2b.  Min. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP1__PM_min__a 0x0073
#define MA_core__pmc__otp__PMP1__PM_min__len 2
#define MA_core__pmc__otp__PMP1__PM_min__mask 0xc0
#define MA_core__pmc__otp__PMP1__PM_min__shift 0x06
#define MA_core__pmc__otp__PMP1__PM_min__reset 0x01
#define MA_core__pmc__otp__PMP1__PM_min__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__PM_min(o,y) ({ uint8_t __ret = o.read(115); o.write(115,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__otp__PMP1__PM_min(y) ({ uint8_t __ret = ma_read_byte(115); ma_write_byte(115,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__otp__PMP1__PM_min(o) (o.read(115) & 0xc0)>>6
#define get_MA_core__pmc__otp__PMP1__PM_min() ( ma_read_byte(115) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__PMP1__lf_int1_rscale_low---
// 1b. Resistance/impedance level of DAC-LF interface. 1 => low-noise.
#define MA_core__pmc__otp__PMP1__lf_int1_rscale_low__a 0x0074
#define MA_core__pmc__otp__PMP1__lf_int1_rscale_low__len 1
#define MA_core__pmc__otp__PMP1__lf_int1_rscale_low__mask 0x01
#define MA_core__pmc__otp__PMP1__lf_int1_rscale_low__shift 0x00
#define MA_core__pmc__otp__PMP1__lf_int1_rscale_low__reset 0x00
#define MA_core__pmc__otp__PMP1__lf_int1_rscale_low__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__lf_int1_rscale_low(o,y) ({ uint8_t __ret = o.read(116); o.write(116,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__otp__PMP1__lf_int1_rscale_low(y) ({ uint8_t __ret = ma_read_byte(116); ma_write_byte(116,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__otp__PMP1__lf_int1_rscale_low(o) (o.read(116) & 0x01)>>0
#define get_MA_core__pmc__otp__PMP1__lf_int1_rscale_low() ( ma_read_byte(116) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP1__lf_bias_scale---
// 2b. Loop filter bias setting; 0 => low-bias, 1 => mid-bias, 2,3 => high-bias (low-noise)
#define MA_core__pmc__otp__PMP1__lf_bias_scale__a 0x0074
#define MA_core__pmc__otp__PMP1__lf_bias_scale__len 2
#define MA_core__pmc__otp__PMP1__lf_bias_scale__mask 0x06
#define MA_core__pmc__otp__PMP1__lf_bias_scale__shift 0x01
#define MA_core__pmc__otp__PMP1__lf_bias_scale__reset 0x00
#define MA_core__pmc__otp__PMP1__lf_bias_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__lf_bias_scale(o,y) ({ uint8_t __ret = o.read(116); o.write(116,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__pmc__otp__PMP1__lf_bias_scale(y) ({ uint8_t __ret = ma_read_byte(116); ma_write_byte(116,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__pmc__otp__PMP1__lf_bias_scale(o) (o.read(116) & 0x06)>>1
#define get_MA_core__pmc__otp__PMP1__lf_bias_scale() ( ma_read_byte(116) & 0x06)>>1
//------------------------------------------------------------------------------core__pmc__otp__PMP1__lf_int3_c_scale---
// 2b. Loop filter integrator 3 time constant tuning handle. "00" => fast (least stable), "11" => normal/slow.
#define MA_core__pmc__otp__PMP1__lf_int3_c_scale__a 0x0074
#define MA_core__pmc__otp__PMP1__lf_int3_c_scale__len 2
#define MA_core__pmc__otp__PMP1__lf_int3_c_scale__mask 0x18
#define MA_core__pmc__otp__PMP1__lf_int3_c_scale__shift 0x03
#define MA_core__pmc__otp__PMP1__lf_int3_c_scale__reset 0x03
#define MA_core__pmc__otp__PMP1__lf_int3_c_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__lf_int3_c_scale(o,y) ({ uint8_t __ret = o.read(116); o.write(116,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__pmc__otp__PMP1__lf_int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(116); ma_write_byte(116,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__pmc__otp__PMP1__lf_int3_c_scale(o) (o.read(116) & 0x18)>>3
#define get_MA_core__pmc__otp__PMP1__lf_int3_c_scale() ( ma_read_byte(116) & 0x18)>>3
//------------------------------------------------------------------------------core__pmc__otp__PMP1__lf_gain_fwd---
// 3b. Loop filter forward gain setting. "100" = nominal/middle.
#define MA_core__pmc__otp__PMP1__lf_gain_fwd__a 0x0074
#define MA_core__pmc__otp__PMP1__lf_gain_fwd__len 3
#define MA_core__pmc__otp__PMP1__lf_gain_fwd__mask 0xe0
#define MA_core__pmc__otp__PMP1__lf_gain_fwd__shift 0x05
#define MA_core__pmc__otp__PMP1__lf_gain_fwd__reset 0x04
#define MA_core__pmc__otp__PMP1__lf_gain_fwd__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__lf_gain_fwd(o,y) ({ uint8_t __ret = o.read(116); o.write(116,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__otp__PMP1__lf_gain_fwd(y) ({ uint8_t __ret = ma_read_byte(116); ma_write_byte(116,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__otp__PMP1__lf_gain_fwd(o) (o.read(116) & 0xe0)>>5
#define get_MA_core__pmc__otp__PMP1__lf_gain_fwd() ( ma_read_byte(116) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__otp__PMP2__PMcfg0_idx---
// 4b. PowerMode 0 settings pointer.
#define MA_core__pmc__otp__PMP2__PMcfg0_idx__a 0x0076
#define MA_core__pmc__otp__PMP2__PMcfg0_idx__len 4
#define MA_core__pmc__otp__PMP2__PMcfg0_idx__mask 0x0f
#define MA_core__pmc__otp__PMP2__PMcfg0_idx__shift 0x00
#define MA_core__pmc__otp__PMP2__PMcfg0_idx__reset 0x04
#define MA_core__pmc__otp__PMP2__PMcfg0_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__PMcfg0_idx(o,y) ({ uint8_t __ret = o.read(118); o.write(118,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP2__PMcfg0_idx(y) ({ uint8_t __ret = ma_read_byte(118); ma_write_byte(118,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP2__PMcfg0_idx(o) (o.read(118) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP2__PMcfg0_idx() ( ma_read_byte(118) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP2__PMcfg1_idx---
// 4b. PowerMode 1 settings pointer.
#define MA_core__pmc__otp__PMP2__PMcfg1_idx__a 0x0076
#define MA_core__pmc__otp__PMP2__PMcfg1_idx__len 4
#define MA_core__pmc__otp__PMP2__PMcfg1_idx__mask 0xf0
#define MA_core__pmc__otp__PMP2__PMcfg1_idx__shift 0x04
#define MA_core__pmc__otp__PMP2__PMcfg1_idx__reset 0x04
#define MA_core__pmc__otp__PMP2__PMcfg1_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__PMcfg1_idx(o,y) ({ uint8_t __ret = o.read(118); o.write(118,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP2__PMcfg1_idx(y) ({ uint8_t __ret = ma_read_byte(118); ma_write_byte(118,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP2__PMcfg1_idx(o) (o.read(118) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP2__PMcfg1_idx() ( ma_read_byte(118) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP2__PMcfg2_idx---
// 4b. PowerMode 2 settings pointer.
#define MA_core__pmc__otp__PMP2__PMcfg2_idx__a 0x0077
#define MA_core__pmc__otp__PMP2__PMcfg2_idx__len 4
#define MA_core__pmc__otp__PMP2__PMcfg2_idx__mask 0x0f
#define MA_core__pmc__otp__PMP2__PMcfg2_idx__shift 0x00
#define MA_core__pmc__otp__PMP2__PMcfg2_idx__reset 0x05
#define MA_core__pmc__otp__PMP2__PMcfg2_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__PMcfg2_idx(o,y) ({ uint8_t __ret = o.read(119); o.write(119,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP2__PMcfg2_idx(y) ({ uint8_t __ret = ma_read_byte(119); ma_write_byte(119,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP2__PMcfg2_idx(o) (o.read(119) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP2__PMcfg2_idx() ( ma_read_byte(119) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP2__PMcfg3_idx---
// 4b. PowerMode 3 settings pointer.
#define MA_core__pmc__otp__PMP2__PMcfg3_idx__a 0x0077
#define MA_core__pmc__otp__PMP2__PMcfg3_idx__len 4
#define MA_core__pmc__otp__PMP2__PMcfg3_idx__mask 0xf0
#define MA_core__pmc__otp__PMP2__PMcfg3_idx__shift 0x04
#define MA_core__pmc__otp__PMP2__PMcfg3_idx__reset 0x06
#define MA_core__pmc__otp__PMP2__PMcfg3_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__PMcfg3_idx(o,y) ({ uint8_t __ret = o.read(119); o.write(119,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP2__PMcfg3_idx(y) ({ uint8_t __ret = ma_read_byte(119); ma_write_byte(119,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP2__PMcfg3_idx(o) (o.read(119) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP2__PMcfg3_idx() ( ma_read_byte(119) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP2__PMcfg_lowPvdd_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 5)
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx__a 0x0078
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx__len 2
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx__mask 0x03
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx__shift 0x00
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx__reset 0x01
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx(o,y) ({ uint8_t __ret = o.read(120); o.write(120,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx(y) ({ uint8_t __ret = ma_read_byte(120); ma_write_byte(120,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx(o) (o.read(120) & 0x03)>>0
#define get_MA_core__pmc__otp__PMP2__PMcfg_lowPvdd_idx() ( ma_read_byte(120) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP2__PMcfg_lowPvddT_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 6)
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx__a 0x0078
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx__len 2
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx__mask 0x0c
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx__shift 0x02
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx__reset 0x01
#define MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx(o,y) ({ uint8_t __ret = o.read(120); o.write(120,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx(y) ({ uint8_t __ret = ma_read_byte(120); ma_write_byte(120,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx(o) (o.read(120) & 0x0c)>>2
#define get_MA_core__pmc__otp__PMP2__PMcfg_lowPvddT_idx() ( ma_read_byte(120) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__otp__PMP2__PM_max---
// 2b.  Max. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP2__PM_max__a 0x0078
#define MA_core__pmc__otp__PMP2__PM_max__len 2
#define MA_core__pmc__otp__PMP2__PM_max__mask 0x30
#define MA_core__pmc__otp__PMP2__PM_max__shift 0x04
#define MA_core__pmc__otp__PMP2__PM_max__reset 0x03
#define MA_core__pmc__otp__PMP2__PM_max__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__PM_max(o,y) ({ uint8_t __ret = o.read(120); o.write(120,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__otp__PMP2__PM_max(y) ({ uint8_t __ret = ma_read_byte(120); ma_write_byte(120,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__otp__PMP2__PM_max(o) (o.read(120) & 0x30)>>4
#define get_MA_core__pmc__otp__PMP2__PM_max() ( ma_read_byte(120) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP2__PM_min---
// 2b.  Min. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP2__PM_min__a 0x0078
#define MA_core__pmc__otp__PMP2__PM_min__len 2
#define MA_core__pmc__otp__PMP2__PM_min__mask 0xc0
#define MA_core__pmc__otp__PMP2__PM_min__shift 0x06
#define MA_core__pmc__otp__PMP2__PM_min__reset 0x01
#define MA_core__pmc__otp__PMP2__PM_min__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__PM_min(o,y) ({ uint8_t __ret = o.read(120); o.write(120,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__otp__PMP2__PM_min(y) ({ uint8_t __ret = ma_read_byte(120); ma_write_byte(120,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__otp__PMP2__PM_min(o) (o.read(120) & 0xc0)>>6
#define get_MA_core__pmc__otp__PMP2__PM_min() ( ma_read_byte(120) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__PMP2__lf_int1_rscale_low---
// 1b. Resistance/impedance level of DAC-LF interface. 1 => low-noise.
#define MA_core__pmc__otp__PMP2__lf_int1_rscale_low__a 0x0079
#define MA_core__pmc__otp__PMP2__lf_int1_rscale_low__len 1
#define MA_core__pmc__otp__PMP2__lf_int1_rscale_low__mask 0x01
#define MA_core__pmc__otp__PMP2__lf_int1_rscale_low__shift 0x00
#define MA_core__pmc__otp__PMP2__lf_int1_rscale_low__reset 0x00
#define MA_core__pmc__otp__PMP2__lf_int1_rscale_low__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__lf_int1_rscale_low(o,y) ({ uint8_t __ret = o.read(121); o.write(121,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__otp__PMP2__lf_int1_rscale_low(y) ({ uint8_t __ret = ma_read_byte(121); ma_write_byte(121,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__otp__PMP2__lf_int1_rscale_low(o) (o.read(121) & 0x01)>>0
#define get_MA_core__pmc__otp__PMP2__lf_int1_rscale_low() ( ma_read_byte(121) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP2__lf_bias_scale---
// 2b. Loop filter bias setting; 0 => low-bias, 1 => mid-bias, 2,3 => high-bias (low-noise)
#define MA_core__pmc__otp__PMP2__lf_bias_scale__a 0x0079
#define MA_core__pmc__otp__PMP2__lf_bias_scale__len 2
#define MA_core__pmc__otp__PMP2__lf_bias_scale__mask 0x06
#define MA_core__pmc__otp__PMP2__lf_bias_scale__shift 0x01
#define MA_core__pmc__otp__PMP2__lf_bias_scale__reset 0x01
#define MA_core__pmc__otp__PMP2__lf_bias_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__lf_bias_scale(o,y) ({ uint8_t __ret = o.read(121); o.write(121,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__pmc__otp__PMP2__lf_bias_scale(y) ({ uint8_t __ret = ma_read_byte(121); ma_write_byte(121,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__pmc__otp__PMP2__lf_bias_scale(o) (o.read(121) & 0x06)>>1
#define get_MA_core__pmc__otp__PMP2__lf_bias_scale() ( ma_read_byte(121) & 0x06)>>1
//------------------------------------------------------------------------------core__pmc__otp__PMP2__lf_int3_c_scale---
// 2b. Loop filter integrator 3 time constant tuning handle. "00" => fast (least stable), "11" => normal/slow.
#define MA_core__pmc__otp__PMP2__lf_int3_c_scale__a 0x0079
#define MA_core__pmc__otp__PMP2__lf_int3_c_scale__len 2
#define MA_core__pmc__otp__PMP2__lf_int3_c_scale__mask 0x18
#define MA_core__pmc__otp__PMP2__lf_int3_c_scale__shift 0x03
#define MA_core__pmc__otp__PMP2__lf_int3_c_scale__reset 0x03
#define MA_core__pmc__otp__PMP2__lf_int3_c_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__lf_int3_c_scale(o,y) ({ uint8_t __ret = o.read(121); o.write(121,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__pmc__otp__PMP2__lf_int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(121); ma_write_byte(121,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__pmc__otp__PMP2__lf_int3_c_scale(o) (o.read(121) & 0x18)>>3
#define get_MA_core__pmc__otp__PMP2__lf_int3_c_scale() ( ma_read_byte(121) & 0x18)>>3
//------------------------------------------------------------------------------core__pmc__otp__PMP2__lf_gain_fwd---
// 3b. Loop filter forward gain setting. "100" = nominal/middle.
#define MA_core__pmc__otp__PMP2__lf_gain_fwd__a 0x0079
#define MA_core__pmc__otp__PMP2__lf_gain_fwd__len 3
#define MA_core__pmc__otp__PMP2__lf_gain_fwd__mask 0xe0
#define MA_core__pmc__otp__PMP2__lf_gain_fwd__shift 0x05
#define MA_core__pmc__otp__PMP2__lf_gain_fwd__reset 0x04
#define MA_core__pmc__otp__PMP2__lf_gain_fwd__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__lf_gain_fwd(o,y) ({ uint8_t __ret = o.read(121); o.write(121,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__otp__PMP2__lf_gain_fwd(y) ({ uint8_t __ret = ma_read_byte(121); ma_write_byte(121,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__otp__PMP2__lf_gain_fwd(o) (o.read(121) & 0xe0)>>5
#define get_MA_core__pmc__otp__PMP2__lf_gain_fwd() ( ma_read_byte(121) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__otp__PMP3__PMcfg0_idx---
// 4b. PowerMode 0 settings pointer.
#define MA_core__pmc__otp__PMP3__PMcfg0_idx__a 0x007b
#define MA_core__pmc__otp__PMP3__PMcfg0_idx__len 4
#define MA_core__pmc__otp__PMP3__PMcfg0_idx__mask 0x0f
#define MA_core__pmc__otp__PMP3__PMcfg0_idx__shift 0x00
#define MA_core__pmc__otp__PMP3__PMcfg0_idx__reset 0x04
#define MA_core__pmc__otp__PMP3__PMcfg0_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__PMcfg0_idx(o,y) ({ uint8_t __ret = o.read(123); o.write(123,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP3__PMcfg0_idx(y) ({ uint8_t __ret = ma_read_byte(123); ma_write_byte(123,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP3__PMcfg0_idx(o) (o.read(123) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP3__PMcfg0_idx() ( ma_read_byte(123) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP3__PMcfg1_idx---
// 4b. PowerMode 1 settings pointer.
#define MA_core__pmc__otp__PMP3__PMcfg1_idx__a 0x007b
#define MA_core__pmc__otp__PMP3__PMcfg1_idx__len 4
#define MA_core__pmc__otp__PMP3__PMcfg1_idx__mask 0xf0
#define MA_core__pmc__otp__PMP3__PMcfg1_idx__shift 0x04
#define MA_core__pmc__otp__PMP3__PMcfg1_idx__reset 0x04
#define MA_core__pmc__otp__PMP3__PMcfg1_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__PMcfg1_idx(o,y) ({ uint8_t __ret = o.read(123); o.write(123,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP3__PMcfg1_idx(y) ({ uint8_t __ret = ma_read_byte(123); ma_write_byte(123,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP3__PMcfg1_idx(o) (o.read(123) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP3__PMcfg1_idx() ( ma_read_byte(123) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP3__PMcfg2_idx---
// 4b. PowerMode 2 settings pointer.
#define MA_core__pmc__otp__PMP3__PMcfg2_idx__a 0x007c
#define MA_core__pmc__otp__PMP3__PMcfg2_idx__len 4
#define MA_core__pmc__otp__PMP3__PMcfg2_idx__mask 0x0f
#define MA_core__pmc__otp__PMP3__PMcfg2_idx__shift 0x00
#define MA_core__pmc__otp__PMP3__PMcfg2_idx__reset 0x05
#define MA_core__pmc__otp__PMP3__PMcfg2_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__PMcfg2_idx(o,y) ({ uint8_t __ret = o.read(124); o.write(124,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP3__PMcfg2_idx(y) ({ uint8_t __ret = ma_read_byte(124); ma_write_byte(124,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP3__PMcfg2_idx(o) (o.read(124) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP3__PMcfg2_idx() ( ma_read_byte(124) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP3__PMcfg3_idx---
// 4b. PowerMode 3 settings pointer.
#define MA_core__pmc__otp__PMP3__PMcfg3_idx__a 0x007c
#define MA_core__pmc__otp__PMP3__PMcfg3_idx__len 4
#define MA_core__pmc__otp__PMP3__PMcfg3_idx__mask 0xf0
#define MA_core__pmc__otp__PMP3__PMcfg3_idx__shift 0x04
#define MA_core__pmc__otp__PMP3__PMcfg3_idx__reset 0x07
#define MA_core__pmc__otp__PMP3__PMcfg3_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__PMcfg3_idx(o,y) ({ uint8_t __ret = o.read(124); o.write(124,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP3__PMcfg3_idx(y) ({ uint8_t __ret = ma_read_byte(124); ma_write_byte(124,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP3__PMcfg3_idx(o) (o.read(124) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP3__PMcfg3_idx() ( ma_read_byte(124) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP3__PMcfg_lowPvdd_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 5)
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx__a 0x007d
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx__len 2
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx__mask 0x03
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx__shift 0x00
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx__reset 0x01
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx(o,y) ({ uint8_t __ret = o.read(125); o.write(125,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx(y) ({ uint8_t __ret = ma_read_byte(125); ma_write_byte(125,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx(o) (o.read(125) & 0x03)>>0
#define get_MA_core__pmc__otp__PMP3__PMcfg_lowPvdd_idx() ( ma_read_byte(125) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP3__PMcfg_lowPvddT_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 6)
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx__a 0x007d
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx__len 2
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx__mask 0x0c
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx__shift 0x02
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx__reset 0x01
#define MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx(o,y) ({ uint8_t __ret = o.read(125); o.write(125,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx(y) ({ uint8_t __ret = ma_read_byte(125); ma_write_byte(125,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx(o) (o.read(125) & 0x0c)>>2
#define get_MA_core__pmc__otp__PMP3__PMcfg_lowPvddT_idx() ( ma_read_byte(125) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__otp__PMP3__PM_max---
// 2b.  Max. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP3__PM_max__a 0x007d
#define MA_core__pmc__otp__PMP3__PM_max__len 2
#define MA_core__pmc__otp__PMP3__PM_max__mask 0x30
#define MA_core__pmc__otp__PMP3__PM_max__shift 0x04
#define MA_core__pmc__otp__PMP3__PM_max__reset 0x03
#define MA_core__pmc__otp__PMP3__PM_max__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__PM_max(o,y) ({ uint8_t __ret = o.read(125); o.write(125,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__otp__PMP3__PM_max(y) ({ uint8_t __ret = ma_read_byte(125); ma_write_byte(125,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__otp__PMP3__PM_max(o) (o.read(125) & 0x30)>>4
#define get_MA_core__pmc__otp__PMP3__PM_max() ( ma_read_byte(125) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP3__PM_min---
// 2b.  Min. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP3__PM_min__a 0x007d
#define MA_core__pmc__otp__PMP3__PM_min__len 2
#define MA_core__pmc__otp__PMP3__PM_min__mask 0xc0
#define MA_core__pmc__otp__PMP3__PM_min__shift 0x06
#define MA_core__pmc__otp__PMP3__PM_min__reset 0x01
#define MA_core__pmc__otp__PMP3__PM_min__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__PM_min(o,y) ({ uint8_t __ret = o.read(125); o.write(125,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__otp__PMP3__PM_min(y) ({ uint8_t __ret = ma_read_byte(125); ma_write_byte(125,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__otp__PMP3__PM_min(o) (o.read(125) & 0xc0)>>6
#define get_MA_core__pmc__otp__PMP3__PM_min() ( ma_read_byte(125) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__PMP3__lf_int1_rscale_low---
// 1b. Resistance/impedance level of DAC-LF interface. 1 => low-noise.
#define MA_core__pmc__otp__PMP3__lf_int1_rscale_low__a 0x007e
#define MA_core__pmc__otp__PMP3__lf_int1_rscale_low__len 1
#define MA_core__pmc__otp__PMP3__lf_int1_rscale_low__mask 0x01
#define MA_core__pmc__otp__PMP3__lf_int1_rscale_low__shift 0x00
#define MA_core__pmc__otp__PMP3__lf_int1_rscale_low__reset 0x00
#define MA_core__pmc__otp__PMP3__lf_int1_rscale_low__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__lf_int1_rscale_low(o,y) ({ uint8_t __ret = o.read(126); o.write(126,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__otp__PMP3__lf_int1_rscale_low(y) ({ uint8_t __ret = ma_read_byte(126); ma_write_byte(126,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__otp__PMP3__lf_int1_rscale_low(o) (o.read(126) & 0x01)>>0
#define get_MA_core__pmc__otp__PMP3__lf_int1_rscale_low() ( ma_read_byte(126) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP3__lf_bias_scale---
// 2b. Loop filter bias setting; 0 => low-bias, 1 => mid-bias, 2,3 => high-bias (low-noise)
#define MA_core__pmc__otp__PMP3__lf_bias_scale__a 0x007e
#define MA_core__pmc__otp__PMP3__lf_bias_scale__len 2
#define MA_core__pmc__otp__PMP3__lf_bias_scale__mask 0x06
#define MA_core__pmc__otp__PMP3__lf_bias_scale__shift 0x01
#define MA_core__pmc__otp__PMP3__lf_bias_scale__reset 0x01
#define MA_core__pmc__otp__PMP3__lf_bias_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__lf_bias_scale(o,y) ({ uint8_t __ret = o.read(126); o.write(126,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__pmc__otp__PMP3__lf_bias_scale(y) ({ uint8_t __ret = ma_read_byte(126); ma_write_byte(126,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__pmc__otp__PMP3__lf_bias_scale(o) (o.read(126) & 0x06)>>1
#define get_MA_core__pmc__otp__PMP3__lf_bias_scale() ( ma_read_byte(126) & 0x06)>>1
//------------------------------------------------------------------------------core__pmc__otp__PMP3__lf_int3_c_scale---
// 2b. Loop filter integrator 3 time constant tuning handle. "00" => fast (least stable), "11" => normal/slow.
#define MA_core__pmc__otp__PMP3__lf_int3_c_scale__a 0x007e
#define MA_core__pmc__otp__PMP3__lf_int3_c_scale__len 2
#define MA_core__pmc__otp__PMP3__lf_int3_c_scale__mask 0x18
#define MA_core__pmc__otp__PMP3__lf_int3_c_scale__shift 0x03
#define MA_core__pmc__otp__PMP3__lf_int3_c_scale__reset 0x03
#define MA_core__pmc__otp__PMP3__lf_int3_c_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__lf_int3_c_scale(o,y) ({ uint8_t __ret = o.read(126); o.write(126,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__pmc__otp__PMP3__lf_int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(126); ma_write_byte(126,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__pmc__otp__PMP3__lf_int3_c_scale(o) (o.read(126) & 0x18)>>3
#define get_MA_core__pmc__otp__PMP3__lf_int3_c_scale() ( ma_read_byte(126) & 0x18)>>3
//------------------------------------------------------------------------------core__pmc__otp__PMP3__lf_gain_fwd---
// 3b. Loop filter forward gain setting. "100" = nominal/middle.
#define MA_core__pmc__otp__PMP3__lf_gain_fwd__a 0x007e
#define MA_core__pmc__otp__PMP3__lf_gain_fwd__len 3
#define MA_core__pmc__otp__PMP3__lf_gain_fwd__mask 0xe0
#define MA_core__pmc__otp__PMP3__lf_gain_fwd__shift 0x05
#define MA_core__pmc__otp__PMP3__lf_gain_fwd__reset 0x04
#define MA_core__pmc__otp__PMP3__lf_gain_fwd__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__lf_gain_fwd(o,y) ({ uint8_t __ret = o.read(126); o.write(126,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__otp__PMP3__lf_gain_fwd(y) ({ uint8_t __ret = ma_read_byte(126); ma_write_byte(126,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__otp__PMP3__lf_gain_fwd(o) (o.read(126) & 0xe0)>>5
#define get_MA_core__pmc__otp__PMP3__lf_gain_fwd() ( ma_read_byte(126) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__otp__PMP4__PMcfg0_idx---
// 4b. PowerMode 0 settings pointer.
#define MA_core__pmc__otp__PMP4__PMcfg0_idx__a 0x0080
#define MA_core__pmc__otp__PMP4__PMcfg0_idx__len 4
#define MA_core__pmc__otp__PMP4__PMcfg0_idx__mask 0x0f
#define MA_core__pmc__otp__PMP4__PMcfg0_idx__shift 0x00
#define MA_core__pmc__otp__PMP4__PMcfg0_idx__reset 0x08
#define MA_core__pmc__otp__PMP4__PMcfg0_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__PMcfg0_idx(o,y) ({ uint8_t __ret = o.read(128); o.write(128,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP4__PMcfg0_idx(y) ({ uint8_t __ret = ma_read_byte(128); ma_write_byte(128,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP4__PMcfg0_idx(o) (o.read(128) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP4__PMcfg0_idx() ( ma_read_byte(128) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP4__PMcfg1_idx---
// 4b. PowerMode 1 settings pointer.
#define MA_core__pmc__otp__PMP4__PMcfg1_idx__a 0x0080
#define MA_core__pmc__otp__PMP4__PMcfg1_idx__len 4
#define MA_core__pmc__otp__PMP4__PMcfg1_idx__mask 0xf0
#define MA_core__pmc__otp__PMP4__PMcfg1_idx__shift 0x04
#define MA_core__pmc__otp__PMP4__PMcfg1_idx__reset 0x08
#define MA_core__pmc__otp__PMP4__PMcfg1_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__PMcfg1_idx(o,y) ({ uint8_t __ret = o.read(128); o.write(128,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP4__PMcfg1_idx(y) ({ uint8_t __ret = ma_read_byte(128); ma_write_byte(128,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP4__PMcfg1_idx(o) (o.read(128) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP4__PMcfg1_idx() ( ma_read_byte(128) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP4__PMcfg2_idx---
// 4b. PowerMode 2 settings pointer.
#define MA_core__pmc__otp__PMP4__PMcfg2_idx__a 0x0081
#define MA_core__pmc__otp__PMP4__PMcfg2_idx__len 4
#define MA_core__pmc__otp__PMP4__PMcfg2_idx__mask 0x0f
#define MA_core__pmc__otp__PMP4__PMcfg2_idx__shift 0x00
#define MA_core__pmc__otp__PMP4__PMcfg2_idx__reset 0x09
#define MA_core__pmc__otp__PMP4__PMcfg2_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__PMcfg2_idx(o,y) ({ uint8_t __ret = o.read(129); o.write(129,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP4__PMcfg2_idx(y) ({ uint8_t __ret = ma_read_byte(129); ma_write_byte(129,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP4__PMcfg2_idx(o) (o.read(129) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP4__PMcfg2_idx() ( ma_read_byte(129) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP4__PMcfg3_idx---
// 4b. PowerMode 3 settings pointer.
#define MA_core__pmc__otp__PMP4__PMcfg3_idx__a 0x0081
#define MA_core__pmc__otp__PMP4__PMcfg3_idx__len 4
#define MA_core__pmc__otp__PMP4__PMcfg3_idx__mask 0xf0
#define MA_core__pmc__otp__PMP4__PMcfg3_idx__shift 0x04
#define MA_core__pmc__otp__PMP4__PMcfg3_idx__reset 0x0a
#define MA_core__pmc__otp__PMP4__PMcfg3_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__PMcfg3_idx(o,y) ({ uint8_t __ret = o.read(129); o.write(129,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP4__PMcfg3_idx(y) ({ uint8_t __ret = ma_read_byte(129); ma_write_byte(129,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP4__PMcfg3_idx(o) (o.read(129) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP4__PMcfg3_idx() ( ma_read_byte(129) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP4__PMcfg_lowPvdd_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 5)
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx__a 0x0082
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx__len 2
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx__mask 0x03
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx__shift 0x00
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx__reset 0x02
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx(o,y) ({ uint8_t __ret = o.read(130); o.write(130,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx(y) ({ uint8_t __ret = ma_read_byte(130); ma_write_byte(130,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx(o) (o.read(130) & 0x03)>>0
#define get_MA_core__pmc__otp__PMP4__PMcfg_lowPvdd_idx() ( ma_read_byte(130) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP4__PMcfg_lowPvddT_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 6)
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx__a 0x0082
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx__len 2
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx__mask 0x0c
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx__shift 0x02
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx__reset 0x01
#define MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx(o,y) ({ uint8_t __ret = o.read(130); o.write(130,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx(y) ({ uint8_t __ret = ma_read_byte(130); ma_write_byte(130,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx(o) (o.read(130) & 0x0c)>>2
#define get_MA_core__pmc__otp__PMP4__PMcfg_lowPvddT_idx() ( ma_read_byte(130) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__otp__PMP4__PM_max---
// 2b.  Max. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP4__PM_max__a 0x0082
#define MA_core__pmc__otp__PMP4__PM_max__len 2
#define MA_core__pmc__otp__PMP4__PM_max__mask 0x30
#define MA_core__pmc__otp__PMP4__PM_max__shift 0x04
#define MA_core__pmc__otp__PMP4__PM_max__reset 0x03
#define MA_core__pmc__otp__PMP4__PM_max__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__PM_max(o,y) ({ uint8_t __ret = o.read(130); o.write(130,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__otp__PMP4__PM_max(y) ({ uint8_t __ret = ma_read_byte(130); ma_write_byte(130,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__otp__PMP4__PM_max(o) (o.read(130) & 0x30)>>4
#define get_MA_core__pmc__otp__PMP4__PM_max() ( ma_read_byte(130) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP4__PM_min---
// 2b.  Min. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP4__PM_min__a 0x0082
#define MA_core__pmc__otp__PMP4__PM_min__len 2
#define MA_core__pmc__otp__PMP4__PM_min__mask 0xc0
#define MA_core__pmc__otp__PMP4__PM_min__shift 0x06
#define MA_core__pmc__otp__PMP4__PM_min__reset 0x01
#define MA_core__pmc__otp__PMP4__PM_min__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__PM_min(o,y) ({ uint8_t __ret = o.read(130); o.write(130,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__otp__PMP4__PM_min(y) ({ uint8_t __ret = ma_read_byte(130); ma_write_byte(130,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__otp__PMP4__PM_min(o) (o.read(130) & 0xc0)>>6
#define get_MA_core__pmc__otp__PMP4__PM_min() ( ma_read_byte(130) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__PMP4__lf_int1_rscale_low---
// 1b. Resistance/impedance level of DAC-LF interface. 1 => low-noise.
#define MA_core__pmc__otp__PMP4__lf_int1_rscale_low__a 0x0083
#define MA_core__pmc__otp__PMP4__lf_int1_rscale_low__len 1
#define MA_core__pmc__otp__PMP4__lf_int1_rscale_low__mask 0x01
#define MA_core__pmc__otp__PMP4__lf_int1_rscale_low__shift 0x00
#define MA_core__pmc__otp__PMP4__lf_int1_rscale_low__reset 0x01
#define MA_core__pmc__otp__PMP4__lf_int1_rscale_low__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__lf_int1_rscale_low(o,y) ({ uint8_t __ret = o.read(131); o.write(131,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__otp__PMP4__lf_int1_rscale_low(y) ({ uint8_t __ret = ma_read_byte(131); ma_write_byte(131,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__otp__PMP4__lf_int1_rscale_low(o) (o.read(131) & 0x01)>>0
#define get_MA_core__pmc__otp__PMP4__lf_int1_rscale_low() ( ma_read_byte(131) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP4__lf_bias_scale---
// 2b. Loop filter bias setting; 0 => low-bias, 1 => mid-bias, 2,3 => high-bias (low-noise)
#define MA_core__pmc__otp__PMP4__lf_bias_scale__a 0x0083
#define MA_core__pmc__otp__PMP4__lf_bias_scale__len 2
#define MA_core__pmc__otp__PMP4__lf_bias_scale__mask 0x06
#define MA_core__pmc__otp__PMP4__lf_bias_scale__shift 0x01
#define MA_core__pmc__otp__PMP4__lf_bias_scale__reset 0x01
#define MA_core__pmc__otp__PMP4__lf_bias_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__lf_bias_scale(o,y) ({ uint8_t __ret = o.read(131); o.write(131,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__pmc__otp__PMP4__lf_bias_scale(y) ({ uint8_t __ret = ma_read_byte(131); ma_write_byte(131,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__pmc__otp__PMP4__lf_bias_scale(o) (o.read(131) & 0x06)>>1
#define get_MA_core__pmc__otp__PMP4__lf_bias_scale() ( ma_read_byte(131) & 0x06)>>1
//------------------------------------------------------------------------------core__pmc__otp__PMP4__lf_int3_c_scale---
// 2b. Loop filter integrator 3 time constant tuning handle. "00" => fast (least stable), "11" => normal/slow.
#define MA_core__pmc__otp__PMP4__lf_int3_c_scale__a 0x0083
#define MA_core__pmc__otp__PMP4__lf_int3_c_scale__len 2
#define MA_core__pmc__otp__PMP4__lf_int3_c_scale__mask 0x18
#define MA_core__pmc__otp__PMP4__lf_int3_c_scale__shift 0x03
#define MA_core__pmc__otp__PMP4__lf_int3_c_scale__reset 0x02
#define MA_core__pmc__otp__PMP4__lf_int3_c_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__lf_int3_c_scale(o,y) ({ uint8_t __ret = o.read(131); o.write(131,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__pmc__otp__PMP4__lf_int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(131); ma_write_byte(131,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__pmc__otp__PMP4__lf_int3_c_scale(o) (o.read(131) & 0x18)>>3
#define get_MA_core__pmc__otp__PMP4__lf_int3_c_scale() ( ma_read_byte(131) & 0x18)>>3
//------------------------------------------------------------------------------core__pmc__otp__PMP4__lf_gain_fwd---
// 3b. Loop filter forward gain setting. "100" = nominal/middle.
#define MA_core__pmc__otp__PMP4__lf_gain_fwd__a 0x0083
#define MA_core__pmc__otp__PMP4__lf_gain_fwd__len 3
#define MA_core__pmc__otp__PMP4__lf_gain_fwd__mask 0xe0
#define MA_core__pmc__otp__PMP4__lf_gain_fwd__shift 0x05
#define MA_core__pmc__otp__PMP4__lf_gain_fwd__reset 0x04
#define MA_core__pmc__otp__PMP4__lf_gain_fwd__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__lf_gain_fwd(o,y) ({ uint8_t __ret = o.read(131); o.write(131,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__otp__PMP4__lf_gain_fwd(y) ({ uint8_t __ret = ma_read_byte(131); ma_write_byte(131,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__otp__PMP4__lf_gain_fwd(o) (o.read(131) & 0xe0)>>5
#define get_MA_core__pmc__otp__PMP4__lf_gain_fwd() ( ma_read_byte(131) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__otp__PMP5__PMcfg0_idx---
// 4b. PowerMode 0 settings pointer.
#define MA_core__pmc__otp__PMP5__PMcfg0_idx__a 0x0085
#define MA_core__pmc__otp__PMP5__PMcfg0_idx__len 4
#define MA_core__pmc__otp__PMP5__PMcfg0_idx__mask 0x0f
#define MA_core__pmc__otp__PMP5__PMcfg0_idx__shift 0x00
#define MA_core__pmc__otp__PMP5__PMcfg0_idx__reset 0x08
#define MA_core__pmc__otp__PMP5__PMcfg0_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__PMcfg0_idx(o,y) ({ uint8_t __ret = o.read(133); o.write(133,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP5__PMcfg0_idx(y) ({ uint8_t __ret = ma_read_byte(133); ma_write_byte(133,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP5__PMcfg0_idx(o) (o.read(133) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP5__PMcfg0_idx() ( ma_read_byte(133) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP5__PMcfg1_idx---
// 4b. PowerMode 1 settings pointer.
#define MA_core__pmc__otp__PMP5__PMcfg1_idx__a 0x0085
#define MA_core__pmc__otp__PMP5__PMcfg1_idx__len 4
#define MA_core__pmc__otp__PMP5__PMcfg1_idx__mask 0xf0
#define MA_core__pmc__otp__PMP5__PMcfg1_idx__shift 0x04
#define MA_core__pmc__otp__PMP5__PMcfg1_idx__reset 0x08
#define MA_core__pmc__otp__PMP5__PMcfg1_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__PMcfg1_idx(o,y) ({ uint8_t __ret = o.read(133); o.write(133,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP5__PMcfg1_idx(y) ({ uint8_t __ret = ma_read_byte(133); ma_write_byte(133,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP5__PMcfg1_idx(o) (o.read(133) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP5__PMcfg1_idx() ( ma_read_byte(133) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP5__PMcfg2_idx---
// 4b. PowerMode 2 settings pointer.
#define MA_core__pmc__otp__PMP5__PMcfg2_idx__a 0x0086
#define MA_core__pmc__otp__PMP5__PMcfg2_idx__len 4
#define MA_core__pmc__otp__PMP5__PMcfg2_idx__mask 0x0f
#define MA_core__pmc__otp__PMP5__PMcfg2_idx__shift 0x00
#define MA_core__pmc__otp__PMP5__PMcfg2_idx__reset 0x09
#define MA_core__pmc__otp__PMP5__PMcfg2_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__PMcfg2_idx(o,y) ({ uint8_t __ret = o.read(134); o.write(134,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP5__PMcfg2_idx(y) ({ uint8_t __ret = ma_read_byte(134); ma_write_byte(134,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP5__PMcfg2_idx(o) (o.read(134) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP5__PMcfg2_idx() ( ma_read_byte(134) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP5__PMcfg3_idx---
// 4b. PowerMode 3 settings pointer.
#define MA_core__pmc__otp__PMP5__PMcfg3_idx__a 0x0086
#define MA_core__pmc__otp__PMP5__PMcfg3_idx__len 4
#define MA_core__pmc__otp__PMP5__PMcfg3_idx__mask 0xf0
#define MA_core__pmc__otp__PMP5__PMcfg3_idx__shift 0x04
#define MA_core__pmc__otp__PMP5__PMcfg3_idx__reset 0x07
#define MA_core__pmc__otp__PMP5__PMcfg3_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__PMcfg3_idx(o,y) ({ uint8_t __ret = o.read(134); o.write(134,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__PMP5__PMcfg3_idx(y) ({ uint8_t __ret = ma_read_byte(134); ma_write_byte(134,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__PMP5__PMcfg3_idx(o) (o.read(134) & 0xf0)>>4
#define get_MA_core__pmc__otp__PMP5__PMcfg3_idx() ( ma_read_byte(134) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP5__PMcfg_lowPvdd_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 5)
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx__a 0x0087
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx__len 2
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx__mask 0x03
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx__shift 0x00
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx__reset 0x02
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx(o,y) ({ uint8_t __ret = o.read(135); o.write(135,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx(y) ({ uint8_t __ret = ma_read_byte(135); ma_write_byte(135,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx(o) (o.read(135) & 0x03)>>0
#define get_MA_core__pmc__otp__PMP5__PMcfg_lowPvdd_idx() ( ma_read_byte(135) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP5__PMcfg_lowPvddT_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 6)
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx__a 0x0087
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx__len 2
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx__mask 0x0c
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx__shift 0x02
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx__reset 0x01
#define MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx(o,y) ({ uint8_t __ret = o.read(135); o.write(135,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx(y) ({ uint8_t __ret = ma_read_byte(135); ma_write_byte(135,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx(o) (o.read(135) & 0x0c)>>2
#define get_MA_core__pmc__otp__PMP5__PMcfg_lowPvddT_idx() ( ma_read_byte(135) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__otp__PMP5__PM_max---
// 2b.  Max. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP5__PM_max__a 0x0087
#define MA_core__pmc__otp__PMP5__PM_max__len 2
#define MA_core__pmc__otp__PMP5__PM_max__mask 0x30
#define MA_core__pmc__otp__PMP5__PM_max__shift 0x04
#define MA_core__pmc__otp__PMP5__PM_max__reset 0x03
#define MA_core__pmc__otp__PMP5__PM_max__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__PM_max(o,y) ({ uint8_t __ret = o.read(135); o.write(135,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__otp__PMP5__PM_max(y) ({ uint8_t __ret = ma_read_byte(135); ma_write_byte(135,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__otp__PMP5__PM_max(o) (o.read(135) & 0x30)>>4
#define get_MA_core__pmc__otp__PMP5__PM_max() ( ma_read_byte(135) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__otp__PMP5__PM_min---
// 2b.  Min. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__otp__PMP5__PM_min__a 0x0087
#define MA_core__pmc__otp__PMP5__PM_min__len 2
#define MA_core__pmc__otp__PMP5__PM_min__mask 0xc0
#define MA_core__pmc__otp__PMP5__PM_min__shift 0x06
#define MA_core__pmc__otp__PMP5__PM_min__reset 0x01
#define MA_core__pmc__otp__PMP5__PM_min__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__PM_min(o,y) ({ uint8_t __ret = o.read(135); o.write(135,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__otp__PMP5__PM_min(y) ({ uint8_t __ret = ma_read_byte(135); ma_write_byte(135,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__otp__PMP5__PM_min(o) (o.read(135) & 0xc0)>>6
#define get_MA_core__pmc__otp__PMP5__PM_min() ( ma_read_byte(135) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__PMP5__lf_int1_rscale_low---
// 1b. Resistance/impedance level of DAC-LF interface. 1 => low-noise.
#define MA_core__pmc__otp__PMP5__lf_int1_rscale_low__a 0x0088
#define MA_core__pmc__otp__PMP5__lf_int1_rscale_low__len 1
#define MA_core__pmc__otp__PMP5__lf_int1_rscale_low__mask 0x01
#define MA_core__pmc__otp__PMP5__lf_int1_rscale_low__shift 0x00
#define MA_core__pmc__otp__PMP5__lf_int1_rscale_low__reset 0x01
#define MA_core__pmc__otp__PMP5__lf_int1_rscale_low__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__lf_int1_rscale_low(o,y) ({ uint8_t __ret = o.read(136); o.write(136,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__otp__PMP5__lf_int1_rscale_low(y) ({ uint8_t __ret = ma_read_byte(136); ma_write_byte(136,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__otp__PMP5__lf_int1_rscale_low(o) (o.read(136) & 0x01)>>0
#define get_MA_core__pmc__otp__PMP5__lf_int1_rscale_low() ( ma_read_byte(136) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP5__lf_bias_scale---
// 2b. Loop filter bias setting; 0 => low-bias, 1 => mid-bias, 2,3 => high-bias (low-noise)
#define MA_core__pmc__otp__PMP5__lf_bias_scale__a 0x0088
#define MA_core__pmc__otp__PMP5__lf_bias_scale__len 2
#define MA_core__pmc__otp__PMP5__lf_bias_scale__mask 0x06
#define MA_core__pmc__otp__PMP5__lf_bias_scale__shift 0x01
#define MA_core__pmc__otp__PMP5__lf_bias_scale__reset 0x01
#define MA_core__pmc__otp__PMP5__lf_bias_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__lf_bias_scale(o,y) ({ uint8_t __ret = o.read(136); o.write(136,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__pmc__otp__PMP5__lf_bias_scale(y) ({ uint8_t __ret = ma_read_byte(136); ma_write_byte(136,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__pmc__otp__PMP5__lf_bias_scale(o) (o.read(136) & 0x06)>>1
#define get_MA_core__pmc__otp__PMP5__lf_bias_scale() ( ma_read_byte(136) & 0x06)>>1
//------------------------------------------------------------------------------core__pmc__otp__PMP5__lf_int3_c_scale---
// 2b. Loop filter integrator 3 time constant tuning handle. "00" => fast (least stable), "11" => normal/slow.
#define MA_core__pmc__otp__PMP5__lf_int3_c_scale__a 0x0088
#define MA_core__pmc__otp__PMP5__lf_int3_c_scale__len 2
#define MA_core__pmc__otp__PMP5__lf_int3_c_scale__mask 0x18
#define MA_core__pmc__otp__PMP5__lf_int3_c_scale__shift 0x03
#define MA_core__pmc__otp__PMP5__lf_int3_c_scale__reset 0x02
#define MA_core__pmc__otp__PMP5__lf_int3_c_scale__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__lf_int3_c_scale(o,y) ({ uint8_t __ret = o.read(136); o.write(136,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__pmc__otp__PMP5__lf_int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(136); ma_write_byte(136,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__pmc__otp__PMP5__lf_int3_c_scale(o) (o.read(136) & 0x18)>>3
#define get_MA_core__pmc__otp__PMP5__lf_int3_c_scale() ( ma_read_byte(136) & 0x18)>>3
//------------------------------------------------------------------------------core__pmc__otp__PMP5__lf_gain_fwd---
// 3b. Loop filter forward gain setting. "100" = nominal/middle.
#define MA_core__pmc__otp__PMP5__lf_gain_fwd__a 0x0088
#define MA_core__pmc__otp__PMP5__lf_gain_fwd__len 3
#define MA_core__pmc__otp__PMP5__lf_gain_fwd__mask 0xe0
#define MA_core__pmc__otp__PMP5__lf_gain_fwd__shift 0x05
#define MA_core__pmc__otp__PMP5__lf_gain_fwd__reset 0x04
#define MA_core__pmc__otp__PMP5__lf_gain_fwd__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__lf_gain_fwd(o,y) ({ uint8_t __ret = o.read(136); o.write(136,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__otp__PMP5__lf_gain_fwd(y) ({ uint8_t __ret = ma_read_byte(136); ma_write_byte(136,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__otp__PMP5__lf_gain_fwd(o) (o.read(136) & 0xe0)>>5
#define get_MA_core__pmc__otp__PMP5__lf_gain_fwd() ( ma_read_byte(136) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0---
// PWM iramp setting for each pwmFreqMode.
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0__a 0x008a
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0__len 4
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0__mask 0x0f
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0__shift 0x00
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0__reset 0x07
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0(o,y) ({ uint8_t __ret = o.read(138); o.write(138,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0(y) ({ uint8_t __ret = ma_read_byte(138); ma_write_byte(138,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0(o) (o.read(138) & 0x0f)>>0
#define get_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__0() ( ma_read_byte(138) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1---
// PWM iramp setting for each pwmFreqMode.
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1__a 0x008a
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1__len 4
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1__mask 0xf0
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1__shift 0x04
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1__reset 0x07
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1(o,y) ({ uint8_t __ret = o.read(138); o.write(138,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1(y) ({ uint8_t __ret = ma_read_byte(138); ma_write_byte(138,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1(o) (o.read(138) & 0xf0)>>4
#define get_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__1() ( ma_read_byte(138) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2---
// PWM iramp setting for each pwmFreqMode.
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2__a 0x008b
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2__len 4
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2__mask 0x0f
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2__shift 0x00
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2__reset 0x03
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2(o,y) ({ uint8_t __ret = o.read(139); o.write(139,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2(y) ({ uint8_t __ret = ma_read_byte(139); ma_write_byte(139,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2(o) (o.read(139) & 0x0f)>>0
#define get_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__2() ( ma_read_byte(139) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3---
// PWM iramp setting for each pwmFreqMode.
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3__a 0x008b
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3__len 4
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3__mask 0xf0
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3__shift 0x04
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3__reset 0x01
#define MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3(o,y) ({ uint8_t __ret = o.read(139); o.write(139,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3(y) ({ uint8_t __ret = ma_read_byte(139); ma_write_byte(139,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3(o) (o.read(139) & 0xf0)>>4
#define get_MA_core__pmc__otp__pmHwCfg_suppl__pwm_iramp_table__3() ( ma_read_byte(139) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0---
// dtsteps modification depending on gd_str.
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0__a 0x008c
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0__len 4
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0__mask 0x0f
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0__shift 0x00
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0__reset 0x03
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0(o,y) ({ uint8_t __ret = o.read(140); o.write(140,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0(y) ({ uint8_t __ret = ma_read_byte(140); ma_write_byte(140,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0(o) (o.read(140) & 0x0f)>>0
#define get_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__0() ( ma_read_byte(140) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1---
// dtsteps modification depending on gd_str.
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1__a 0x008c
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1__len 4
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1__mask 0xf0
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1__shift 0x04
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1__reset 0x02
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1(o,y) ({ uint8_t __ret = o.read(140); o.write(140,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1(y) ({ uint8_t __ret = ma_read_byte(140); ma_write_byte(140,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1(o) (o.read(140) & 0xf0)>>4
#define get_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__1() ( ma_read_byte(140) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2---
// dtsteps modification depending on gd_str.
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2__a 0x008d
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2__len 4
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2__mask 0x0f
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2__shift 0x00
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2__reset 0x01
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2(o,y) ({ uint8_t __ret = o.read(141); o.write(141,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2(y) ({ uint8_t __ret = ma_read_byte(141); ma_write_byte(141,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2(o) (o.read(141) & 0x0f)>>0
#define get_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__2() ( ma_read_byte(141) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3---
// dtsteps modification depending on gd_str.
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3__a 0x008d
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3__len 4
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3__mask 0xf0
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3__shift 0x04
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3__reset 0x00
#define MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3(o,y) ({ uint8_t __ret = o.read(141); o.write(141,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3(y) ({ uint8_t __ret = ma_read_byte(141); ma_write_byte(141,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3(o) (o.read(141) & 0xf0)>>4
#define get_MA_core__pmc__otp__pmHwCfg_suppl__dtsteps_delta_table__3() ( ma_read_byte(141) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0---
// ocp_blnk setting for each gd_str.
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0__a 0x008e
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0__len 2
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0__mask 0x03
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0__shift 0x00
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0__reset 0x03
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0(o,y) ({ uint8_t __ret = o.read(142); o.write(142,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0(y) ({ uint8_t __ret = ma_read_byte(142); ma_write_byte(142,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0(o) (o.read(142) & 0x03)>>0
#define get_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__0() ( ma_read_byte(142) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1---
// ocp_blnk setting for each gd_str.
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1__a 0x008e
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1__len 2
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1__mask 0x0c
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1__shift 0x02
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1__reset 0x03
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1(o,y) ({ uint8_t __ret = o.read(142); o.write(142,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1(y) ({ uint8_t __ret = ma_read_byte(142); ma_write_byte(142,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1(o) (o.read(142) & 0x0c)>>2
#define get_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__1() ( ma_read_byte(142) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2---
// ocp_blnk setting for each gd_str.
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2__a 0x008e
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2__len 2
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2__mask 0x30
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2__shift 0x04
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2__reset 0x02
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2(o,y) ({ uint8_t __ret = o.read(142); o.write(142,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2(y) ({ uint8_t __ret = ma_read_byte(142); ma_write_byte(142,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2(o) (o.read(142) & 0x30)>>4
#define get_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__2() ( ma_read_byte(142) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3---
// ocp_blnk setting for each gd_str.
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3__a 0x008e
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3__len 2
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3__mask 0xc0
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3__shift 0x06
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3__reset 0x01
#define MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3__inputonly 0
#define set_obj_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3(o,y) ({ uint8_t __ret = o.read(142); o.write(142,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3(y) ({ uint8_t __ret = ma_read_byte(142); ma_write_byte(142,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3(o) (o.read(142) & 0xc0)>>6
#define get_MA_core__pmc__otp__pmHwCfg_suppl__ocp_blnk_table__3() ( ma_read_byte(142) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__Mthr_0to1---
// PM 0->1 M limit; M=0...255; 0=>0.0, 255=>1.0
#define MA_core__pmc__otp__Mthr_0to1__a 0x008f
#define MA_core__pmc__otp__Mthr_0to1__len 8
#define MA_core__pmc__otp__Mthr_0to1__mask 0xff
#define MA_core__pmc__otp__Mthr_0to1__shift 0x00
#define MA_core__pmc__otp__Mthr_0to1__reset 0x0a
#define MA_core__pmc__otp__Mthr_0to1__inputonly 0
#define set_obj_MA_core__pmc__otp__Mthr_0to1(o,y) o.write(143,y);
#define set_MA_core__pmc__otp__Mthr_0to1(y) ma_write_byte(143,y);
#define get_obj_MA_core__pmc__otp__Mthr_0to1(o) (o.read(143) & 0xff)>>0
#define get_MA_core__pmc__otp__Mthr_0to1() ( ma_read_byte(143) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__Mthr_1to2---
// PM 1->2 M limit
#define MA_core__pmc__otp__Mthr_1to2__a 0x0090
#define MA_core__pmc__otp__Mthr_1to2__len 8
#define MA_core__pmc__otp__Mthr_1to2__mask 0xff
#define MA_core__pmc__otp__Mthr_1to2__shift 0x00
#define MA_core__pmc__otp__Mthr_1to2__reset 0x0f
#define MA_core__pmc__otp__Mthr_1to2__inputonly 0
#define set_obj_MA_core__pmc__otp__Mthr_1to2(o,y) o.write(144,y);
#define set_MA_core__pmc__otp__Mthr_1to2(y) ma_write_byte(144,y);
#define get_obj_MA_core__pmc__otp__Mthr_1to2(o) (o.read(144) & 0xff)>>0
#define get_MA_core__pmc__otp__Mthr_1to2() ( ma_read_byte(144) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__Mthr_2to3---
// PM 2->3 M limit
#define MA_core__pmc__otp__Mthr_2to3__a 0x0091
#define MA_core__pmc__otp__Mthr_2to3__len 8
#define MA_core__pmc__otp__Mthr_2to3__mask 0xff
#define MA_core__pmc__otp__Mthr_2to3__shift 0x00
#define MA_core__pmc__otp__Mthr_2to3__reset 0x1e
#define MA_core__pmc__otp__Mthr_2to3__inputonly 0
#define set_obj_MA_core__pmc__otp__Mthr_2to3(o,y) o.write(145,y);
#define set_MA_core__pmc__otp__Mthr_2to3(y) ma_write_byte(145,y);
#define get_obj_MA_core__pmc__otp__Mthr_2to3(o) (o.read(145) & 0xff)>>0
#define get_MA_core__pmc__otp__Mthr_2to3() ( ma_read_byte(145) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__Mthr_1to0_hyst---
// PM 1->0 M hysteresis
#define MA_core__pmc__otp__Mthr_1to0_hyst__a 0x0092
#define MA_core__pmc__otp__Mthr_1to0_hyst__len 4
#define MA_core__pmc__otp__Mthr_1to0_hyst__mask 0x0f
#define MA_core__pmc__otp__Mthr_1to0_hyst__shift 0x00
#define MA_core__pmc__otp__Mthr_1to0_hyst__reset 0x03
#define MA_core__pmc__otp__Mthr_1to0_hyst__inputonly 0
#define set_obj_MA_core__pmc__otp__Mthr_1to0_hyst(o,y) ({ uint8_t __ret = o.read(146); o.write(146,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__Mthr_1to0_hyst(y) ({ uint8_t __ret = ma_read_byte(146); ma_write_byte(146,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__Mthr_1to0_hyst(o) (o.read(146) & 0x0f)>>0
#define get_MA_core__pmc__otp__Mthr_1to0_hyst() ( ma_read_byte(146) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__Mthr_2to1_hyst---
// PM 2->1 M hysteresis
#define MA_core__pmc__otp__Mthr_2to1_hyst__a 0x0092
#define MA_core__pmc__otp__Mthr_2to1_hyst__len 4
#define MA_core__pmc__otp__Mthr_2to1_hyst__mask 0xf0
#define MA_core__pmc__otp__Mthr_2to1_hyst__shift 0x04
#define MA_core__pmc__otp__Mthr_2to1_hyst__reset 0x04
#define MA_core__pmc__otp__Mthr_2to1_hyst__inputonly 0
#define set_obj_MA_core__pmc__otp__Mthr_2to1_hyst(o,y) ({ uint8_t __ret = o.read(146); o.write(146,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__Mthr_2to1_hyst(y) ({ uint8_t __ret = ma_read_byte(146); ma_write_byte(146,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__Mthr_2to1_hyst(o) (o.read(146) & 0xf0)>>4
#define get_MA_core__pmc__otp__Mthr_2to1_hyst() ( ma_read_byte(146) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__Mthr_3to2_hyst---
// PM 3->2 M hysteresis
#define MA_core__pmc__otp__Mthr_3to2_hyst__a 0x0093
#define MA_core__pmc__otp__Mthr_3to2_hyst__len 4
#define MA_core__pmc__otp__Mthr_3to2_hyst__mask 0x0f
#define MA_core__pmc__otp__Mthr_3to2_hyst__shift 0x00
#define MA_core__pmc__otp__Mthr_3to2_hyst__reset 0x06
#define MA_core__pmc__otp__Mthr_3to2_hyst__inputonly 0
#define set_obj_MA_core__pmc__otp__Mthr_3to2_hyst(o,y) ({ uint8_t __ret = o.read(147); o.write(147,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__Mthr_3to2_hyst(y) ({ uint8_t __ret = ma_read_byte(147); ma_write_byte(147,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__Mthr_3to2_hyst(o) (o.read(147) & 0x0f)>>0
#define get_MA_core__pmc__otp__Mthr_3to2_hyst() ( ma_read_byte(147) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__Ncycles_avg---
// Number of swithcing cycles averaged per M calc. update
#define MA_core__pmc__otp__Ncycles_avg__a 0x0093
#define MA_core__pmc__otp__Ncycles_avg__len 4
#define MA_core__pmc__otp__Ncycles_avg__mask 0xf0
#define MA_core__pmc__otp__Ncycles_avg__shift 0x04
#define MA_core__pmc__otp__Ncycles_avg__reset 0x04
#define MA_core__pmc__otp__Ncycles_avg__inputonly 0
#define set_obj_MA_core__pmc__otp__Ncycles_avg(o,y) ({ uint8_t __ret = o.read(147); o.write(147,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__Ncycles_avg(y) ({ uint8_t __ret = ma_read_byte(147); ma_write_byte(147,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__Ncycles_avg(o) (o.read(147) & 0xf0)>>4
#define get_MA_core__pmc__otp__Ncycles_avg() ( ma_read_byte(147) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__N_Mupd_PMup---
// Number of M updates to be above threshold for PM increase
#define MA_core__pmc__otp__N_Mupd_PMup__a 0x0094
#define MA_core__pmc__otp__N_Mupd_PMup__len 4
#define MA_core__pmc__otp__N_Mupd_PMup__mask 0x0f
#define MA_core__pmc__otp__N_Mupd_PMup__shift 0x00
#define MA_core__pmc__otp__N_Mupd_PMup__reset 0x01
#define MA_core__pmc__otp__N_Mupd_PMup__inputonly 0
#define set_obj_MA_core__pmc__otp__N_Mupd_PMup(o,y) ({ uint8_t __ret = o.read(148); o.write(148,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__N_Mupd_PMup(y) ({ uint8_t __ret = ma_read_byte(148); ma_write_byte(148,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__N_Mupd_PMup(o) (o.read(148) & 0x0f)>>0
#define get_MA_core__pmc__otp__N_Mupd_PMup() ( ma_read_byte(148) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__Ncount_mute_off---
// Number of consequtive audio sample above threshold amplitude for wake-up from power-down
#define MA_core__pmc__otp__Ncount_mute_off__a 0x0094
#define MA_core__pmc__otp__Ncount_mute_off__len 4
#define MA_core__pmc__otp__Ncount_mute_off__mask 0xf0
#define MA_core__pmc__otp__Ncount_mute_off__shift 0x04
#define MA_core__pmc__otp__Ncount_mute_off__reset 0x01
#define MA_core__pmc__otp__Ncount_mute_off__inputonly 0
#define set_obj_MA_core__pmc__otp__Ncount_mute_off(o,y) ({ uint8_t __ret = o.read(148); o.write(148,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__otp__Ncount_mute_off(y) ({ uint8_t __ret = ma_read_byte(148); ma_write_byte(148,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__otp__Ncount_mute_off(o) (o.read(148) & 0xf0)>>4
#define get_MA_core__pmc__otp__Ncount_mute_off() ( ma_read_byte(148) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__otp__N_Mupd_PMdn__0---
// Number of M updates to be below threshold for PM decrease
#define MA_core__pmc__otp__N_Mupd_PMdn__0__a 0x0095
#define MA_core__pmc__otp__N_Mupd_PMdn__0__len 8
#define MA_core__pmc__otp__N_Mupd_PMdn__0__mask 0xff
#define MA_core__pmc__otp__N_Mupd_PMdn__0__shift 0x00
#define MA_core__pmc__otp__N_Mupd_PMdn__0__reset 0x40
#define MA_core__pmc__otp__N_Mupd_PMdn__0__inputonly 0
#define set_obj_MA_core__pmc__otp__N_Mupd_PMdn__0(o,y) o.write(149,y);
#define set_MA_core__pmc__otp__N_Mupd_PMdn__0(y) ma_write_byte(149,y);
#define get_obj_MA_core__pmc__otp__N_Mupd_PMdn__0(o) (o.read(149) & 0xff)>>0
#define get_MA_core__pmc__otp__N_Mupd_PMdn__0() ( ma_read_byte(149) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__N_Mupd_PMdn__1---
// Number of M updates to be below threshold for PM decrease
#define MA_core__pmc__otp__N_Mupd_PMdn__1__a 0x0096
#define MA_core__pmc__otp__N_Mupd_PMdn__1__len 8
#define MA_core__pmc__otp__N_Mupd_PMdn__1__mask 0xff
#define MA_core__pmc__otp__N_Mupd_PMdn__1__shift 0x00
#define MA_core__pmc__otp__N_Mupd_PMdn__1__reset 0x40
#define MA_core__pmc__otp__N_Mupd_PMdn__1__inputonly 0
#define set_obj_MA_core__pmc__otp__N_Mupd_PMdn__1(o,y) o.write(150,y);
#define set_MA_core__pmc__otp__N_Mupd_PMdn__1(y) ma_write_byte(150,y);
#define get_obj_MA_core__pmc__otp__N_Mupd_PMdn__1(o) (o.read(150) & 0xff)>>0
#define get_MA_core__pmc__otp__N_Mupd_PMdn__1() ( ma_read_byte(150) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__mute_signal_thr---
// Audio signal activity detector "no activity" threshold
#define MA_core__pmc__otp__mute_signal_thr__a 0x0097
#define MA_core__pmc__otp__mute_signal_thr__len 8
#define MA_core__pmc__otp__mute_signal_thr__mask 0xff
#define MA_core__pmc__otp__mute_signal_thr__shift 0x00
#define MA_core__pmc__otp__mute_signal_thr__reset 0x20
#define MA_core__pmc__otp__mute_signal_thr__inputonly 0
#define set_obj_MA_core__pmc__otp__mute_signal_thr(o,y) o.write(151,y);
#define set_MA_core__pmc__otp__mute_signal_thr(y) ma_write_byte(151,y);
#define get_obj_MA_core__pmc__otp__mute_signal_thr(o) (o.read(151) & 0xff)>>0
#define get_MA_core__pmc__otp__mute_signal_thr() ( ma_read_byte(151) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__Ncount_mute_on__0---
// Number of consequtive audio samples w/ sub-threshold amplitude for auto-power-down
#define MA_core__pmc__otp__Ncount_mute_on__0__a 0x0098
#define MA_core__pmc__otp__Ncount_mute_on__0__len 8
#define MA_core__pmc__otp__Ncount_mute_on__0__mask 0xff
#define MA_core__pmc__otp__Ncount_mute_on__0__shift 0x00
#define MA_core__pmc__otp__Ncount_mute_on__0__reset 0x40
#define MA_core__pmc__otp__Ncount_mute_on__0__inputonly 0
#define set_obj_MA_core__pmc__otp__Ncount_mute_on__0(o,y) o.write(152,y);
#define set_MA_core__pmc__otp__Ncount_mute_on__0(y) ma_write_byte(152,y);
#define get_obj_MA_core__pmc__otp__Ncount_mute_on__0(o) (o.read(152) & 0xff)>>0
#define get_MA_core__pmc__otp__Ncount_mute_on__0() ( ma_read_byte(152) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__Ncount_mute_on__1---
// Number of consequtive audio samples w/ sub-threshold amplitude for auto-power-down
#define MA_core__pmc__otp__Ncount_mute_on__1__a 0x0099
#define MA_core__pmc__otp__Ncount_mute_on__1__len 8
#define MA_core__pmc__otp__Ncount_mute_on__1__mask 0xff
#define MA_core__pmc__otp__Ncount_mute_on__1__shift 0x00
#define MA_core__pmc__otp__Ncount_mute_on__1__reset 0x40
#define MA_core__pmc__otp__Ncount_mute_on__1__inputonly 0
#define set_obj_MA_core__pmc__otp__Ncount_mute_on__1(o,y) o.write(153,y);
#define set_MA_core__pmc__otp__Ncount_mute_on__1(y) ma_write_byte(153,y);
#define get_obj_MA_core__pmc__otp__Ncount_mute_on__1(o) (o.read(153) & 0xff)>>0
#define get_MA_core__pmc__otp__Ncount_mute_on__1() ( ma_read_byte(153) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP_disableMask---
// OTP handle for flagging PMPs that may not be selected; MSB=>MPM7, LSB=>PMP0
#define MA_core__pmc__otp__PMP_disableMask__a 0x009a
#define MA_core__pmc__otp__PMP_disableMask__len 8
#define MA_core__pmc__otp__PMP_disableMask__mask 0xff
#define MA_core__pmc__otp__PMP_disableMask__shift 0x00
#define MA_core__pmc__otp__PMP_disableMask__reset 0x00
#define MA_core__pmc__otp__PMP_disableMask__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP_disableMask(o,y) o.write(154,y);
#define set_MA_core__pmc__otp__PMP_disableMask(y) ma_write_byte(154,y);
#define get_obj_MA_core__pmc__otp__PMP_disableMask(o) (o.read(154) & 0xff)>>0
#define get_MA_core__pmc__otp__PMP_disableMask() ( ma_read_byte(154) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMC_disHighPerfAudio---
// OTP handle for disabling high-performance audio HW settings (int1_rscale_low="1", lf_bias_scale="11") in any PMP
#define MA_core__pmc__otp__PMC_disHighPerfAudio__a 0x009b
#define MA_core__pmc__otp__PMC_disHighPerfAudio__len 1
#define MA_core__pmc__otp__PMC_disHighPerfAudio__mask 0x01
#define MA_core__pmc__otp__PMC_disHighPerfAudio__shift 0x00
#define MA_core__pmc__otp__PMC_disHighPerfAudio__reset 0x00
#define MA_core__pmc__otp__PMC_disHighPerfAudio__inputonly 0
#define set_obj_MA_core__pmc__otp__PMC_disHighPerfAudio(o,y) ({ uint8_t __ret = o.read(155); o.write(155,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__otp__PMC_disHighPerfAudio(y) ({ uint8_t __ret = ma_read_byte(155); ma_write_byte(155,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__otp__PMC_disHighPerfAudio(o) (o.read(155) & 0x01)>>0
#define get_MA_core__pmc__otp__PMC_disHighPerfAudio() ( ma_read_byte(155) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__otp__mute_signal_gate---
// High to let audio signal activity detector power down amplifier if no/low signal
#define MA_core__pmc__otp__mute_signal_gate__a 0x009b
#define MA_core__pmc__otp__mute_signal_gate__len 1
#define MA_core__pmc__otp__mute_signal_gate__mask 0x02
#define MA_core__pmc__otp__mute_signal_gate__shift 0x01
#define MA_core__pmc__otp__mute_signal_gate__reset 0x01
#define MA_core__pmc__otp__mute_signal_gate__inputonly 0
#define set_obj_MA_core__pmc__otp__mute_signal_gate(o,y) ({ uint8_t __ret = o.read(155); o.write(155,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__otp__mute_signal_gate(y) ({ uint8_t __ret = ma_read_byte(155); ma_write_byte(155,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__otp__mute_signal_gate(o) (o.read(155) & 0x02)>>1
#define get_MA_core__pmc__otp__mute_signal_gate() ( ma_read_byte(155) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__otp__mute_signal_the_hyst---
// Hysteresis for wake-up from power-down
#define MA_core__pmc__otp__mute_signal_the_hyst__a 0x009b
#define MA_core__pmc__otp__mute_signal_the_hyst__len 4
#define MA_core__pmc__otp__mute_signal_the_hyst__mask 0x3c
#define MA_core__pmc__otp__mute_signal_the_hyst__shift 0x02
#define MA_core__pmc__otp__mute_signal_the_hyst__reset 0x04
#define MA_core__pmc__otp__mute_signal_the_hyst__inputonly 0
#define set_obj_MA_core__pmc__otp__mute_signal_the_hyst(o,y) ({ uint8_t __ret = o.read(155); o.write(155,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pmc__otp__mute_signal_the_hyst(y) ({ uint8_t __ret = ma_read_byte(155); ma_write_byte(155,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pmc__otp__mute_signal_the_hyst(o) (o.read(155) & 0x3c)>>2
#define get_MA_core__pmc__otp__mute_signal_the_hyst() ( ma_read_byte(155) & 0x3c)>>2
//------------------------------------------------------------------------------core__pmc__otp__dmy_data0---
// Dummy (filler) data.
#define MA_core__pmc__otp__dmy_data0__a 0x009b
#define MA_core__pmc__otp__dmy_data0__len 2
#define MA_core__pmc__otp__dmy_data0__mask 0xc0
#define MA_core__pmc__otp__dmy_data0__shift 0x06
#define MA_core__pmc__otp__dmy_data0__reset 0x00
#define MA_core__pmc__otp__dmy_data0__inputonly 0
#define set_obj_MA_core__pmc__otp__dmy_data0(o,y) ({ uint8_t __ret = o.read(155); o.write(155,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__otp__dmy_data0(y) ({ uint8_t __ret = ma_read_byte(155); ma_write_byte(155,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__otp__dmy_data0(o) (o.read(155) & 0xc0)>>6
#define get_MA_core__pmc__otp__dmy_data0() ( ma_read_byte(155) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__otp__PMC_nDavg_nom---
// Number of duty cycle averages for max. switching frequency (pwmFreqMode = "00")
#define MA_core__pmc__otp__PMC_nDavg_nom__a 0x009c
#define MA_core__pmc__otp__PMC_nDavg_nom__len 5
#define MA_core__pmc__otp__PMC_nDavg_nom__mask 0x1f
#define MA_core__pmc__otp__PMC_nDavg_nom__shift 0x00
#define MA_core__pmc__otp__PMC_nDavg_nom__reset 0x04
#define MA_core__pmc__otp__PMC_nDavg_nom__inputonly 0
#define set_obj_MA_core__pmc__otp__PMC_nDavg_nom(o,y) ({ uint8_t __ret = o.read(156); o.write(156,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__pmc__otp__PMC_nDavg_nom(y) ({ uint8_t __ret = ma_read_byte(156); ma_write_byte(156,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__pmc__otp__PMC_nDavg_nom(o) (o.read(156) & 0x1f)>>0
#define get_MA_core__pmc__otp__PMC_nDavg_nom() ( ma_read_byte(156) & 0x1f)>>0
//------------------------------------------------------------------------------core__pmc__otp__dmy_data1---
// Dummy (filler) data.
#define MA_core__pmc__otp__dmy_data1__a 0x009c
#define MA_core__pmc__otp__dmy_data1__len 3
#define MA_core__pmc__otp__dmy_data1__mask 0xe0
#define MA_core__pmc__otp__dmy_data1__shift 0x05
#define MA_core__pmc__otp__dmy_data1__reset 0x00
#define MA_core__pmc__otp__dmy_data1__inputonly 0
#define set_obj_MA_core__pmc__otp__dmy_data1(o,y) ({ uint8_t __ret = o.read(156); o.write(156,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__otp__dmy_data1(y) ({ uint8_t __ret = ma_read_byte(156); ma_write_byte(156,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__otp__dmy_data1(o) (o.read(156) & 0xe0)>>5
#define get_MA_core__pmc__otp__dmy_data1() ( ma_read_byte(156) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__reg__PMP6__PMcfg0_idx---
// 4b. PowerMode 0 settings pointer.
#define MA_core__pmc__reg__PMP6__PMcfg0_idx__a 0x009d
#define MA_core__pmc__reg__PMP6__PMcfg0_idx__len 4
#define MA_core__pmc__reg__PMP6__PMcfg0_idx__mask 0x0f
#define MA_core__pmc__reg__PMP6__PMcfg0_idx__shift 0x00
#define MA_core__pmc__reg__PMP6__PMcfg0_idx__reset 0x04
#define MA_core__pmc__reg__PMP6__PMcfg0_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__PMcfg0_idx(o,y) ({ uint8_t __ret = o.read(157); o.write(157,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__reg__PMP6__PMcfg0_idx(y) ({ uint8_t __ret = ma_read_byte(157); ma_write_byte(157,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__reg__PMP6__PMcfg0_idx(o) (o.read(157) & 0x0f)>>0
#define get_MA_core__pmc__reg__PMP6__PMcfg0_idx() ( ma_read_byte(157) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP6__PMcfg1_idx---
// 4b. PowerMode 1 settings pointer.
#define MA_core__pmc__reg__PMP6__PMcfg1_idx__a 0x009d
#define MA_core__pmc__reg__PMP6__PMcfg1_idx__len 4
#define MA_core__pmc__reg__PMP6__PMcfg1_idx__mask 0xf0
#define MA_core__pmc__reg__PMP6__PMcfg1_idx__shift 0x04
#define MA_core__pmc__reg__PMP6__PMcfg1_idx__reset 0x04
#define MA_core__pmc__reg__PMP6__PMcfg1_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__PMcfg1_idx(o,y) ({ uint8_t __ret = o.read(157); o.write(157,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__reg__PMP6__PMcfg1_idx(y) ({ uint8_t __ret = ma_read_byte(157); ma_write_byte(157,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__reg__PMP6__PMcfg1_idx(o) (o.read(157) & 0xf0)>>4
#define get_MA_core__pmc__reg__PMP6__PMcfg1_idx() ( ma_read_byte(157) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__reg__PMP6__PMcfg2_idx---
// 4b. PowerMode 2 settings pointer.
#define MA_core__pmc__reg__PMP6__PMcfg2_idx__a 0x009e
#define MA_core__pmc__reg__PMP6__PMcfg2_idx__len 4
#define MA_core__pmc__reg__PMP6__PMcfg2_idx__mask 0x0f
#define MA_core__pmc__reg__PMP6__PMcfg2_idx__shift 0x00
#define MA_core__pmc__reg__PMP6__PMcfg2_idx__reset 0x05
#define MA_core__pmc__reg__PMP6__PMcfg2_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__PMcfg2_idx(o,y) ({ uint8_t __ret = o.read(158); o.write(158,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__reg__PMP6__PMcfg2_idx(y) ({ uint8_t __ret = ma_read_byte(158); ma_write_byte(158,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__reg__PMP6__PMcfg2_idx(o) (o.read(158) & 0x0f)>>0
#define get_MA_core__pmc__reg__PMP6__PMcfg2_idx() ( ma_read_byte(158) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP6__PMcfg3_idx---
// 4b. PowerMode 3 settings pointer.
#define MA_core__pmc__reg__PMP6__PMcfg3_idx__a 0x009e
#define MA_core__pmc__reg__PMP6__PMcfg3_idx__len 4
#define MA_core__pmc__reg__PMP6__PMcfg3_idx__mask 0xf0
#define MA_core__pmc__reg__PMP6__PMcfg3_idx__shift 0x04
#define MA_core__pmc__reg__PMP6__PMcfg3_idx__reset 0x06
#define MA_core__pmc__reg__PMP6__PMcfg3_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__PMcfg3_idx(o,y) ({ uint8_t __ret = o.read(158); o.write(158,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__reg__PMP6__PMcfg3_idx(y) ({ uint8_t __ret = ma_read_byte(158); ma_write_byte(158,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__reg__PMP6__PMcfg3_idx(o) (o.read(158) & 0xf0)>>4
#define get_MA_core__pmc__reg__PMP6__PMcfg3_idx() ( ma_read_byte(158) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__reg__PMP6__PMcfg_lowPvdd_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 5)
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx__a 0x009f
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx__len 2
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx__mask 0x03
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx__shift 0x00
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx__reset 0x01
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx(o,y) ({ uint8_t __ret = o.read(159); o.write(159,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx(y) ({ uint8_t __ret = ma_read_byte(159); ma_write_byte(159,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx(o) (o.read(159) & 0x03)>>0
#define get_MA_core__pmc__reg__PMP6__PMcfg_lowPvdd_idx() ( ma_read_byte(159) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP6__PMcfg_lowPvddT_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 6)
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx__a 0x009f
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx__len 2
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx__mask 0x0c
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx__shift 0x02
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx__reset 0x01
#define MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx(o,y) ({ uint8_t __ret = o.read(159); o.write(159,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx(y) ({ uint8_t __ret = ma_read_byte(159); ma_write_byte(159,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx(o) (o.read(159) & 0x0c)>>2
#define get_MA_core__pmc__reg__PMP6__PMcfg_lowPvddT_idx() ( ma_read_byte(159) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__reg__PMP6__PM_max---
// 2b.  Max. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__reg__PMP6__PM_max__a 0x009f
#define MA_core__pmc__reg__PMP6__PM_max__len 2
#define MA_core__pmc__reg__PMP6__PM_max__mask 0x30
#define MA_core__pmc__reg__PMP6__PM_max__shift 0x04
#define MA_core__pmc__reg__PMP6__PM_max__reset 0x03
#define MA_core__pmc__reg__PMP6__PM_max__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__PM_max(o,y) ({ uint8_t __ret = o.read(159); o.write(159,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__reg__PMP6__PM_max(y) ({ uint8_t __ret = ma_read_byte(159); ma_write_byte(159,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__reg__PMP6__PM_max(o) (o.read(159) & 0x30)>>4
#define get_MA_core__pmc__reg__PMP6__PM_max() ( ma_read_byte(159) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__reg__PMP6__PM_min---
// 2b.  Min. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__reg__PMP6__PM_min__a 0x009f
#define MA_core__pmc__reg__PMP6__PM_min__len 2
#define MA_core__pmc__reg__PMP6__PM_min__mask 0xc0
#define MA_core__pmc__reg__PMP6__PM_min__shift 0x06
#define MA_core__pmc__reg__PMP6__PM_min__reset 0x01
#define MA_core__pmc__reg__PMP6__PM_min__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__PM_min(o,y) ({ uint8_t __ret = o.read(159); o.write(159,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__reg__PMP6__PM_min(y) ({ uint8_t __ret = ma_read_byte(159); ma_write_byte(159,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__reg__PMP6__PM_min(o) (o.read(159) & 0xc0)>>6
#define get_MA_core__pmc__reg__PMP6__PM_min() ( ma_read_byte(159) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__reg__PMP6__lf_int1_rscale_low---
// 1b. Resistance/impedance level of DAC-LF interface. 1 => low-noise.
#define MA_core__pmc__reg__PMP6__lf_int1_rscale_low__a 0x00a0
#define MA_core__pmc__reg__PMP6__lf_int1_rscale_low__len 1
#define MA_core__pmc__reg__PMP6__lf_int1_rscale_low__mask 0x01
#define MA_core__pmc__reg__PMP6__lf_int1_rscale_low__shift 0x00
#define MA_core__pmc__reg__PMP6__lf_int1_rscale_low__reset 0x00
#define MA_core__pmc__reg__PMP6__lf_int1_rscale_low__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__lf_int1_rscale_low(o,y) ({ uint8_t __ret = o.read(160); o.write(160,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__reg__PMP6__lf_int1_rscale_low(y) ({ uint8_t __ret = ma_read_byte(160); ma_write_byte(160,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__reg__PMP6__lf_int1_rscale_low(o) (o.read(160) & 0x01)>>0
#define get_MA_core__pmc__reg__PMP6__lf_int1_rscale_low() ( ma_read_byte(160) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP6__lf_bias_scale---
// 2b. Loop filter bias setting; 0 => low-bias, 1 => mid-bias, 2,3 => high-bias (low-noise)
#define MA_core__pmc__reg__PMP6__lf_bias_scale__a 0x00a0
#define MA_core__pmc__reg__PMP6__lf_bias_scale__len 2
#define MA_core__pmc__reg__PMP6__lf_bias_scale__mask 0x06
#define MA_core__pmc__reg__PMP6__lf_bias_scale__shift 0x01
#define MA_core__pmc__reg__PMP6__lf_bias_scale__reset 0x01
#define MA_core__pmc__reg__PMP6__lf_bias_scale__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__lf_bias_scale(o,y) ({ uint8_t __ret = o.read(160); o.write(160,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__pmc__reg__PMP6__lf_bias_scale(y) ({ uint8_t __ret = ma_read_byte(160); ma_write_byte(160,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__pmc__reg__PMP6__lf_bias_scale(o) (o.read(160) & 0x06)>>1
#define get_MA_core__pmc__reg__PMP6__lf_bias_scale() ( ma_read_byte(160) & 0x06)>>1
//------------------------------------------------------------------------------core__pmc__reg__PMP6__lf_int3_c_scale---
// 2b. Loop filter integrator 3 time constant tuning handle. "00" => fast (least stable), "11" => normal/slow.
#define MA_core__pmc__reg__PMP6__lf_int3_c_scale__a 0x00a0
#define MA_core__pmc__reg__PMP6__lf_int3_c_scale__len 2
#define MA_core__pmc__reg__PMP6__lf_int3_c_scale__mask 0x18
#define MA_core__pmc__reg__PMP6__lf_int3_c_scale__shift 0x03
#define MA_core__pmc__reg__PMP6__lf_int3_c_scale__reset 0x03
#define MA_core__pmc__reg__PMP6__lf_int3_c_scale__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__lf_int3_c_scale(o,y) ({ uint8_t __ret = o.read(160); o.write(160,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__pmc__reg__PMP6__lf_int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(160); ma_write_byte(160,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__pmc__reg__PMP6__lf_int3_c_scale(o) (o.read(160) & 0x18)>>3
#define get_MA_core__pmc__reg__PMP6__lf_int3_c_scale() ( ma_read_byte(160) & 0x18)>>3
//------------------------------------------------------------------------------core__pmc__reg__PMP6__lf_gain_fwd---
// 3b. Loop filter forward gain setting. "100" = nominal/middle.
#define MA_core__pmc__reg__PMP6__lf_gain_fwd__a 0x00a0
#define MA_core__pmc__reg__PMP6__lf_gain_fwd__len 3
#define MA_core__pmc__reg__PMP6__lf_gain_fwd__mask 0xe0
#define MA_core__pmc__reg__PMP6__lf_gain_fwd__shift 0x05
#define MA_core__pmc__reg__PMP6__lf_gain_fwd__reset 0x04
#define MA_core__pmc__reg__PMP6__lf_gain_fwd__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__lf_gain_fwd(o,y) ({ uint8_t __ret = o.read(160); o.write(160,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__reg__PMP6__lf_gain_fwd(y) ({ uint8_t __ret = ma_read_byte(160); ma_write_byte(160,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__reg__PMP6__lf_gain_fwd(o) (o.read(160) & 0xe0)>>5
#define get_MA_core__pmc__reg__PMP6__lf_gain_fwd() ( ma_read_byte(160) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__reg__PMP7__PMcfg0_idx---
// 4b. PowerMode 0 settings pointer.
#define MA_core__pmc__reg__PMP7__PMcfg0_idx__a 0x00a2
#define MA_core__pmc__reg__PMP7__PMcfg0_idx__len 4
#define MA_core__pmc__reg__PMP7__PMcfg0_idx__mask 0x0f
#define MA_core__pmc__reg__PMP7__PMcfg0_idx__shift 0x00
#define MA_core__pmc__reg__PMP7__PMcfg0_idx__reset 0x04
#define MA_core__pmc__reg__PMP7__PMcfg0_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__PMcfg0_idx(o,y) ({ uint8_t __ret = o.read(162); o.write(162,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__reg__PMP7__PMcfg0_idx(y) ({ uint8_t __ret = ma_read_byte(162); ma_write_byte(162,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__reg__PMP7__PMcfg0_idx(o) (o.read(162) & 0x0f)>>0
#define get_MA_core__pmc__reg__PMP7__PMcfg0_idx() ( ma_read_byte(162) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP7__PMcfg1_idx---
// 4b. PowerMode 1 settings pointer.
#define MA_core__pmc__reg__PMP7__PMcfg1_idx__a 0x00a2
#define MA_core__pmc__reg__PMP7__PMcfg1_idx__len 4
#define MA_core__pmc__reg__PMP7__PMcfg1_idx__mask 0xf0
#define MA_core__pmc__reg__PMP7__PMcfg1_idx__shift 0x04
#define MA_core__pmc__reg__PMP7__PMcfg1_idx__reset 0x04
#define MA_core__pmc__reg__PMP7__PMcfg1_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__PMcfg1_idx(o,y) ({ uint8_t __ret = o.read(162); o.write(162,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__reg__PMP7__PMcfg1_idx(y) ({ uint8_t __ret = ma_read_byte(162); ma_write_byte(162,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__reg__PMP7__PMcfg1_idx(o) (o.read(162) & 0xf0)>>4
#define get_MA_core__pmc__reg__PMP7__PMcfg1_idx() ( ma_read_byte(162) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__reg__PMP7__PMcfg2_idx---
// 4b. PowerMode 2 settings pointer.
#define MA_core__pmc__reg__PMP7__PMcfg2_idx__a 0x00a3
#define MA_core__pmc__reg__PMP7__PMcfg2_idx__len 4
#define MA_core__pmc__reg__PMP7__PMcfg2_idx__mask 0x0f
#define MA_core__pmc__reg__PMP7__PMcfg2_idx__shift 0x00
#define MA_core__pmc__reg__PMP7__PMcfg2_idx__reset 0x05
#define MA_core__pmc__reg__PMP7__PMcfg2_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__PMcfg2_idx(o,y) ({ uint8_t __ret = o.read(163); o.write(163,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__reg__PMP7__PMcfg2_idx(y) ({ uint8_t __ret = ma_read_byte(163); ma_write_byte(163,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__reg__PMP7__PMcfg2_idx(o) (o.read(163) & 0x0f)>>0
#define get_MA_core__pmc__reg__PMP7__PMcfg2_idx() ( ma_read_byte(163) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP7__PMcfg3_idx---
// 4b. PowerMode 3 settings pointer.
#define MA_core__pmc__reg__PMP7__PMcfg3_idx__a 0x00a3
#define MA_core__pmc__reg__PMP7__PMcfg3_idx__len 4
#define MA_core__pmc__reg__PMP7__PMcfg3_idx__mask 0xf0
#define MA_core__pmc__reg__PMP7__PMcfg3_idx__shift 0x04
#define MA_core__pmc__reg__PMP7__PMcfg3_idx__reset 0x06
#define MA_core__pmc__reg__PMP7__PMcfg3_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__PMcfg3_idx(o,y) ({ uint8_t __ret = o.read(163); o.write(163,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pmc__reg__PMP7__PMcfg3_idx(y) ({ uint8_t __ret = ma_read_byte(163); ma_write_byte(163,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pmc__reg__PMP7__PMcfg3_idx(o) (o.read(163) & 0xf0)>>4
#define get_MA_core__pmc__reg__PMP7__PMcfg3_idx() ( ma_read_byte(163) & 0xf0)>>4
//------------------------------------------------------------------------------core__pmc__reg__PMP7__PMcfg_lowPvdd_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 5)
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx__a 0x00a4
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx__len 2
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx__mask 0x03
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx__shift 0x00
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx__reset 0x01
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx(o,y) ({ uint8_t __ret = o.read(164); o.write(164,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx(y) ({ uint8_t __ret = ma_read_byte(164); ma_write_byte(164,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx(o) (o.read(164) & 0x03)>>0
#define get_MA_core__pmc__reg__PMP7__PMcfg_lowPvdd_idx() ( ma_read_byte(164) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP7__PMcfg_lowPvddT_idx---
// 2b. Pointer to settings for PowerMode for low-Pvdd operation (PowerMode 6)
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx__a 0x00a4
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx__len 2
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx__mask 0x0c
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx__shift 0x02
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx__reset 0x01
#define MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx(o,y) ({ uint8_t __ret = o.read(164); o.write(164,(__ret&0xf3)|((y<<2)&0x0c)); })
#define set_MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx(y) ({ uint8_t __ret = ma_read_byte(164); ma_write_byte(164,(__ret&0xf3)|((y<<2)&0x0c)); })
#define get_obj_MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx(o) (o.read(164) & 0x0c)>>2
#define get_MA_core__pmc__reg__PMP7__PMcfg_lowPvddT_idx() ( ma_read_byte(164) & 0x0c)>>2
//------------------------------------------------------------------------------core__pmc__reg__PMP7__PM_max---
// 2b.  Max. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__reg__PMP7__PM_max__a 0x00a4
#define MA_core__pmc__reg__PMP7__PM_max__len 2
#define MA_core__pmc__reg__PMP7__PM_max__mask 0x30
#define MA_core__pmc__reg__PMP7__PM_max__shift 0x04
#define MA_core__pmc__reg__PMP7__PM_max__reset 0x03
#define MA_core__pmc__reg__PMP7__PM_max__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__PM_max(o,y) ({ uint8_t __ret = o.read(164); o.write(164,(__ret&0xcf)|((y<<4)&0x30)); })
#define set_MA_core__pmc__reg__PMP7__PM_max(y) ({ uint8_t __ret = ma_read_byte(164); ma_write_byte(164,(__ret&0xcf)|((y<<4)&0x30)); })
#define get_obj_MA_core__pmc__reg__PMP7__PM_max(o) (o.read(164) & 0x30)>>4
#define get_MA_core__pmc__reg__PMP7__PM_max() ( ma_read_byte(164) & 0x30)>>4
//------------------------------------------------------------------------------core__pmc__reg__PMP7__PM_min---
// 2b.  Min. PowerMode (among PM0-3) to be used by auto-PM selector
#define MA_core__pmc__reg__PMP7__PM_min__a 0x00a4
#define MA_core__pmc__reg__PMP7__PM_min__len 2
#define MA_core__pmc__reg__PMP7__PM_min__mask 0xc0
#define MA_core__pmc__reg__PMP7__PM_min__shift 0x06
#define MA_core__pmc__reg__PMP7__PM_min__reset 0x01
#define MA_core__pmc__reg__PMP7__PM_min__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__PM_min(o,y) ({ uint8_t __ret = o.read(164); o.write(164,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_core__pmc__reg__PMP7__PM_min(y) ({ uint8_t __ret = ma_read_byte(164); ma_write_byte(164,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_core__pmc__reg__PMP7__PM_min(o) (o.read(164) & 0xc0)>>6
#define get_MA_core__pmc__reg__PMP7__PM_min() ( ma_read_byte(164) & 0xc0)>>6
//------------------------------------------------------------------------------core__pmc__reg__PMP7__lf_int1_rscale_low---
// 1b. Resistance/impedance level of DAC-LF interface. 1 => low-noise.
#define MA_core__pmc__reg__PMP7__lf_int1_rscale_low__a 0x00a5
#define MA_core__pmc__reg__PMP7__lf_int1_rscale_low__len 1
#define MA_core__pmc__reg__PMP7__lf_int1_rscale_low__mask 0x01
#define MA_core__pmc__reg__PMP7__lf_int1_rscale_low__shift 0x00
#define MA_core__pmc__reg__PMP7__lf_int1_rscale_low__reset 0x00
#define MA_core__pmc__reg__PMP7__lf_int1_rscale_low__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__lf_int1_rscale_low(o,y) ({ uint8_t __ret = o.read(165); o.write(165,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__reg__PMP7__lf_int1_rscale_low(y) ({ uint8_t __ret = ma_read_byte(165); ma_write_byte(165,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__reg__PMP7__lf_int1_rscale_low(o) (o.read(165) & 0x01)>>0
#define get_MA_core__pmc__reg__PMP7__lf_int1_rscale_low() ( ma_read_byte(165) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP7__lf_bias_scale---
// 2b. Loop filter bias setting; 0 => low-bias, 1 => mid-bias, 2,3 => high-bias (low-noise)
#define MA_core__pmc__reg__PMP7__lf_bias_scale__a 0x00a5
#define MA_core__pmc__reg__PMP7__lf_bias_scale__len 2
#define MA_core__pmc__reg__PMP7__lf_bias_scale__mask 0x06
#define MA_core__pmc__reg__PMP7__lf_bias_scale__shift 0x01
#define MA_core__pmc__reg__PMP7__lf_bias_scale__reset 0x01
#define MA_core__pmc__reg__PMP7__lf_bias_scale__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__lf_bias_scale(o,y) ({ uint8_t __ret = o.read(165); o.write(165,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__pmc__reg__PMP7__lf_bias_scale(y) ({ uint8_t __ret = ma_read_byte(165); ma_write_byte(165,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__pmc__reg__PMP7__lf_bias_scale(o) (o.read(165) & 0x06)>>1
#define get_MA_core__pmc__reg__PMP7__lf_bias_scale() ( ma_read_byte(165) & 0x06)>>1
//------------------------------------------------------------------------------core__pmc__reg__PMP7__lf_int3_c_scale---
// 2b. Loop filter integrator 3 time constant tuning handle. "00" => fast (least stable), "11" => normal/slow.
#define MA_core__pmc__reg__PMP7__lf_int3_c_scale__a 0x00a5
#define MA_core__pmc__reg__PMP7__lf_int3_c_scale__len 2
#define MA_core__pmc__reg__PMP7__lf_int3_c_scale__mask 0x18
#define MA_core__pmc__reg__PMP7__lf_int3_c_scale__shift 0x03
#define MA_core__pmc__reg__PMP7__lf_int3_c_scale__reset 0x03
#define MA_core__pmc__reg__PMP7__lf_int3_c_scale__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__lf_int3_c_scale(o,y) ({ uint8_t __ret = o.read(165); o.write(165,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__pmc__reg__PMP7__lf_int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(165); ma_write_byte(165,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__pmc__reg__PMP7__lf_int3_c_scale(o) (o.read(165) & 0x18)>>3
#define get_MA_core__pmc__reg__PMP7__lf_int3_c_scale() ( ma_read_byte(165) & 0x18)>>3
//------------------------------------------------------------------------------core__pmc__reg__PMP7__lf_gain_fwd---
// 3b. Loop filter forward gain setting. "100" = nominal/middle.
#define MA_core__pmc__reg__PMP7__lf_gain_fwd__a 0x00a5
#define MA_core__pmc__reg__PMP7__lf_gain_fwd__len 3
#define MA_core__pmc__reg__PMP7__lf_gain_fwd__mask 0xe0
#define MA_core__pmc__reg__PMP7__lf_gain_fwd__shift 0x05
#define MA_core__pmc__reg__PMP7__lf_gain_fwd__reset 0x04
#define MA_core__pmc__reg__PMP7__lf_gain_fwd__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__lf_gain_fwd(o,y) ({ uint8_t __ret = o.read(165); o.write(165,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__reg__PMP7__lf_gain_fwd(y) ({ uint8_t __ret = ma_read_byte(165); ma_write_byte(165,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__reg__PMP7__lf_gain_fwd(o) (o.read(165) & 0xe0)>>5
#define get_MA_core__pmc__reg__PMP7__lf_gain_fwd() ( ma_read_byte(165) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__reg__PM_man_force0---
// 1b. High to force manually selected PM on channel 0
#define MA_core__pmc__reg__PM_man_force0__a 0x00a7
#define MA_core__pmc__reg__PM_man_force0__len 1
#define MA_core__pmc__reg__PM_man_force0__mask 0x01
#define MA_core__pmc__reg__PM_man_force0__shift 0x00
#define MA_core__pmc__reg__PM_man_force0__reset 0x00
#define MA_core__pmc__reg__PM_man_force0__inputonly 0
#define set_obj_MA_core__pmc__reg__PM_man_force0(o,y) ({ uint8_t __ret = o.read(167); o.write(167,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pmc__reg__PM_man_force0(y) ({ uint8_t __ret = ma_read_byte(167); ma_write_byte(167,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pmc__reg__PM_man_force0(o) (o.read(167) & 0x01)>>0
#define get_MA_core__pmc__reg__PM_man_force0() ( ma_read_byte(167) & 0x01)>>0
//------------------------------------------------------------------------------core__pmc__reg__PM_man_force1---
// 1b. High to force manually selected PM on channel 1
#define MA_core__pmc__reg__PM_man_force1__a 0x00a7
#define MA_core__pmc__reg__PM_man_force1__len 1
#define MA_core__pmc__reg__PM_man_force1__mask 0x02
#define MA_core__pmc__reg__PM_man_force1__shift 0x01
#define MA_core__pmc__reg__PM_man_force1__reset 0x00
#define MA_core__pmc__reg__PM_man_force1__inputonly 0
#define set_obj_MA_core__pmc__reg__PM_man_force1(o,y) ({ uint8_t __ret = o.read(167); o.write(167,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pmc__reg__PM_man_force1(y) ({ uint8_t __ret = ma_read_byte(167); ma_write_byte(167,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pmc__reg__PM_man_force1(o) (o.read(167) & 0x02)>>1
#define get_MA_core__pmc__reg__PM_man_force1() ( ma_read_byte(167) & 0x02)>>1
//------------------------------------------------------------------------------core__pmc__reg__PM_sel_man0---
// 2b. Channel 0 manually selected PM, used if PM_man_force0 is high.
#define MA_core__pmc__reg__PM_sel_man0__a 0x00a7
#define MA_core__pmc__reg__PM_sel_man0__len 3
#define MA_core__pmc__reg__PM_sel_man0__mask 0x1c
#define MA_core__pmc__reg__PM_sel_man0__shift 0x02
#define MA_core__pmc__reg__PM_sel_man0__reset 0x00
#define MA_core__pmc__reg__PM_sel_man0__inputonly 0
#define set_obj_MA_core__pmc__reg__PM_sel_man0(o,y) ({ uint8_t __ret = o.read(167); o.write(167,(__ret&0xe3)|((y<<2)&0x1c)); })
#define set_MA_core__pmc__reg__PM_sel_man0(y) ({ uint8_t __ret = ma_read_byte(167); ma_write_byte(167,(__ret&0xe3)|((y<<2)&0x1c)); })
#define get_obj_MA_core__pmc__reg__PM_sel_man0(o) (o.read(167) & 0x1c)>>2
#define get_MA_core__pmc__reg__PM_sel_man0() ( ma_read_byte(167) & 0x1c)>>2
//------------------------------------------------------------------------------core__pmc__reg__PM_sel_man1---
// 2b. Channel 1 manually selected PM, used if PM_man_force1 is high.
#define MA_core__pmc__reg__PM_sel_man1__a 0x00a7
#define MA_core__pmc__reg__PM_sel_man1__len 3
#define MA_core__pmc__reg__PM_sel_man1__mask 0xe0
#define MA_core__pmc__reg__PM_sel_man1__shift 0x05
#define MA_core__pmc__reg__PM_sel_man1__reset 0x00
#define MA_core__pmc__reg__PM_sel_man1__inputonly 0
#define set_obj_MA_core__pmc__reg__PM_sel_man1(o,y) ({ uint8_t __ret = o.read(167); o.write(167,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pmc__reg__PM_sel_man1(y) ({ uint8_t __ret = ma_read_byte(167); ma_write_byte(167,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pmc__reg__PM_sel_man1(o) (o.read(167) & 0xe0)>>5
#define get_MA_core__pmc__reg__PM_sel_man1() ( ma_read_byte(167) & 0xe0)>>5
//------------------------------------------------------------------------------core__pmc__PMP_selected---
// Currently selected Power Mode Profile (PMP)
#define MA_core__pmc__PMP_selected__a 0x00a8
#define MA_core__pmc__PMP_selected__len 3
#define MA_core__pmc__PMP_selected__mask 0x07
#define MA_core__pmc__PMP_selected__shift 0x00
#define MA_core__pmc__PMP_selected__reset 0x00
#define MA_core__pmc__PMP_selected__inputonly 1
#define set_obj_MA_core__pmc__PMP_selected(o,y) ({ uint8_t __ret = o.read(168); o.write(168,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__pmc__PMP_selected(y) ({ uint8_t __ret = ma_read_byte(168); ma_write_byte(168,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__pmc__PMP_selected(o) (o.read(168) & 0x07)>>0
#define get_MA_core__pmc__PMP_selected() ( ma_read_byte(168) & 0x07)>>0
//------------------------------------------------------------------------------core__pmc__PM_ch0---
// Current selected Power Mode for channel 0
#define MA_core__pmc__PM_ch0__a 0x00a9
#define MA_core__pmc__PM_ch0__len 3
#define MA_core__pmc__PM_ch0__mask 0x07
#define MA_core__pmc__PM_ch0__shift 0x00
#define MA_core__pmc__PM_ch0__reset 0x00
#define MA_core__pmc__PM_ch0__inputonly 1
#define set_obj_MA_core__pmc__PM_ch0(o,y) ({ uint8_t __ret = o.read(169); o.write(169,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__pmc__PM_ch0(y) ({ uint8_t __ret = ma_read_byte(169); ma_write_byte(169,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__pmc__PM_ch0(o) (o.read(169) & 0x07)>>0
#define get_MA_core__pmc__PM_ch0() ( ma_read_byte(169) & 0x07)>>0
//------------------------------------------------------------------------------core__pmc__PM_ch1---
// Current selected Power Mode for channel 1
#define MA_core__pmc__PM_ch1__a 0x00a9
#define MA_core__pmc__PM_ch1__len 3
#define MA_core__pmc__PM_ch1__mask 0x38
#define MA_core__pmc__PM_ch1__shift 0x03
#define MA_core__pmc__PM_ch1__reset 0x00
#define MA_core__pmc__PM_ch1__inputonly 1
#define set_obj_MA_core__pmc__PM_ch1(o,y) ({ uint8_t __ret = o.read(169); o.write(169,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__pmc__PM_ch1(y) ({ uint8_t __ret = ma_read_byte(169); ma_write_byte(169,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__pmc__PM_ch1(o) (o.read(169) & 0x38)>>3
#define get_MA_core__pmc__PM_ch1() ( ma_read_byte(169) & 0x38)>>3
//------------------------------------------------------------------------------core__pmc__Mdetector_ch0---
// Channel 0 modulation index detector output; M=0...255; 0=>0.0, 255=>1.0
#define MA_core__pmc__Mdetector_ch0__a 0x00aa
#define MA_core__pmc__Mdetector_ch0__len 8
#define MA_core__pmc__Mdetector_ch0__mask 0xff
#define MA_core__pmc__Mdetector_ch0__shift 0x00
#define MA_core__pmc__Mdetector_ch0__reset 0x00
#define MA_core__pmc__Mdetector_ch0__inputonly 1
#define set_obj_MA_core__pmc__Mdetector_ch0(o,y) o.write(170,y);
#define set_MA_core__pmc__Mdetector_ch0(y) ma_write_byte(170,y);
#define get_obj_MA_core__pmc__Mdetector_ch0(o) (o.read(170) & 0xff)>>0
#define get_MA_core__pmc__Mdetector_ch0() ( ma_read_byte(170) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__Mdetector_ch1---
// Channel 1 modulation index detector output; M=0...255; 0=>0.0, 255=>1.0
#define MA_core__pmc__Mdetector_ch1__a 0x00ab
#define MA_core__pmc__Mdetector_ch1__len 8
#define MA_core__pmc__Mdetector_ch1__mask 0xff
#define MA_core__pmc__Mdetector_ch1__shift 0x00
#define MA_core__pmc__Mdetector_ch1__reset 0x00
#define MA_core__pmc__Mdetector_ch1__inputonly 1
#define set_obj_MA_core__pmc__Mdetector_ch1(o,y) o.write(171,y);
#define set_MA_core__pmc__Mdetector_ch1(y) ma_write_byte(171,y);
#define get_obj_MA_core__pmc__Mdetector_ch1(o) (o.read(171) & 0xff)>>0
#define get_MA_core__pmc__Mdetector_ch1() ( ma_read_byte(171) & 0xff)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP0__audio_dither_lvl---
// 4b.  Pre-DAC digital audio dither level. "0000" => no dither
#define MA_core__pmc__otp__PMP0__audio_dither_lvl__a 0x0070
#define MA_core__pmc__otp__PMP0__audio_dither_lvl__len 4
#define MA_core__pmc__otp__PMP0__audio_dither_lvl__mask 0x0f
#define MA_core__pmc__otp__PMP0__audio_dither_lvl__shift 0x00
#define MA_core__pmc__otp__PMP0__audio_dither_lvl__reset 0x0d
#define MA_core__pmc__otp__PMP0__audio_dither_lvl__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP0__audio_dither_lvl(o,y) ({ uint8_t __ret = o.read(112); o.write(112,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP0__audio_dither_lvl(y) ({ uint8_t __ret = ma_read_byte(112); ma_write_byte(112,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP0__audio_dither_lvl(o) (o.read(112) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP0__audio_dither_lvl() ( ma_read_byte(112) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP1__audio_dither_lvl---
// 4b.  Pre-DAC digital audio dither level. "0000" => no dither
#define MA_core__pmc__otp__PMP1__audio_dither_lvl__a 0x0075
#define MA_core__pmc__otp__PMP1__audio_dither_lvl__len 4
#define MA_core__pmc__otp__PMP1__audio_dither_lvl__mask 0x0f
#define MA_core__pmc__otp__PMP1__audio_dither_lvl__shift 0x00
#define MA_core__pmc__otp__PMP1__audio_dither_lvl__reset 0x0d
#define MA_core__pmc__otp__PMP1__audio_dither_lvl__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP1__audio_dither_lvl(o,y) ({ uint8_t __ret = o.read(117); o.write(117,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP1__audio_dither_lvl(y) ({ uint8_t __ret = ma_read_byte(117); ma_write_byte(117,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP1__audio_dither_lvl(o) (o.read(117) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP1__audio_dither_lvl() ( ma_read_byte(117) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP2__audio_dither_lvl---
// 4b.  Pre-DAC digital audio dither level. "0000" => no dither
#define MA_core__pmc__otp__PMP2__audio_dither_lvl__a 0x007a
#define MA_core__pmc__otp__PMP2__audio_dither_lvl__len 4
#define MA_core__pmc__otp__PMP2__audio_dither_lvl__mask 0x0f
#define MA_core__pmc__otp__PMP2__audio_dither_lvl__shift 0x00
#define MA_core__pmc__otp__PMP2__audio_dither_lvl__reset 0x08
#define MA_core__pmc__otp__PMP2__audio_dither_lvl__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP2__audio_dither_lvl(o,y) ({ uint8_t __ret = o.read(122); o.write(122,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP2__audio_dither_lvl(y) ({ uint8_t __ret = ma_read_byte(122); ma_write_byte(122,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP2__audio_dither_lvl(o) (o.read(122) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP2__audio_dither_lvl() ( ma_read_byte(122) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP3__audio_dither_lvl---
// 4b.  Pre-DAC digital audio dither level. "0000" => no dither
#define MA_core__pmc__otp__PMP3__audio_dither_lvl__a 0x007f
#define MA_core__pmc__otp__PMP3__audio_dither_lvl__len 4
#define MA_core__pmc__otp__PMP3__audio_dither_lvl__mask 0x0f
#define MA_core__pmc__otp__PMP3__audio_dither_lvl__shift 0x00
#define MA_core__pmc__otp__PMP3__audio_dither_lvl__reset 0x08
#define MA_core__pmc__otp__PMP3__audio_dither_lvl__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP3__audio_dither_lvl(o,y) ({ uint8_t __ret = o.read(127); o.write(127,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP3__audio_dither_lvl(y) ({ uint8_t __ret = ma_read_byte(127); ma_write_byte(127,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP3__audio_dither_lvl(o) (o.read(127) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP3__audio_dither_lvl() ( ma_read_byte(127) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP4__audio_dither_lvl---
// 4b.  Pre-DAC digital audio dither level. "0000" => no dither
#define MA_core__pmc__otp__PMP4__audio_dither_lvl__a 0x0084
#define MA_core__pmc__otp__PMP4__audio_dither_lvl__len 4
#define MA_core__pmc__otp__PMP4__audio_dither_lvl__mask 0x0f
#define MA_core__pmc__otp__PMP4__audio_dither_lvl__shift 0x00
#define MA_core__pmc__otp__PMP4__audio_dither_lvl__reset 0x00
#define MA_core__pmc__otp__PMP4__audio_dither_lvl__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP4__audio_dither_lvl(o,y) ({ uint8_t __ret = o.read(132); o.write(132,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP4__audio_dither_lvl(y) ({ uint8_t __ret = ma_read_byte(132); ma_write_byte(132,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP4__audio_dither_lvl(o) (o.read(132) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP4__audio_dither_lvl() ( ma_read_byte(132) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__otp__PMP5__audio_dither_lvl---
// 4b.  Pre-DAC digital audio dither level. "0000" => no dither
#define MA_core__pmc__otp__PMP5__audio_dither_lvl__a 0x0089
#define MA_core__pmc__otp__PMP5__audio_dither_lvl__len 4
#define MA_core__pmc__otp__PMP5__audio_dither_lvl__mask 0x0f
#define MA_core__pmc__otp__PMP5__audio_dither_lvl__shift 0x00
#define MA_core__pmc__otp__PMP5__audio_dither_lvl__reset 0x00
#define MA_core__pmc__otp__PMP5__audio_dither_lvl__inputonly 0
#define set_obj_MA_core__pmc__otp__PMP5__audio_dither_lvl(o,y) ({ uint8_t __ret = o.read(137); o.write(137,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__otp__PMP5__audio_dither_lvl(y) ({ uint8_t __ret = ma_read_byte(137); ma_write_byte(137,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__otp__PMP5__audio_dither_lvl(o) (o.read(137) & 0x0f)>>0
#define get_MA_core__pmc__otp__PMP5__audio_dither_lvl() ( ma_read_byte(137) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP6__audio_dither_lvl---
// 4b.  Pre-DAC digital audio dither level. "0000" => no dither
#define MA_core__pmc__reg__PMP6__audio_dither_lvl__a 0x00a1
#define MA_core__pmc__reg__PMP6__audio_dither_lvl__len 4
#define MA_core__pmc__reg__PMP6__audio_dither_lvl__mask 0x0f
#define MA_core__pmc__reg__PMP6__audio_dither_lvl__shift 0x00
#define MA_core__pmc__reg__PMP6__audio_dither_lvl__reset 0x00
#define MA_core__pmc__reg__PMP6__audio_dither_lvl__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP6__audio_dither_lvl(o,y) ({ uint8_t __ret = o.read(161); o.write(161,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__reg__PMP6__audio_dither_lvl(y) ({ uint8_t __ret = ma_read_byte(161); ma_write_byte(161,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__reg__PMP6__audio_dither_lvl(o) (o.read(161) & 0x0f)>>0
#define get_MA_core__pmc__reg__PMP6__audio_dither_lvl() ( ma_read_byte(161) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__reg__PMP7__audio_dither_lvl---
// 4b.  Pre-DAC digital audio dither level. "0000" => no dither
#define MA_core__pmc__reg__PMP7__audio_dither_lvl__a 0x00a6
#define MA_core__pmc__reg__PMP7__audio_dither_lvl__len 4
#define MA_core__pmc__reg__PMP7__audio_dither_lvl__mask 0x0f
#define MA_core__pmc__reg__PMP7__audio_dither_lvl__shift 0x00
#define MA_core__pmc__reg__PMP7__audio_dither_lvl__reset 0x00
#define MA_core__pmc__reg__PMP7__audio_dither_lvl__inputonly 0
#define set_obj_MA_core__pmc__reg__PMP7__audio_dither_lvl(o,y) ({ uint8_t __ret = o.read(166); o.write(166,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pmc__reg__PMP7__audio_dither_lvl(y) ({ uint8_t __ret = ma_read_byte(166); ma_write_byte(166,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pmc__reg__PMP7__audio_dither_lvl(o) (o.read(166) & 0x0f)>>0
#define get_MA_core__pmc__reg__PMP7__audio_dither_lvl() ( ma_read_byte(166) & 0x0f)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__0__bal_rate__a 0x0032
#define MA_core__pmc__pm_cfg__0__bal_rate__len 2
#define MA_core__pmc__pm_cfg__0__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__0__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__0__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__0__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__bal_rate(o,y) ({ uint8_t __ret = o.read(50); o.write(50,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__0__bal_rate(y) ({ uint8_t __ret = ma_read_byte(50); ma_write_byte(50,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__0__bal_rate(o) (o.read(50) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__0__bal_rate() ( ma_read_byte(50) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__0__bal_reset_dis__a 0x0032
#define MA_core__pmc__pm_cfg__0__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__0__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__0__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__0__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__0__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(50); o.write(50,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__0__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(50); ma_write_byte(50,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__0__bal_reset_dis(o) (o.read(50) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__0__bal_reset_dis() ( ma_read_byte(50) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__0__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__0__pm_spare_bit__a 0x0032
#define MA_core__pmc__pm_cfg__0__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__0__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__0__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__0__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__0__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__0__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(50); o.write(50,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__0__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(50); ma_write_byte(50,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__0__pm_spare_bit(o) (o.read(50) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__0__pm_spare_bit() ( ma_read_byte(50) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__1__bal_rate__a 0x0035
#define MA_core__pmc__pm_cfg__1__bal_rate__len 2
#define MA_core__pmc__pm_cfg__1__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__1__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__1__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__1__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__bal_rate(o,y) ({ uint8_t __ret = o.read(53); o.write(53,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__1__bal_rate(y) ({ uint8_t __ret = ma_read_byte(53); ma_write_byte(53,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__1__bal_rate(o) (o.read(53) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__1__bal_rate() ( ma_read_byte(53) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__1__bal_reset_dis__a 0x0035
#define MA_core__pmc__pm_cfg__1__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__1__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__1__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__1__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__1__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(53); o.write(53,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__1__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(53); ma_write_byte(53,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__1__bal_reset_dis(o) (o.read(53) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__1__bal_reset_dis() ( ma_read_byte(53) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__1__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__1__pm_spare_bit__a 0x0035
#define MA_core__pmc__pm_cfg__1__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__1__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__1__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__1__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__1__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__1__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(53); o.write(53,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__1__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(53); ma_write_byte(53,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__1__pm_spare_bit(o) (o.read(53) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__1__pm_spare_bit() ( ma_read_byte(53) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__2__bal_rate__a 0x0038
#define MA_core__pmc__pm_cfg__2__bal_rate__len 2
#define MA_core__pmc__pm_cfg__2__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__2__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__2__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__2__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__bal_rate(o,y) ({ uint8_t __ret = o.read(56); o.write(56,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__2__bal_rate(y) ({ uint8_t __ret = ma_read_byte(56); ma_write_byte(56,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__2__bal_rate(o) (o.read(56) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__2__bal_rate() ( ma_read_byte(56) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__2__bal_reset_dis__a 0x0038
#define MA_core__pmc__pm_cfg__2__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__2__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__2__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__2__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__2__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(56); o.write(56,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__2__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(56); ma_write_byte(56,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__2__bal_reset_dis(o) (o.read(56) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__2__bal_reset_dis() ( ma_read_byte(56) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__2__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__2__pm_spare_bit__a 0x0038
#define MA_core__pmc__pm_cfg__2__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__2__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__2__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__2__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__2__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__2__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(56); o.write(56,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__2__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(56); ma_write_byte(56,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__2__pm_spare_bit(o) (o.read(56) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__2__pm_spare_bit() ( ma_read_byte(56) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__3__bal_rate__a 0x003b
#define MA_core__pmc__pm_cfg__3__bal_rate__len 2
#define MA_core__pmc__pm_cfg__3__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__3__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__3__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__3__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__bal_rate(o,y) ({ uint8_t __ret = o.read(59); o.write(59,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__3__bal_rate(y) ({ uint8_t __ret = ma_read_byte(59); ma_write_byte(59,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__3__bal_rate(o) (o.read(59) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__3__bal_rate() ( ma_read_byte(59) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__3__bal_reset_dis__a 0x003b
#define MA_core__pmc__pm_cfg__3__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__3__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__3__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__3__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__3__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(59); o.write(59,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__3__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(59); ma_write_byte(59,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__3__bal_reset_dis(o) (o.read(59) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__3__bal_reset_dis() ( ma_read_byte(59) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__3__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__3__pm_spare_bit__a 0x003b
#define MA_core__pmc__pm_cfg__3__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__3__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__3__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__3__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__3__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__3__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(59); o.write(59,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__3__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(59); ma_write_byte(59,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__3__pm_spare_bit(o) (o.read(59) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__3__pm_spare_bit() ( ma_read_byte(59) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__4__bal_rate__a 0x003e
#define MA_core__pmc__pm_cfg__4__bal_rate__len 2
#define MA_core__pmc__pm_cfg__4__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__4__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__4__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__4__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__bal_rate(o,y) ({ uint8_t __ret = o.read(62); o.write(62,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__4__bal_rate(y) ({ uint8_t __ret = ma_read_byte(62); ma_write_byte(62,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__4__bal_rate(o) (o.read(62) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__4__bal_rate() ( ma_read_byte(62) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__4__bal_reset_dis__a 0x003e
#define MA_core__pmc__pm_cfg__4__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__4__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__4__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__4__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__4__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(62); o.write(62,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__4__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(62); ma_write_byte(62,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__4__bal_reset_dis(o) (o.read(62) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__4__bal_reset_dis() ( ma_read_byte(62) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__4__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__4__pm_spare_bit__a 0x003e
#define MA_core__pmc__pm_cfg__4__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__4__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__4__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__4__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__4__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__4__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(62); o.write(62,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__4__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(62); ma_write_byte(62,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__4__pm_spare_bit(o) (o.read(62) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__4__pm_spare_bit() ( ma_read_byte(62) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__5__bal_rate__a 0x0041
#define MA_core__pmc__pm_cfg__5__bal_rate__len 2
#define MA_core__pmc__pm_cfg__5__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__5__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__5__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__5__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__bal_rate(o,y) ({ uint8_t __ret = o.read(65); o.write(65,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__5__bal_rate(y) ({ uint8_t __ret = ma_read_byte(65); ma_write_byte(65,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__5__bal_rate(o) (o.read(65) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__5__bal_rate() ( ma_read_byte(65) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__5__bal_reset_dis__a 0x0041
#define MA_core__pmc__pm_cfg__5__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__5__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__5__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__5__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__5__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(65); o.write(65,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__5__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(65); ma_write_byte(65,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__5__bal_reset_dis(o) (o.read(65) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__5__bal_reset_dis() ( ma_read_byte(65) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__5__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__5__pm_spare_bit__a 0x0041
#define MA_core__pmc__pm_cfg__5__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__5__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__5__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__5__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__5__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__5__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(65); o.write(65,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__5__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(65); ma_write_byte(65,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__5__pm_spare_bit(o) (o.read(65) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__5__pm_spare_bit() ( ma_read_byte(65) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__6__bal_rate__a 0x0044
#define MA_core__pmc__pm_cfg__6__bal_rate__len 2
#define MA_core__pmc__pm_cfg__6__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__6__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__6__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__6__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__bal_rate(o,y) ({ uint8_t __ret = o.read(68); o.write(68,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__6__bal_rate(y) ({ uint8_t __ret = ma_read_byte(68); ma_write_byte(68,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__6__bal_rate(o) (o.read(68) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__6__bal_rate() ( ma_read_byte(68) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__6__bal_reset_dis__a 0x0044
#define MA_core__pmc__pm_cfg__6__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__6__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__6__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__6__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__6__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(68); o.write(68,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__6__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(68); ma_write_byte(68,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__6__bal_reset_dis(o) (o.read(68) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__6__bal_reset_dis() ( ma_read_byte(68) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__6__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__6__pm_spare_bit__a 0x0044
#define MA_core__pmc__pm_cfg__6__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__6__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__6__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__6__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__6__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__6__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(68); o.write(68,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__6__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(68); ma_write_byte(68,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__6__pm_spare_bit(o) (o.read(68) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__6__pm_spare_bit() ( ma_read_byte(68) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__7__bal_rate__a 0x0047
#define MA_core__pmc__pm_cfg__7__bal_rate__len 2
#define MA_core__pmc__pm_cfg__7__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__7__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__7__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__7__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__bal_rate(o,y) ({ uint8_t __ret = o.read(71); o.write(71,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__7__bal_rate(y) ({ uint8_t __ret = ma_read_byte(71); ma_write_byte(71,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__7__bal_rate(o) (o.read(71) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__7__bal_rate() ( ma_read_byte(71) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__7__bal_reset_dis__a 0x0047
#define MA_core__pmc__pm_cfg__7__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__7__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__7__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__7__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__7__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(71); o.write(71,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__7__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(71); ma_write_byte(71,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__7__bal_reset_dis(o) (o.read(71) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__7__bal_reset_dis() ( ma_read_byte(71) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__7__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__7__pm_spare_bit__a 0x0047
#define MA_core__pmc__pm_cfg__7__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__7__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__7__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__7__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__7__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__7__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(71); o.write(71,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__7__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(71); ma_write_byte(71,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__7__pm_spare_bit(o) (o.read(71) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__7__pm_spare_bit() ( ma_read_byte(71) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__8__bal_rate__a 0x004a
#define MA_core__pmc__pm_cfg__8__bal_rate__len 2
#define MA_core__pmc__pm_cfg__8__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__8__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__8__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__8__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__bal_rate(o,y) ({ uint8_t __ret = o.read(74); o.write(74,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__8__bal_rate(y) ({ uint8_t __ret = ma_read_byte(74); ma_write_byte(74,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__8__bal_rate(o) (o.read(74) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__8__bal_rate() ( ma_read_byte(74) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__8__bal_reset_dis__a 0x004a
#define MA_core__pmc__pm_cfg__8__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__8__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__8__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__8__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__8__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(74); o.write(74,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__8__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(74); ma_write_byte(74,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__8__bal_reset_dis(o) (o.read(74) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__8__bal_reset_dis() ( ma_read_byte(74) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__8__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__8__pm_spare_bit__a 0x004a
#define MA_core__pmc__pm_cfg__8__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__8__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__8__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__8__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__8__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__8__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(74); o.write(74,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__8__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(74); ma_write_byte(74,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__8__pm_spare_bit(o) (o.read(74) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__8__pm_spare_bit() ( ma_read_byte(74) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__9__bal_rate__a 0x004d
#define MA_core__pmc__pm_cfg__9__bal_rate__len 2
#define MA_core__pmc__pm_cfg__9__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__9__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__9__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__9__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__bal_rate(o,y) ({ uint8_t __ret = o.read(77); o.write(77,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__9__bal_rate(y) ({ uint8_t __ret = ma_read_byte(77); ma_write_byte(77,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__9__bal_rate(o) (o.read(77) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__9__bal_rate() ( ma_read_byte(77) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__9__bal_reset_dis__a 0x004d
#define MA_core__pmc__pm_cfg__9__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__9__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__9__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__9__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__9__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(77); o.write(77,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__9__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(77); ma_write_byte(77,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__9__bal_reset_dis(o) (o.read(77) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__9__bal_reset_dis() ( ma_read_byte(77) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__9__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__9__pm_spare_bit__a 0x004d
#define MA_core__pmc__pm_cfg__9__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__9__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__9__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__9__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__9__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__9__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(77); o.write(77,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__9__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(77); ma_write_byte(77,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__9__pm_spare_bit(o) (o.read(77) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__9__pm_spare_bit() ( ma_read_byte(77) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__10__bal_rate__a 0x0050
#define MA_core__pmc__pm_cfg__10__bal_rate__len 2
#define MA_core__pmc__pm_cfg__10__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__10__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__10__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__10__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__bal_rate(o,y) ({ uint8_t __ret = o.read(80); o.write(80,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__10__bal_rate(y) ({ uint8_t __ret = ma_read_byte(80); ma_write_byte(80,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__10__bal_rate(o) (o.read(80) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__10__bal_rate() ( ma_read_byte(80) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__10__bal_reset_dis__a 0x0050
#define MA_core__pmc__pm_cfg__10__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__10__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__10__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__10__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__10__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(80); o.write(80,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__10__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(80); ma_write_byte(80,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__10__bal_reset_dis(o) (o.read(80) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__10__bal_reset_dis() ( ma_read_byte(80) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__10__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__10__pm_spare_bit__a 0x0050
#define MA_core__pmc__pm_cfg__10__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__10__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__10__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__10__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__10__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__10__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(80); o.write(80,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__10__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(80); ma_write_byte(80,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__10__pm_spare_bit(o) (o.read(80) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__10__pm_spare_bit() ( ma_read_byte(80) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__11__bal_rate__a 0x0053
#define MA_core__pmc__pm_cfg__11__bal_rate__len 2
#define MA_core__pmc__pm_cfg__11__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__11__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__11__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__11__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__bal_rate(o,y) ({ uint8_t __ret = o.read(83); o.write(83,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__11__bal_rate(y) ({ uint8_t __ret = ma_read_byte(83); ma_write_byte(83,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__11__bal_rate(o) (o.read(83) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__11__bal_rate() ( ma_read_byte(83) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__11__bal_reset_dis__a 0x0053
#define MA_core__pmc__pm_cfg__11__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__11__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__11__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__11__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__11__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(83); o.write(83,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__11__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(83); ma_write_byte(83,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__11__bal_reset_dis(o) (o.read(83) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__11__bal_reset_dis() ( ma_read_byte(83) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__11__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__11__pm_spare_bit__a 0x0053
#define MA_core__pmc__pm_cfg__11__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__11__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__11__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__11__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__11__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__11__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(83); o.write(83,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__11__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(83); ma_write_byte(83,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__11__pm_spare_bit(o) (o.read(83) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__11__pm_spare_bit() ( ma_read_byte(83) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__12__bal_rate__a 0x0056
#define MA_core__pmc__pm_cfg__12__bal_rate__len 2
#define MA_core__pmc__pm_cfg__12__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__12__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__12__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__12__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__bal_rate(o,y) ({ uint8_t __ret = o.read(86); o.write(86,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__12__bal_rate(y) ({ uint8_t __ret = ma_read_byte(86); ma_write_byte(86,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__12__bal_rate(o) (o.read(86) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__12__bal_rate() ( ma_read_byte(86) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__12__bal_reset_dis__a 0x0056
#define MA_core__pmc__pm_cfg__12__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__12__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__12__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__12__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__12__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(86); o.write(86,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__12__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(86); ma_write_byte(86,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__12__bal_reset_dis(o) (o.read(86) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__12__bal_reset_dis() ( ma_read_byte(86) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__12__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__12__pm_spare_bit__a 0x0056
#define MA_core__pmc__pm_cfg__12__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__12__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__12__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__12__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__12__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__12__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(86); o.write(86,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__12__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(86); ma_write_byte(86,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__12__pm_spare_bit(o) (o.read(86) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__12__pm_spare_bit() ( ma_read_byte(86) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__13__bal_rate__a 0x0059
#define MA_core__pmc__pm_cfg__13__bal_rate__len 2
#define MA_core__pmc__pm_cfg__13__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__13__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__13__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__13__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__bal_rate(o,y) ({ uint8_t __ret = o.read(89); o.write(89,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__13__bal_rate(y) ({ uint8_t __ret = ma_read_byte(89); ma_write_byte(89,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__13__bal_rate(o) (o.read(89) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__13__bal_rate() ( ma_read_byte(89) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__13__bal_reset_dis__a 0x0059
#define MA_core__pmc__pm_cfg__13__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__13__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__13__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__13__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__13__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(89); o.write(89,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__13__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(89); ma_write_byte(89,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__13__bal_reset_dis(o) (o.read(89) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__13__bal_reset_dis() ( ma_read_byte(89) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__13__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__13__pm_spare_bit__a 0x0059
#define MA_core__pmc__pm_cfg__13__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__13__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__13__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__13__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__13__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__13__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(89); o.write(89,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__13__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(89); ma_write_byte(89,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__13__pm_spare_bit(o) (o.read(89) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__13__pm_spare_bit() ( ma_read_byte(89) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__14__bal_rate__a 0x005c
#define MA_core__pmc__pm_cfg__14__bal_rate__len 2
#define MA_core__pmc__pm_cfg__14__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__14__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__14__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__14__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__bal_rate(o,y) ({ uint8_t __ret = o.read(92); o.write(92,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__14__bal_rate(y) ({ uint8_t __ret = ma_read_byte(92); ma_write_byte(92,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__14__bal_rate(o) (o.read(92) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__14__bal_rate() ( ma_read_byte(92) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__14__bal_reset_dis__a 0x005c
#define MA_core__pmc__pm_cfg__14__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__14__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__14__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__14__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__14__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(92); o.write(92,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__14__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(92); ma_write_byte(92,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__14__bal_reset_dis(o) (o.read(92) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__14__bal_reset_dis() ( ma_read_byte(92) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__14__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__14__pm_spare_bit__a 0x005c
#define MA_core__pmc__pm_cfg__14__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__14__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__14__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__14__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__14__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__14__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(92); o.write(92,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__14__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(92); ma_write_byte(92,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__14__pm_spare_bit(o) (o.read(92) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__14__pm_spare_bit() ( ma_read_byte(92) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__15__bal_rate__a 0x005f
#define MA_core__pmc__pm_cfg__15__bal_rate__len 2
#define MA_core__pmc__pm_cfg__15__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__15__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__15__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__15__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__bal_rate(o,y) ({ uint8_t __ret = o.read(95); o.write(95,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__15__bal_rate(y) ({ uint8_t __ret = ma_read_byte(95); ma_write_byte(95,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__15__bal_rate(o) (o.read(95) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__15__bal_rate() ( ma_read_byte(95) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__15__bal_reset_dis__a 0x005f
#define MA_core__pmc__pm_cfg__15__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__15__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__15__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__15__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__15__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(95); o.write(95,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__15__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(95); ma_write_byte(95,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__15__bal_reset_dis(o) (o.read(95) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__15__bal_reset_dis() ( ma_read_byte(95) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__15__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__15__pm_spare_bit__a 0x005f
#define MA_core__pmc__pm_cfg__15__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__15__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__15__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__15__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__15__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__15__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(95); o.write(95,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__15__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(95); ma_write_byte(95,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__15__pm_spare_bit(o) (o.read(95) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__15__pm_spare_bit() ( ma_read_byte(95) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__16__bal_rate__a 0x0062
#define MA_core__pmc__pm_cfg__16__bal_rate__len 2
#define MA_core__pmc__pm_cfg__16__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__16__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__16__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__16__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__bal_rate(o,y) ({ uint8_t __ret = o.read(98); o.write(98,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__16__bal_rate(y) ({ uint8_t __ret = ma_read_byte(98); ma_write_byte(98,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__16__bal_rate(o) (o.read(98) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__16__bal_rate() ( ma_read_byte(98) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__16__bal_reset_dis__a 0x0062
#define MA_core__pmc__pm_cfg__16__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__16__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__16__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__16__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__16__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(98); o.write(98,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__16__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(98); ma_write_byte(98,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__16__bal_reset_dis(o) (o.read(98) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__16__bal_reset_dis() ( ma_read_byte(98) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__16__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__16__pm_spare_bit__a 0x0062
#define MA_core__pmc__pm_cfg__16__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__16__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__16__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__16__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__16__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__16__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(98); o.write(98,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__16__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(98); ma_write_byte(98,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__16__pm_spare_bit(o) (o.read(98) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__16__pm_spare_bit() ( ma_read_byte(98) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__17__bal_rate__a 0x0065
#define MA_core__pmc__pm_cfg__17__bal_rate__len 2
#define MA_core__pmc__pm_cfg__17__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__17__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__17__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__17__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__bal_rate(o,y) ({ uint8_t __ret = o.read(101); o.write(101,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__17__bal_rate(y) ({ uint8_t __ret = ma_read_byte(101); ma_write_byte(101,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__17__bal_rate(o) (o.read(101) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__17__bal_rate() ( ma_read_byte(101) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__17__bal_reset_dis__a 0x0065
#define MA_core__pmc__pm_cfg__17__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__17__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__17__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__17__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__17__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(101); o.write(101,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__17__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(101); ma_write_byte(101,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__17__bal_reset_dis(o) (o.read(101) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__17__bal_reset_dis() ( ma_read_byte(101) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__17__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__17__pm_spare_bit__a 0x0065
#define MA_core__pmc__pm_cfg__17__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__17__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__17__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__17__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__17__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__17__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(101); o.write(101,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__17__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(101); ma_write_byte(101,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__17__pm_spare_bit(o) (o.read(101) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__17__pm_spare_bit() ( ma_read_byte(101) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__18__bal_rate__a 0x0068
#define MA_core__pmc__pm_cfg__18__bal_rate__len 2
#define MA_core__pmc__pm_cfg__18__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__18__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__18__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__18__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__bal_rate(o,y) ({ uint8_t __ret = o.read(104); o.write(104,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__18__bal_rate(y) ({ uint8_t __ret = ma_read_byte(104); ma_write_byte(104,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__18__bal_rate(o) (o.read(104) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__18__bal_rate() ( ma_read_byte(104) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__18__bal_reset_dis__a 0x0068
#define MA_core__pmc__pm_cfg__18__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__18__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__18__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__18__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__18__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(104); o.write(104,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__18__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(104); ma_write_byte(104,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__18__bal_reset_dis(o) (o.read(104) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__18__bal_reset_dis() ( ma_read_byte(104) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__18__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__18__pm_spare_bit__a 0x0068
#define MA_core__pmc__pm_cfg__18__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__18__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__18__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__18__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__18__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__18__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(104); o.write(104,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__18__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(104); ma_write_byte(104,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__18__pm_spare_bit(o) (o.read(104) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__18__pm_spare_bit() ( ma_read_byte(104) & 0x08)>>3
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__bal_rate---
// Vcfly balancing event rate for duty cycled control. "11" => always, "10" => 128kHz, "01" => 64kHz, "00" => 32kHz
#define MA_core__pmc__pm_cfg__19__bal_rate__a 0x006b
#define MA_core__pmc__pm_cfg__19__bal_rate__len 2
#define MA_core__pmc__pm_cfg__19__bal_rate__mask 0x03
#define MA_core__pmc__pm_cfg__19__bal_rate__shift 0x00
#define MA_core__pmc__pm_cfg__19__bal_rate__reset 0x00
#define MA_core__pmc__pm_cfg__19__bal_rate__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__bal_rate(o,y) ({ uint8_t __ret = o.read(107); o.write(107,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pmc__pm_cfg__19__bal_rate(y) ({ uint8_t __ret = ma_read_byte(107); ma_write_byte(107,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pmc__pm_cfg__19__bal_rate(o) (o.read(107) & 0x03)>>0
#define get_MA_core__pmc__pm_cfg__19__bal_rate() ( ma_read_byte(107) & 0x03)>>0
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__bal_reset_dis---
// Experimental Vcfly balancing HW reset-phase usage control. Default (per analog design) = '1'.
#define MA_core__pmc__pm_cfg__19__bal_reset_dis__a 0x006b
#define MA_core__pmc__pm_cfg__19__bal_reset_dis__len 1
#define MA_core__pmc__pm_cfg__19__bal_reset_dis__mask 0x04
#define MA_core__pmc__pm_cfg__19__bal_reset_dis__shift 0x02
#define MA_core__pmc__pm_cfg__19__bal_reset_dis__reset 0x00
#define MA_core__pmc__pm_cfg__19__bal_reset_dis__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__bal_reset_dis(o,y) ({ uint8_t __ret = o.read(107); o.write(107,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pmc__pm_cfg__19__bal_reset_dis(y) ({ uint8_t __ret = ma_read_byte(107); ma_write_byte(107,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pmc__pm_cfg__19__bal_reset_dis(o) (o.read(107) & 0x04)>>2
#define get_MA_core__pmc__pm_cfg__19__bal_reset_dis() ( ma_read_byte(107) & 0x04)>>2
//------------------------------------------------------------------------------core__pmc__pm_cfg__19__pm_spare_bit---
// Single bit for experiemental setting
#define MA_core__pmc__pm_cfg__19__pm_spare_bit__a 0x006b
#define MA_core__pmc__pm_cfg__19__pm_spare_bit__len 1
#define MA_core__pmc__pm_cfg__19__pm_spare_bit__mask 0x08
#define MA_core__pmc__pm_cfg__19__pm_spare_bit__shift 0x03
#define MA_core__pmc__pm_cfg__19__pm_spare_bit__reset 0x00
#define MA_core__pmc__pm_cfg__19__pm_spare_bit__inputonly 0
#define set_obj_MA_core__pmc__pm_cfg__19__pm_spare_bit(o,y) ({ uint8_t __ret = o.read(107); o.write(107,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pmc__pm_cfg__19__pm_spare_bit(y) ({ uint8_t __ret = ma_read_byte(107); ma_write_byte(107,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pmc__pm_cfg__19__pm_spare_bit(o) (o.read(107) & 0x08)>>3
#define get_MA_core__pmc__pm_cfg__19__pm_spare_bit() ( ma_read_byte(107) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__otp__gd_ocp_ithr---
// Power stage over-current protection limit level setting
#define MA_core__prot_sys__otp__gd_ocp_ithr__a 0x00c0
#define MA_core__prot_sys__otp__gd_ocp_ithr__len 4
#define MA_core__prot_sys__otp__gd_ocp_ithr__mask 0x1e
#define MA_core__prot_sys__otp__gd_ocp_ithr__shift 0x01
#define MA_core__prot_sys__otp__gd_ocp_ithr__reset 0x0b
#define MA_core__prot_sys__otp__gd_ocp_ithr__inputonly 0
#define set_obj_MA_core__prot_sys__otp__gd_ocp_ithr(o,y) ({ uint8_t __ret = o.read(192); o.write(192,(__ret&0xe1)|((y<<1)&0x1e)); })
#define set_MA_core__prot_sys__otp__gd_ocp_ithr(y) ({ uint8_t __ret = ma_read_byte(192); ma_write_byte(192,(__ret&0xe1)|((y<<1)&0x1e)); })
#define get_obj_MA_core__prot_sys__otp__gd_ocp_ithr(o) (o.read(192) & 0x1e)>>1
#define get_MA_core__prot_sys__otp__gd_ocp_ithr() ( ma_read_byte(192) & 0x1e)>>1
//------------------------------------------------------------------------------core__prot_sys__otp__ocp_sev_tbase---
// Time base for severe-OCP scanner
#define MA_core__prot_sys__otp__ocp_sev_tbase__a 0x00c0
#define MA_core__prot_sys__otp__ocp_sev_tbase__len 3
#define MA_core__prot_sys__otp__ocp_sev_tbase__mask 0xe0
#define MA_core__prot_sys__otp__ocp_sev_tbase__shift 0x05
#define MA_core__prot_sys__otp__ocp_sev_tbase__reset 0x04
#define MA_core__prot_sys__otp__ocp_sev_tbase__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ocp_sev_tbase(o,y) ({ uint8_t __ret = o.read(192); o.write(192,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__prot_sys__otp__ocp_sev_tbase(y) ({ uint8_t __ret = ma_read_byte(192); ma_write_byte(192,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__prot_sys__otp__ocp_sev_tbase(o) (o.read(192) & 0xe0)>>5
#define get_MA_core__prot_sys__otp__ocp_sev_tbase() ( ma_read_byte(192) & 0xe0)>>5
//------------------------------------------------------------------------------core__prot_sys__otp__ocp_sev_thr---
// Counting limit for severe-OCP event generator
#define MA_core__prot_sys__otp__ocp_sev_thr__a 0x00c1
#define MA_core__prot_sys__otp__ocp_sev_thr__len 8
#define MA_core__prot_sys__otp__ocp_sev_thr__mask 0xff
#define MA_core__prot_sys__otp__ocp_sev_thr__shift 0x00
#define MA_core__prot_sys__otp__ocp_sev_thr__reset 0x20
#define MA_core__prot_sys__otp__ocp_sev_thr__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ocp_sev_thr(o,y) o.write(193,y);
#define set_MA_core__prot_sys__otp__ocp_sev_thr(y) ma_write_byte(193,y);
#define get_obj_MA_core__prot_sys__otp__ocp_sev_thr(o) (o.read(193) & 0xff)>>0
#define get_MA_core__prot_sys__otp__ocp_sev_thr() ( ma_read_byte(193) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__ocp_sev_dec_rate---
// Zero-event count per severe-OCP counter decrement step.:
#define MA_core__prot_sys__otp__ocp_sev_dec_rate__a 0x00c2
#define MA_core__prot_sys__otp__ocp_sev_dec_rate__len 4
#define MA_core__prot_sys__otp__ocp_sev_dec_rate__mask 0x0f
#define MA_core__prot_sys__otp__ocp_sev_dec_rate__shift 0x00
#define MA_core__prot_sys__otp__ocp_sev_dec_rate__reset 0x08
#define MA_core__prot_sys__otp__ocp_sev_dec_rate__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ocp_sev_dec_rate(o,y) ({ uint8_t __ret = o.read(194); o.write(194,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__prot_sys__otp__ocp_sev_dec_rate(y) ({ uint8_t __ret = ma_read_byte(194); ma_write_byte(194,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__prot_sys__otp__ocp_sev_dec_rate(o) (o.read(194) & 0x0f)>>0
#define get_MA_core__prot_sys__otp__ocp_sev_dec_rate() ( ma_read_byte(194) & 0x0f)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__clip_sev_tbase---
// Time base for severe-clip ("stuck") scanner
#define MA_core__prot_sys__otp__clip_sev_tbase__a 0x00c3
#define MA_core__prot_sys__otp__clip_sev_tbase__len 3
#define MA_core__prot_sys__otp__clip_sev_tbase__mask 0x07
#define MA_core__prot_sys__otp__clip_sev_tbase__shift 0x00
#define MA_core__prot_sys__otp__clip_sev_tbase__reset 0x04
#define MA_core__prot_sys__otp__clip_sev_tbase__inputonly 0
#define set_obj_MA_core__prot_sys__otp__clip_sev_tbase(o,y) ({ uint8_t __ret = o.read(195); o.write(195,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__prot_sys__otp__clip_sev_tbase(y) ({ uint8_t __ret = ma_read_byte(195); ma_write_byte(195,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__prot_sys__otp__clip_sev_tbase(o) (o.read(195) & 0x07)>>0
#define get_MA_core__prot_sys__otp__clip_sev_tbase() ( ma_read_byte(195) & 0x07)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__clip_sev_dec_rate---
// Zero-event counts per severe-clip counter decrement step.
#define MA_core__prot_sys__otp__clip_sev_dec_rate__a 0x00c3
#define MA_core__prot_sys__otp__clip_sev_dec_rate__len 4
#define MA_core__prot_sys__otp__clip_sev_dec_rate__mask 0x78
#define MA_core__prot_sys__otp__clip_sev_dec_rate__shift 0x03
#define MA_core__prot_sys__otp__clip_sev_dec_rate__reset 0x01
#define MA_core__prot_sys__otp__clip_sev_dec_rate__inputonly 0
#define set_obj_MA_core__prot_sys__otp__clip_sev_dec_rate(o,y) ({ uint8_t __ret = o.read(195); o.write(195,(__ret&0x87)|((y<<3)&0x78)); })
#define set_MA_core__prot_sys__otp__clip_sev_dec_rate(y) ({ uint8_t __ret = ma_read_byte(195); ma_write_byte(195,(__ret&0x87)|((y<<3)&0x78)); })
#define get_obj_MA_core__prot_sys__otp__clip_sev_dec_rate(o) (o.read(195) & 0x78)>>3
#define get_MA_core__prot_sys__otp__clip_sev_dec_rate() ( ma_read_byte(195) & 0x78)>>3
//------------------------------------------------------------------------------core__prot_sys__otp__clip_sev_thr---
// Counting limit for severe-clip event generator
#define MA_core__prot_sys__otp__clip_sev_thr__a 0x00c4
#define MA_core__prot_sys__otp__clip_sev_thr__len 8
#define MA_core__prot_sys__otp__clip_sev_thr__mask 0xff
#define MA_core__prot_sys__otp__clip_sev_thr__shift 0x00
#define MA_core__prot_sys__otp__clip_sev_thr__reset 0x20
#define MA_core__prot_sys__otp__clip_sev_thr__inputonly 0
#define set_obj_MA_core__prot_sys__otp__clip_sev_thr(o,y) o.write(196,y);
#define set_MA_core__prot_sys__otp__clip_sev_thr(y) ma_write_byte(196,y);
#define get_obj_MA_core__prot_sys__otp__clip_sev_thr(o) (o.read(196) & 0xff)>>0
#define get_MA_core__prot_sys__otp__clip_sev_thr() ( ma_read_byte(196) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__ote_thr__0---
// Overtemperature error threshold (ADC output referred)
#define MA_core__prot_sys__otp__ote_thr__0__a 0x00c5
#define MA_core__prot_sys__otp__ote_thr__0__len 8
#define MA_core__prot_sys__otp__ote_thr__0__mask 0xff
#define MA_core__prot_sys__otp__ote_thr__0__shift 0x00
#define MA_core__prot_sys__otp__ote_thr__0__reset 0x00
#define MA_core__prot_sys__otp__ote_thr__0__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ote_thr__0(o,y) o.write(197,y);
#define set_MA_core__prot_sys__otp__ote_thr__0(y) ma_write_byte(197,y);
#define get_obj_MA_core__prot_sys__otp__ote_thr__0(o) (o.read(197) & 0xff)>>0
#define get_MA_core__prot_sys__otp__ote_thr__0() ( ma_read_byte(197) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__ote_thr__1---
// Overtemperature error threshold (ADC output referred)
#define MA_core__prot_sys__otp__ote_thr__1__a 0x00c6
#define MA_core__prot_sys__otp__ote_thr__1__len 8
#define MA_core__prot_sys__otp__ote_thr__1__mask 0xff
#define MA_core__prot_sys__otp__ote_thr__1__shift 0x00
#define MA_core__prot_sys__otp__ote_thr__1__reset 0x3f
#define MA_core__prot_sys__otp__ote_thr__1__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ote_thr__1(o,y) o.write(198,y);
#define set_MA_core__prot_sys__otp__ote_thr__1(y) ma_write_byte(198,y);
#define get_obj_MA_core__prot_sys__otp__ote_thr__1(o) (o.read(198) & 0xff)>>0
#define get_MA_core__prot_sys__otp__ote_thr__1() ( ma_read_byte(198) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__otw_thr__0---
// Overtemperature warning threshold (ADC output referred)
#define MA_core__prot_sys__otp__otw_thr__0__a 0x00c7
#define MA_core__prot_sys__otp__otw_thr__0__len 8
#define MA_core__prot_sys__otp__otw_thr__0__mask 0xff
#define MA_core__prot_sys__otp__otw_thr__0__shift 0x00
#define MA_core__prot_sys__otp__otw_thr__0__reset 0x00
#define MA_core__prot_sys__otp__otw_thr__0__inputonly 0
#define set_obj_MA_core__prot_sys__otp__otw_thr__0(o,y) o.write(199,y);
#define set_MA_core__prot_sys__otp__otw_thr__0(y) ma_write_byte(199,y);
#define get_obj_MA_core__prot_sys__otp__otw_thr__0(o) (o.read(199) & 0xff)>>0
#define get_MA_core__prot_sys__otp__otw_thr__0() ( ma_read_byte(199) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__otw_thr__1---
// Overtemperature warning threshold (ADC output referred)
#define MA_core__prot_sys__otp__otw_thr__1__a 0x00c8
#define MA_core__prot_sys__otp__otw_thr__1__len 8
#define MA_core__prot_sys__otp__otw_thr__1__mask 0xff
#define MA_core__prot_sys__otp__otw_thr__1__shift 0x00
#define MA_core__prot_sys__otp__otw_thr__1__reset 0x3b
#define MA_core__prot_sys__otp__otw_thr__1__inputonly 0
#define set_obj_MA_core__prot_sys__otp__otw_thr__1(o,y) o.write(200,y);
#define set_MA_core__prot_sys__otp__otw_thr__1(y) ma_write_byte(200,y);
#define get_obj_MA_core__prot_sys__otp__otw_thr__1(o) (o.read(200) & 0xff)>>0
#define get_MA_core__prot_sys__otp__otw_thr__1() ( ma_read_byte(200) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__ote_thr_c---
// Overtemperature error threshold (in degrees C)
#define MA_core__prot_sys__otp__ote_thr_c__a 0x00c9
#define MA_core__prot_sys__otp__ote_thr_c__len 8
#define MA_core__prot_sys__otp__ote_thr_c__mask 0xff
#define MA_core__prot_sys__otp__ote_thr_c__shift 0x00
#define MA_core__prot_sys__otp__ote_thr_c__reset 0x7d
#define MA_core__prot_sys__otp__ote_thr_c__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ote_thr_c(o,y) o.write(201,y);
#define set_MA_core__prot_sys__otp__ote_thr_c(y) ma_write_byte(201,y);
#define get_obj_MA_core__prot_sys__otp__ote_thr_c(o) (o.read(201) & 0xff)>>0
#define get_MA_core__prot_sys__otp__ote_thr_c() ( ma_read_byte(201) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__otw_thr_c---
// Overtemperature warning threshold (in degrees C)
#define MA_core__prot_sys__otp__otw_thr_c__a 0x00ca
#define MA_core__prot_sys__otp__otw_thr_c__len 8
#define MA_core__prot_sys__otp__otw_thr_c__mask 0xff
#define MA_core__prot_sys__otp__otw_thr_c__shift 0x00
#define MA_core__prot_sys__otp__otw_thr_c__reset 0x73
#define MA_core__prot_sys__otp__otw_thr_c__inputonly 0
#define set_obj_MA_core__prot_sys__otp__otw_thr_c(o,y) o.write(202,y);
#define set_MA_core__prot_sys__otp__otw_thr_c(y) ma_write_byte(202,y);
#define get_obj_MA_core__prot_sys__otp__otw_thr_c(o) (o.read(202) & 0xff)>>0
#define get_MA_core__prot_sys__otp__otw_thr_c() ( ma_read_byte(202) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__ot_thr_hyst__0---
// Overtemperature wanrning and error hysteresis
#define MA_core__prot_sys__otp__ot_thr_hyst__0__a 0x00cb
#define MA_core__prot_sys__otp__ot_thr_hyst__0__len 8
#define MA_core__prot_sys__otp__ot_thr_hyst__0__mask 0xff
#define MA_core__prot_sys__otp__ot_thr_hyst__0__shift 0x00
#define MA_core__prot_sys__otp__ot_thr_hyst__0__reset 0x40
#define MA_core__prot_sys__otp__ot_thr_hyst__0__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ot_thr_hyst__0(o,y) o.write(203,y);
#define set_MA_core__prot_sys__otp__ot_thr_hyst__0(y) ma_write_byte(203,y);
#define get_obj_MA_core__prot_sys__otp__ot_thr_hyst__0(o) (o.read(203) & 0xff)>>0
#define get_MA_core__prot_sys__otp__ot_thr_hyst__0() ( ma_read_byte(203) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__ot_thr_hyst__1---
// Overtemperature wanrning and error hysteresis
#define MA_core__prot_sys__otp__ot_thr_hyst__1__a 0x00cc
#define MA_core__prot_sys__otp__ot_thr_hyst__1__len 8
#define MA_core__prot_sys__otp__ot_thr_hyst__1__mask 0xff
#define MA_core__prot_sys__otp__ot_thr_hyst__1__shift 0x00
#define MA_core__prot_sys__otp__ot_thr_hyst__1__reset 0x00
#define MA_core__prot_sys__otp__ot_thr_hyst__1__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ot_thr_hyst__1(o,y) o.write(204,y);
#define set_MA_core__prot_sys__otp__ot_thr_hyst__1(y) ma_write_byte(204,y);
#define get_obj_MA_core__prot_sys__otp__ot_thr_hyst__1(o) (o.read(204) & 0xff)>>0
#define get_MA_core__prot_sys__otp__ot_thr_hyst__1() ( ma_read_byte(204) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__clip_countThr---
// "Clip stuck" protection count threshold (10ms per step)
#define MA_core__prot_sys__otp__clip_countThr__a 0x00cd
#define MA_core__prot_sys__otp__clip_countThr__len 4
#define MA_core__prot_sys__otp__clip_countThr__mask 0x0f
#define MA_core__prot_sys__otp__clip_countThr__shift 0x00
#define MA_core__prot_sys__otp__clip_countThr__reset 0x03
#define MA_core__prot_sys__otp__clip_countThr__inputonly 0
#define set_obj_MA_core__prot_sys__otp__clip_countThr(o,y) ({ uint8_t __ret = o.read(205); o.write(205,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__prot_sys__otp__clip_countThr(y) ({ uint8_t __ret = ma_read_byte(205); ma_write_byte(205,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__prot_sys__otp__clip_countThr(o) (o.read(205) & 0x0f)>>0
#define get_MA_core__prot_sys__otp__clip_countThr() ( ma_read_byte(205) & 0x0f)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__Pvdd_low_thr__0---
// Low-Pvdd warning treshold (ADC output referred)
#define MA_core__prot_sys__otp__Pvdd_low_thr__0__a 0x00ce
#define MA_core__prot_sys__otp__Pvdd_low_thr__0__len 8
#define MA_core__prot_sys__otp__Pvdd_low_thr__0__mask 0xff
#define MA_core__prot_sys__otp__Pvdd_low_thr__0__shift 0x00
#define MA_core__prot_sys__otp__Pvdd_low_thr__0__reset 0x00
#define MA_core__prot_sys__otp__Pvdd_low_thr__0__inputonly 0
#define set_obj_MA_core__prot_sys__otp__Pvdd_low_thr__0(o,y) o.write(206,y);
#define set_MA_core__prot_sys__otp__Pvdd_low_thr__0(y) ma_write_byte(206,y);
#define get_obj_MA_core__prot_sys__otp__Pvdd_low_thr__0(o) (o.read(206) & 0xff)>>0
#define get_MA_core__prot_sys__otp__Pvdd_low_thr__0() ( ma_read_byte(206) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__Pvdd_low_thr__1---
// Low-Pvdd warning treshold (ADC output referred)
#define MA_core__prot_sys__otp__Pvdd_low_thr__1__a 0x00cf
#define MA_core__prot_sys__otp__Pvdd_low_thr__1__len 8
#define MA_core__prot_sys__otp__Pvdd_low_thr__1__mask 0xff
#define MA_core__prot_sys__otp__Pvdd_low_thr__1__shift 0x00
#define MA_core__prot_sys__otp__Pvdd_low_thr__1__reset 0x0e
#define MA_core__prot_sys__otp__Pvdd_low_thr__1__inputonly 0
#define set_obj_MA_core__prot_sys__otp__Pvdd_low_thr__1(o,y) o.write(207,y);
#define set_MA_core__prot_sys__otp__Pvdd_low_thr__1(y) ma_write_byte(207,y);
#define get_obj_MA_core__prot_sys__otp__Pvdd_low_thr__1(o) (o.read(207) & 0xff)>>0
#define get_MA_core__prot_sys__otp__Pvdd_low_thr__1() ( ma_read_byte(207) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__Pvdd_low_thr_hyst__0---
// Low-Pvdd warning treshold hysteresis (ADC output referred)
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0__a 0x00d0
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0__len 8
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0__mask 0xff
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0__shift 0x00
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0__reset 0x00
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0__inputonly 0
#define set_obj_MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0(o,y) o.write(208,y);
#define set_MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0(y) ma_write_byte(208,y);
#define get_obj_MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0(o) (o.read(208) & 0xff)>>0
#define get_MA_core__prot_sys__otp__Pvdd_low_thr_hyst__0() ( ma_read_byte(208) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__Pvdd_low_thr_hyst__1---
// Low-Pvdd warning treshold hysteresis (ADC output referred)
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1__a 0x00d1
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1__len 8
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1__mask 0xff
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1__shift 0x00
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1__reset 0x0c
#define MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1__inputonly 0
#define set_obj_MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1(o,y) o.write(209,y);
#define set_MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1(y) ma_write_byte(209,y);
#define get_obj_MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1(o) (o.read(209) & 0xff)>>0
#define get_MA_core__prot_sys__otp__Pvdd_low_thr_hyst__1() ( ma_read_byte(209) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__ltw_thr__0---
// Low-temperature warning threshold (ADC output referred)
#define MA_core__prot_sys__otp__ltw_thr__0__a 0x00d2
#define MA_core__prot_sys__otp__ltw_thr__0__len 8
#define MA_core__prot_sys__otp__ltw_thr__0__mask 0xff
#define MA_core__prot_sys__otp__ltw_thr__0__shift 0x00
#define MA_core__prot_sys__otp__ltw_thr__0__reset 0x00
#define MA_core__prot_sys__otp__ltw_thr__0__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ltw_thr__0(o,y) o.write(210,y);
#define set_MA_core__prot_sys__otp__ltw_thr__0(y) ma_write_byte(210,y);
#define get_obj_MA_core__prot_sys__otp__ltw_thr__0(o) (o.read(210) & 0xff)>>0
#define get_MA_core__prot_sys__otp__ltw_thr__0() ( ma_read_byte(210) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__ltw_thr__1---
// Low-temperature warning threshold (ADC output referred)
#define MA_core__prot_sys__otp__ltw_thr__1__a 0x00d3
#define MA_core__prot_sys__otp__ltw_thr__1__len 8
#define MA_core__prot_sys__otp__ltw_thr__1__mask 0xff
#define MA_core__prot_sys__otp__ltw_thr__1__shift 0x00
#define MA_core__prot_sys__otp__ltw_thr__1__reset 0x0a
#define MA_core__prot_sys__otp__ltw_thr__1__inputonly 0
#define set_obj_MA_core__prot_sys__otp__ltw_thr__1(o,y) o.write(211,y);
#define set_MA_core__prot_sys__otp__ltw_thr__1(y) ma_write_byte(211,y);
#define get_obj_MA_core__prot_sys__otp__ltw_thr__1(o) (o.read(211) & 0xff)>>0
#define get_MA_core__prot_sys__otp__ltw_thr__1() ( ma_read_byte(211) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__lt_thr_hyst__0---
// Low-temperature warning threshold hysteresis (ADC output referred)
#define MA_core__prot_sys__otp__lt_thr_hyst__0__a 0x00d4
#define MA_core__prot_sys__otp__lt_thr_hyst__0__len 8
#define MA_core__prot_sys__otp__lt_thr_hyst__0__mask 0xff
#define MA_core__prot_sys__otp__lt_thr_hyst__0__shift 0x00
#define MA_core__prot_sys__otp__lt_thr_hyst__0__reset 0x00
#define MA_core__prot_sys__otp__lt_thr_hyst__0__inputonly 0
#define set_obj_MA_core__prot_sys__otp__lt_thr_hyst__0(o,y) o.write(212,y);
#define set_MA_core__prot_sys__otp__lt_thr_hyst__0(y) ma_write_byte(212,y);
#define get_obj_MA_core__prot_sys__otp__lt_thr_hyst__0(o) (o.read(212) & 0xff)>>0
#define get_MA_core__prot_sys__otp__lt_thr_hyst__0() ( ma_read_byte(212) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__lt_thr_hyst__1---
// Low-temperature warning threshold hysteresis (ADC output referred)
#define MA_core__prot_sys__otp__lt_thr_hyst__1__a 0x00d5
#define MA_core__prot_sys__otp__lt_thr_hyst__1__len 8
#define MA_core__prot_sys__otp__lt_thr_hyst__1__mask 0xff
#define MA_core__prot_sys__otp__lt_thr_hyst__1__shift 0x00
#define MA_core__prot_sys__otp__lt_thr_hyst__1__reset 0x08
#define MA_core__prot_sys__otp__lt_thr_hyst__1__inputonly 0
#define set_obj_MA_core__prot_sys__otp__lt_thr_hyst__1(o,y) o.write(213,y);
#define set_MA_core__prot_sys__otp__lt_thr_hyst__1(y) ma_write_byte(213,y);
#define get_obj_MA_core__prot_sys__otp__lt_thr_hyst__1(o) (o.read(213) & 0xff)>>0
#define get_MA_core__prot_sys__otp__lt_thr_hyst__1() ( ma_read_byte(213) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__countThr_short---
// Number of 10us cycles in a "short" event response
#define MA_core__prot_sys__otp__countThr_short__a 0x00d6
#define MA_core__prot_sys__otp__countThr_short__len 8
#define MA_core__prot_sys__otp__countThr_short__mask 0xff
#define MA_core__prot_sys__otp__countThr_short__shift 0x00
#define MA_core__prot_sys__otp__countThr_short__reset 0x10
#define MA_core__prot_sys__otp__countThr_short__inputonly 0
#define set_obj_MA_core__prot_sys__otp__countThr_short(o,y) o.write(214,y);
#define set_MA_core__prot_sys__otp__countThr_short(y) ma_write_byte(214,y);
#define get_obj_MA_core__prot_sys__otp__countThr_short(o) (o.read(214) & 0xff)>>0
#define get_MA_core__prot_sys__otp__countThr_short() ( ma_read_byte(214) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__countThr_long---
// Number of 1ms cycles in a "long" event response
#define MA_core__prot_sys__otp__countThr_long__a 0x00d7
#define MA_core__prot_sys__otp__countThr_long__len 8
#define MA_core__prot_sys__otp__countThr_long__mask 0xff
#define MA_core__prot_sys__otp__countThr_long__shift 0x00
#define MA_core__prot_sys__otp__countThr_long__reset 0x20
#define MA_core__prot_sys__otp__countThr_long__inputonly 0
#define set_obj_MA_core__prot_sys__otp__countThr_long(o,y) o.write(215,y);
#define set_MA_core__prot_sys__otp__countThr_long(y) ma_write_byte(215,y);
#define get_obj_MA_core__prot_sys__otp__countThr_long(o) (o.read(215) & 0xff)>>0
#define get_MA_core__prot_sys__otp__countThr_long() ( ma_read_byte(215) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__otp__countThr_unlatch---
// Number of 100ms cycles before a latch auto-reset is performed
#define MA_core__prot_sys__otp__countThr_unlatch__a 0x00d8
#define MA_core__prot_sys__otp__countThr_unlatch__len 8
#define MA_core__prot_sys__otp__countThr_unlatch__mask 0xff
#define MA_core__prot_sys__otp__countThr_unlatch__shift 0x00
#define MA_core__prot_sys__otp__countThr_unlatch__reset 0x0a
#define MA_core__prot_sys__otp__countThr_unlatch__inputonly 0
#define set_obj_MA_core__prot_sys__otp__countThr_unlatch(o,y) o.write(216,y);
#define set_MA_core__prot_sys__otp__countThr_unlatch(y) ma_write_byte(216,y);
#define get_obj_MA_core__prot_sys__otp__countThr_unlatch(o) (o.read(216) & 0xff)>>0
#define get_MA_core__prot_sys__otp__countThr_unlatch() ( ma_read_byte(216) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol---
// Trigger reduction of channel volume on error
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol__a 0x00d9
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol(o,y) ({ uint8_t __ret = o.read(217); o.write(217,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol(y) ({ uint8_t __ret = ma_read_byte(217); ma_write_byte(217,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol(o) (o.read(217) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__reduceVol() ( ma_read_byte(217) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short---
// Trigger mute of channel while error w/ short extension
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short__a 0x00d9
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short__mask 0x02
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short__shift 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short(o,y) ({ uint8_t __ret = o.read(217); o.write(217,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short(y) ({ uint8_t __ret = ma_read_byte(217); ma_write_byte(217,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short(o) (o.read(217) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__mute_short() ( ma_read_byte(217) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short---
// Trigger Vcfly precharge in half bridge while error (with "short" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short__a 0x00d9
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short__mask 0x04
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short__shift 0x02
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short__reset 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short(o,y) ({ uint8_t __ret = o.read(217); o.write(217,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short(y) ({ uint8_t __ret = ma_read_byte(217); ma_write_byte(217,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short(o) (o.read(217) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_short() ( ma_read_byte(217) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long---
// Trigger Vcfly precharge in half bridge while error (with "long" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long__a 0x00d9
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long__mask 0x08
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long__shift 0x03
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long(o,y) ({ uint8_t __ret = o.read(217); o.write(217,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long(y) ({ uint8_t __ret = ma_read_byte(217); ma_write_byte(217,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long(o) (o.read(217) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pchg_long() ( ma_read_byte(217) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short---
// Trigger rapid update of all channel gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short__a 0x00d9
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short__mask 0x10
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short__shift 0x04
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short__reset 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(217); o.write(217,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(217); ma_write_byte(217,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short(o) (o.read(217) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__ser_rapidFire_short() ( ma_read_byte(217) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short---
// Trigger continuous operation of gate driver level shifters in channel (with "short" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short__a 0x00d9
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short__mask 0x20
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short__shift 0x05
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(217); o.write(217,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(217); ma_write_byte(217,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short(o) (o.read(217) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__gd_dp_cont_short() ( ma_read_byte(217) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short__a 0x00d9
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short__mask 0x40
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short__shift 0x06
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short__reset 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(217); o.write(217,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(217); ma_write_byte(217,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short(o) (o.read(217) & 0x40)>>6
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dis_lf_clip_rec_short() ( ma_read_byte(217) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max---
// Trigger jump to max. power mode for channel
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max__a 0x00d9
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max__mask 0x80
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max__shift 0x07
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max__reset 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max(o,y) ({ uint8_t __ret = o.read(217); o.write(217,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max(y) ({ uint8_t __ret = ma_read_byte(217); ma_write_byte(217,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max(o) (o.read(217) & 0x80)>>7
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__powerMode_max() ( ma_read_byte(217) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0---
// Trigger DSP channel-action flag 0
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0__a 0x00da
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(218); o.write(218,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(218); ma_write_byte(218,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0(o) (o.read(218) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action0() ( ma_read_byte(218) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1---
// Trigger DSP channel-action flag 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1__a 0x00da
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(218); o.write(218,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(218); ma_write_byte(218,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1(o) (o.read(218) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action1() ( ma_read_byte(218) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2---
// Trigger DSP channel-action flag 2
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2__a 0x00da
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(218); o.write(218,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(218); ma_write_byte(218,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2(o) (o.read(218) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action2() ( ma_read_byte(218) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3---
// Trigger DSP channel-action flag 3
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3__a 0x00da
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(218); o.write(218,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(218); ma_write_byte(218,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3(o) (o.read(218) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__dsp_custom_action3() ( ma_read_byte(218) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol__a 0x00db
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol(o,y) ({ uint8_t __ret = o.read(219); o.write(219,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol(y) ({ uint8_t __ret = ma_read_byte(219); ma_write_byte(219,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol(o) (o.read(219) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__reduceVol() ( ma_read_byte(219) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short__a 0x00db
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short__mask 0x02
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short__shift 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short(o,y) ({ uint8_t __ret = o.read(219); o.write(219,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short(y) ({ uint8_t __ret = ma_read_byte(219); ma_write_byte(219,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short(o) (o.read(219) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__mute_short() ( ma_read_byte(219) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short__a 0x00db
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(219); o.write(219,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(219); ma_write_byte(219,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short(o) (o.read(219) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__ser_rapidFire_short() ( ma_read_byte(219) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short__a 0x00db
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(219); o.write(219,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(219); ma_write_byte(219,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short(o) (o.read(219) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__gd_dp_cont_short() ( ma_read_byte(219) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short__a 0x00db
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(219); o.write(219,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(219); ma_write_byte(219,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short(o) (o.read(219) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__dis_lf_clip_rec_short() ( ma_read_byte(219) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long__a 0x00db
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(219); o.write(219,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(219); ma_write_byte(219,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long(o) (o.read(219) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddMode_long() ( ma_read_byte(219) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long__a 0x00db
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long(o,y) ({ uint8_t __ret = o.read(219); o.write(219,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(219); ma_write_byte(219,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long(o) (o.read(219) & 0x40)>>6
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowTmode_long() ( ma_read_byte(219) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long__a 0x00db
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(219); o.write(219,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(219); ma_write_byte(219,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long(o) (o.read(219) & 0x80)>>7
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__lowPvddTmode_long() ( ma_read_byte(219) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0__a 0x00dc
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(220); o.write(220,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(220); ma_write_byte(220,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0(o) (o.read(220) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action0() ( ma_read_byte(220) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1__a 0x00dc
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(220); o.write(220,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(220); ma_write_byte(220,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1(o) (o.read(220) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action1() ( ma_read_byte(220) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2__a 0x00dc
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(220); o.write(220,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(220); ma_write_byte(220,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2(o) (o.read(220) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action2() ( ma_read_byte(220) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3__a 0x00dc
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(220); o.write(220,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(220); ma_write_byte(220,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3(o) (o.read(220) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__all_dsp_custom_action3() ( ma_read_byte(220) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol---
// Trigger reduction of channel volume on error
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol__a 0x00dd
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol__reset 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol(o,y) ({ uint8_t __ret = o.read(221); o.write(221,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol(y) ({ uint8_t __ret = ma_read_byte(221); ma_write_byte(221,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol(o) (o.read(221) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__reduceVol() ( ma_read_byte(221) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short---
// Trigger mute of channel while error w/ short extension
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short__a 0x00dd
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short__mask 0x02
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short__shift 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short(o,y) ({ uint8_t __ret = o.read(221); o.write(221,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short(y) ({ uint8_t __ret = ma_read_byte(221); ma_write_byte(221,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short(o) (o.read(221) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__mute_short() ( ma_read_byte(221) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short---
// Trigger Vcfly precharge in half bridge while error (with "short" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short__a 0x00dd
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short__mask 0x04
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short__shift 0x02
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short__reset 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short(o,y) ({ uint8_t __ret = o.read(221); o.write(221,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short(y) ({ uint8_t __ret = ma_read_byte(221); ma_write_byte(221,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short(o) (o.read(221) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_short() ( ma_read_byte(221) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long---
// Trigger Vcfly precharge in half bridge while error (with "long" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long__a 0x00dd
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long__mask 0x08
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long__shift 0x03
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long(o,y) ({ uint8_t __ret = o.read(221); o.write(221,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long(y) ({ uint8_t __ret = ma_read_byte(221); ma_write_byte(221,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long(o) (o.read(221) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pchg_long() ( ma_read_byte(221) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short---
// Trigger rapid update of all channel gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short__a 0x00dd
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short__mask 0x10
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short__shift 0x04
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(221); o.write(221,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(221); ma_write_byte(221,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short(o) (o.read(221) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__ser_rapidFire_short() ( ma_read_byte(221) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short---
// Trigger continuous operation of gate driver level shifters in channel (with "short" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short__a 0x00dd
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short__mask 0x20
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short__shift 0x05
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(221); o.write(221,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(221); ma_write_byte(221,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short(o) (o.read(221) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__gd_dp_cont_short() ( ma_read_byte(221) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short__a 0x00dd
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short__mask 0x40
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short__shift 0x06
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(221); o.write(221,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(221); ma_write_byte(221,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short(o) (o.read(221) & 0x40)>>6
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dis_lf_clip_rec_short() ( ma_read_byte(221) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max---
// Trigger jump to max. power mode for channel
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max__a 0x00dd
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max__mask 0x80
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max__shift 0x07
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max__reset 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max(o,y) ({ uint8_t __ret = o.read(221); o.write(221,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max(y) ({ uint8_t __ret = ma_read_byte(221); ma_write_byte(221,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max(o) (o.read(221) & 0x80)>>7
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__powerMode_max() ( ma_read_byte(221) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0---
// Trigger DSP channel-action flag 0
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0__a 0x00de
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(222); o.write(222,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(222); ma_write_byte(222,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0(o) (o.read(222) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action0() ( ma_read_byte(222) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1---
// Trigger DSP channel-action flag 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1__a 0x00de
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(222); o.write(222,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(222); ma_write_byte(222,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1(o) (o.read(222) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action1() ( ma_read_byte(222) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2---
// Trigger DSP channel-action flag 2
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2__a 0x00de
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(222); o.write(222,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(222); ma_write_byte(222,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2(o) (o.read(222) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action2() ( ma_read_byte(222) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3---
// Trigger DSP channel-action flag 3
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3__a 0x00de
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(222); o.write(222,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(222); ma_write_byte(222,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3(o) (o.read(222) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__dsp_custom_action3() ( ma_read_byte(222) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol__a 0x00df
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol(o,y) ({ uint8_t __ret = o.read(223); o.write(223,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol(y) ({ uint8_t __ret = ma_read_byte(223); ma_write_byte(223,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol(o) (o.read(223) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__reduceVol() ( ma_read_byte(223) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short__a 0x00df
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short__mask 0x02
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short__shift 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short(o,y) ({ uint8_t __ret = o.read(223); o.write(223,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short(y) ({ uint8_t __ret = ma_read_byte(223); ma_write_byte(223,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short(o) (o.read(223) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__mute_short() ( ma_read_byte(223) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short__a 0x00df
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(223); o.write(223,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(223); ma_write_byte(223,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short(o) (o.read(223) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__ser_rapidFire_short() ( ma_read_byte(223) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short__a 0x00df
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(223); o.write(223,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(223); ma_write_byte(223,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short(o) (o.read(223) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__gd_dp_cont_short() ( ma_read_byte(223) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short__a 0x00df
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(223); o.write(223,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(223); ma_write_byte(223,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short(o) (o.read(223) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__dis_lf_clip_rec_short() ( ma_read_byte(223) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long__a 0x00df
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(223); o.write(223,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(223); ma_write_byte(223,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long(o) (o.read(223) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddMode_long() ( ma_read_byte(223) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long__a 0x00df
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long(o,y) ({ uint8_t __ret = o.read(223); o.write(223,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(223); ma_write_byte(223,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long(o) (o.read(223) & 0x40)>>6
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowTmode_long() ( ma_read_byte(223) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long__a 0x00df
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(223); o.write(223,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(223); ma_write_byte(223,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long(o) (o.read(223) & 0x80)>>7
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__lowPvddTmode_long() ( ma_read_byte(223) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0__a 0x00e0
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(224); o.write(224,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(224); ma_write_byte(224,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0(o) (o.read(224) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action0() ( ma_read_byte(224) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1__a 0x00e0
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(224); o.write(224,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(224); ma_write_byte(224,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1(o) (o.read(224) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action1() ( ma_read_byte(224) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2__a 0x00e0
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(224); o.write(224,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(224); ma_write_byte(224,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2(o) (o.read(224) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action2() ( ma_read_byte(224) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3__a 0x00e0
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(224); o.write(224,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(224); ma_write_byte(224,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3(o) (o.read(224) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__all_dsp_custom_action3() ( ma_read_byte(224) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol---
// Trigger reduction of channel volume on error
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol__a 0x00e1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol(o,y) ({ uint8_t __ret = o.read(225); o.write(225,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol(y) ({ uint8_t __ret = ma_read_byte(225); ma_write_byte(225,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol(o) (o.read(225) & 0x01)>>0
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__reduceVol() ( ma_read_byte(225) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short---
// Trigger mute of channel while error w/ short extension
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short__a 0x00e1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short__mask 0x02
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short__shift 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short__reset 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short(o,y) ({ uint8_t __ret = o.read(225); o.write(225,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short(y) ({ uint8_t __ret = ma_read_byte(225); ma_write_byte(225,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short(o) (o.read(225) & 0x02)>>1
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__mute_short() ( ma_read_byte(225) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short---
// Trigger Vcfly precharge in half bridge while error (with "short" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short__a 0x00e1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short__mask 0x04
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short__shift 0x02
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short(o,y) ({ uint8_t __ret = o.read(225); o.write(225,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short(y) ({ uint8_t __ret = ma_read_byte(225); ma_write_byte(225,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short(o) (o.read(225) & 0x04)>>2
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_short() ( ma_read_byte(225) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long---
// Trigger Vcfly precharge in half bridge while error (with "long" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long__a 0x00e1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long__mask 0x08
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long__shift 0x03
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long__reset 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long(o,y) ({ uint8_t __ret = o.read(225); o.write(225,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long(y) ({ uint8_t __ret = ma_read_byte(225); ma_write_byte(225,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long(o) (o.read(225) & 0x08)>>3
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pchg_long() ( ma_read_byte(225) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short---
// Trigger rapid update of all channel gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short__a 0x00e1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short__mask 0x10
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short__shift 0x04
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(225); o.write(225,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(225); ma_write_byte(225,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short(o) (o.read(225) & 0x10)>>4
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__ser_rapidFire_short() ( ma_read_byte(225) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short---
// Trigger continuous operation of gate driver level shifters in channel (with "short" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short__a 0x00e1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short__mask 0x20
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short__shift 0x05
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(225); o.write(225,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(225); ma_write_byte(225,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short(o) (o.read(225) & 0x20)>>5
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__gd_dp_cont_short() ( ma_read_byte(225) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short__a 0x00e1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short__mask 0x40
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short__shift 0x06
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(225); o.write(225,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(225); ma_write_byte(225,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short(o) (o.read(225) & 0x40)>>6
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dis_lf_clip_rec_short() ( ma_read_byte(225) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max---
// Trigger jump to max. power mode for channel
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max__a 0x00e1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max__mask 0x80
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max__shift 0x07
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max(o,y) ({ uint8_t __ret = o.read(225); o.write(225,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max(y) ({ uint8_t __ret = ma_read_byte(225); ma_write_byte(225,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max(o) (o.read(225) & 0x80)>>7
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__powerMode_max() ( ma_read_byte(225) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0---
// Trigger DSP channel-action flag 0
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0__a 0x00e2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(226); o.write(226,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(226); ma_write_byte(226,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0(o) (o.read(226) & 0x01)>>0
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action0() ( ma_read_byte(226) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1---
// Trigger DSP channel-action flag 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1__a 0x00e2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(226); o.write(226,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(226); ma_write_byte(226,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1(o) (o.read(226) & 0x02)>>1
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action1() ( ma_read_byte(226) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2---
// Trigger DSP channel-action flag 2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2__a 0x00e2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(226); o.write(226,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(226); ma_write_byte(226,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2(o) (o.read(226) & 0x04)>>2
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action2() ( ma_read_byte(226) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3---
// Trigger DSP channel-action flag 3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3__a 0x00e2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(226); o.write(226,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(226); ma_write_byte(226,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3(o) (o.read(226) & 0x08)>>3
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__dsp_custom_action3() ( ma_read_byte(226) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol__a 0x00e3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol(o,y) ({ uint8_t __ret = o.read(227); o.write(227,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol(y) ({ uint8_t __ret = ma_read_byte(227); ma_write_byte(227,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol(o) (o.read(227) & 0x01)>>0
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__reduceVol() ( ma_read_byte(227) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short__a 0x00e3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short__mask 0x02
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short__shift 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short(o,y) ({ uint8_t __ret = o.read(227); o.write(227,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short(y) ({ uint8_t __ret = ma_read_byte(227); ma_write_byte(227,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short(o) (o.read(227) & 0x02)>>1
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__mute_short() ( ma_read_byte(227) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short__a 0x00e3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(227); o.write(227,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(227); ma_write_byte(227,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short(o) (o.read(227) & 0x04)>>2
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__ser_rapidFire_short() ( ma_read_byte(227) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short__a 0x00e3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(227); o.write(227,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(227); ma_write_byte(227,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short(o) (o.read(227) & 0x08)>>3
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__gd_dp_cont_short() ( ma_read_byte(227) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short__a 0x00e3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(227); o.write(227,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(227); ma_write_byte(227,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short(o) (o.read(227) & 0x10)>>4
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__dis_lf_clip_rec_short() ( ma_read_byte(227) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long__a 0x00e3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(227); o.write(227,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(227); ma_write_byte(227,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long(o) (o.read(227) & 0x20)>>5
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddMode_long() ( ma_read_byte(227) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long__a 0x00e3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long(o,y) ({ uint8_t __ret = o.read(227); o.write(227,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(227); ma_write_byte(227,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long(o) (o.read(227) & 0x40)>>6
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowTmode_long() ( ma_read_byte(227) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long__a 0x00e3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(227); o.write(227,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(227); ma_write_byte(227,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long(o) (o.read(227) & 0x80)>>7
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__lowPvddTmode_long() ( ma_read_byte(227) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0__a 0x00e4
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(228); o.write(228,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(228); ma_write_byte(228,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0(o) (o.read(228) & 0x01)>>0
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action0() ( ma_read_byte(228) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1__a 0x00e4
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(228); o.write(228,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(228); ma_write_byte(228,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1(o) (o.read(228) & 0x02)>>1
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action1() ( ma_read_byte(228) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2__a 0x00e4
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(228); o.write(228,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(228); ma_write_byte(228,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2(o) (o.read(228) & 0x04)>>2
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action2() ( ma_read_byte(228) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3__a 0x00e4
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(228); o.write(228,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(228); ma_write_byte(228,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3(o) (o.read(228) & 0x08)>>3
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__all_dsp_custom_action3() ( ma_read_byte(228) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol---
// Trigger reduction of channel volume on error
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol__a 0x00e5
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol(o,y) ({ uint8_t __ret = o.read(229); o.write(229,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol(y) ({ uint8_t __ret = ma_read_byte(229); ma_write_byte(229,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol(o) (o.read(229) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__reduceVol() ( ma_read_byte(229) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short---
// Trigger mute of channel while error w/ short extension
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short__a 0x00e5
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short__mask 0x02
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short__shift 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short(o,y) ({ uint8_t __ret = o.read(229); o.write(229,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short(y) ({ uint8_t __ret = ma_read_byte(229); ma_write_byte(229,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short(o) (o.read(229) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__mute_short() ( ma_read_byte(229) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short---
// Trigger Vcfly precharge in half bridge while error (with "short" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short__a 0x00e5
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short__mask 0x04
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short__shift 0x02
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short(o,y) ({ uint8_t __ret = o.read(229); o.write(229,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short(y) ({ uint8_t __ret = ma_read_byte(229); ma_write_byte(229,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short(o) (o.read(229) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_short() ( ma_read_byte(229) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long---
// Trigger Vcfly precharge in half bridge while error (with "long" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long__a 0x00e5
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long__mask 0x08
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long__shift 0x03
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long(o,y) ({ uint8_t __ret = o.read(229); o.write(229,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long(y) ({ uint8_t __ret = ma_read_byte(229); ma_write_byte(229,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long(o) (o.read(229) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pchg_long() ( ma_read_byte(229) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short---
// Trigger rapid update of all channel gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short__a 0x00e5
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short__mask 0x10
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short__shift 0x04
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(229); o.write(229,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(229); ma_write_byte(229,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short(o) (o.read(229) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__ser_rapidFire_short() ( ma_read_byte(229) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short---
// Trigger continuous operation of gate driver level shifters in channel (with "short" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short__a 0x00e5
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short__mask 0x20
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short__shift 0x05
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(229); o.write(229,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(229); ma_write_byte(229,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short(o) (o.read(229) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__gd_dp_cont_short() ( ma_read_byte(229) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short__a 0x00e5
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short__mask 0x40
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short__shift 0x06
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(229); o.write(229,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(229); ma_write_byte(229,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short(o) (o.read(229) & 0x40)>>6
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dis_lf_clip_rec_short() ( ma_read_byte(229) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max---
// Trigger jump to max. power mode for channel
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max__a 0x00e5
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max__mask 0x80
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max__shift 0x07
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max(o,y) ({ uint8_t __ret = o.read(229); o.write(229,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max(y) ({ uint8_t __ret = ma_read_byte(229); ma_write_byte(229,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max(o) (o.read(229) & 0x80)>>7
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__powerMode_max() ( ma_read_byte(229) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0---
// Trigger DSP channel-action flag 0
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0__a 0x00e6
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(230); o.write(230,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(230); ma_write_byte(230,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0(o) (o.read(230) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action0() ( ma_read_byte(230) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1---
// Trigger DSP channel-action flag 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1__a 0x00e6
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(230); o.write(230,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(230); ma_write_byte(230,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1(o) (o.read(230) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action1() ( ma_read_byte(230) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2---
// Trigger DSP channel-action flag 2
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2__a 0x00e6
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(230); o.write(230,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(230); ma_write_byte(230,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2(o) (o.read(230) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action2() ( ma_read_byte(230) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3---
// Trigger DSP channel-action flag 3
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3__a 0x00e6
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(230); o.write(230,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(230); ma_write_byte(230,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3(o) (o.read(230) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__dsp_custom_action3() ( ma_read_byte(230) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol__a 0x00e7
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol(o,y) ({ uint8_t __ret = o.read(231); o.write(231,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol(y) ({ uint8_t __ret = ma_read_byte(231); ma_write_byte(231,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol(o) (o.read(231) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__reduceVol() ( ma_read_byte(231) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short__a 0x00e7
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short__mask 0x02
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short__shift 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short(o,y) ({ uint8_t __ret = o.read(231); o.write(231,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short(y) ({ uint8_t __ret = ma_read_byte(231); ma_write_byte(231,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short(o) (o.read(231) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__mute_short() ( ma_read_byte(231) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short__a 0x00e7
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(231); o.write(231,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(231); ma_write_byte(231,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short(o) (o.read(231) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__ser_rapidFire_short() ( ma_read_byte(231) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short__a 0x00e7
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(231); o.write(231,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(231); ma_write_byte(231,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short(o) (o.read(231) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__gd_dp_cont_short() ( ma_read_byte(231) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short__a 0x00e7
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(231); o.write(231,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(231); ma_write_byte(231,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short(o) (o.read(231) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__dis_lf_clip_rec_short() ( ma_read_byte(231) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long__a 0x00e7
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(231); o.write(231,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(231); ma_write_byte(231,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long(o) (o.read(231) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddMode_long() ( ma_read_byte(231) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long__a 0x00e7
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long(o,y) ({ uint8_t __ret = o.read(231); o.write(231,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(231); ma_write_byte(231,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long(o) (o.read(231) & 0x40)>>6
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowTmode_long() ( ma_read_byte(231) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long__a 0x00e7
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(231); o.write(231,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(231); ma_write_byte(231,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long(o) (o.read(231) & 0x80)>>7
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__lowPvddTmode_long() ( ma_read_byte(231) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0__a 0x00e8
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(232); o.write(232,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(232); ma_write_byte(232,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0(o) (o.read(232) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action0() ( ma_read_byte(232) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1__a 0x00e8
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(232); o.write(232,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(232); ma_write_byte(232,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1(o) (o.read(232) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action1() ( ma_read_byte(232) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2__a 0x00e8
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(232); o.write(232,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(232); ma_write_byte(232,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2(o) (o.read(232) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action2() ( ma_read_byte(232) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3__a 0x00e8
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(232); o.write(232,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(232); ma_write_byte(232,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3(o) (o.read(232) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__all_dsp_custom_action3() ( ma_read_byte(232) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol---
// Trigger reduction of channel volume on error
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol__a 0x00e9
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol(o,y) ({ uint8_t __ret = o.read(233); o.write(233,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol(y) ({ uint8_t __ret = ma_read_byte(233); ma_write_byte(233,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol(o) (o.read(233) & 0x01)>>0
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__reduceVol() ( ma_read_byte(233) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short---
// Trigger mute of channel while error w/ short extension
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short__a 0x00e9
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short__mask 0x02
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short__shift 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short(o,y) ({ uint8_t __ret = o.read(233); o.write(233,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short(y) ({ uint8_t __ret = ma_read_byte(233); ma_write_byte(233,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short(o) (o.read(233) & 0x02)>>1
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__mute_short() ( ma_read_byte(233) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short---
// Trigger Vcfly precharge in half bridge while error (with "short" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short__a 0x00e9
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short__mask 0x04
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short__shift 0x02
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short(o,y) ({ uint8_t __ret = o.read(233); o.write(233,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short(y) ({ uint8_t __ret = ma_read_byte(233); ma_write_byte(233,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short(o) (o.read(233) & 0x04)>>2
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_short() ( ma_read_byte(233) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long---
// Trigger Vcfly precharge in half bridge while error (with "long" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long__a 0x00e9
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long__mask 0x08
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long__shift 0x03
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long(o,y) ({ uint8_t __ret = o.read(233); o.write(233,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long(y) ({ uint8_t __ret = ma_read_byte(233); ma_write_byte(233,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long(o) (o.read(233) & 0x08)>>3
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pchg_long() ( ma_read_byte(233) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short---
// Trigger rapid update of all channel gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short__a 0x00e9
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short__mask 0x10
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short__shift 0x04
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(233); o.write(233,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(233); ma_write_byte(233,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short(o) (o.read(233) & 0x10)>>4
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__ser_rapidFire_short() ( ma_read_byte(233) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short---
// Trigger continuous operation of gate driver level shifters in channel (with "short" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short__a 0x00e9
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short__mask 0x20
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short__shift 0x05
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(233); o.write(233,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(233); ma_write_byte(233,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short(o) (o.read(233) & 0x20)>>5
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__gd_dp_cont_short() ( ma_read_byte(233) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short__a 0x00e9
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short__mask 0x40
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short__shift 0x06
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short__reset 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(233); o.write(233,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(233); ma_write_byte(233,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short(o) (o.read(233) & 0x40)>>6
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dis_lf_clip_rec_short() ( ma_read_byte(233) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max---
// Trigger jump to max. power mode for channel
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max__a 0x00e9
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max__mask 0x80
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max__shift 0x07
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max(o,y) ({ uint8_t __ret = o.read(233); o.write(233,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max(y) ({ uint8_t __ret = ma_read_byte(233); ma_write_byte(233,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max(o) (o.read(233) & 0x80)>>7
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__powerMode_max() ( ma_read_byte(233) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0---
// Trigger DSP channel-action flag 0
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0__a 0x00ea
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(234); o.write(234,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(234); ma_write_byte(234,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0(o) (o.read(234) & 0x01)>>0
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action0() ( ma_read_byte(234) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1---
// Trigger DSP channel-action flag 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1__a 0x00ea
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(234); o.write(234,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(234); ma_write_byte(234,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1(o) (o.read(234) & 0x02)>>1
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action1() ( ma_read_byte(234) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2---
// Trigger DSP channel-action flag 2
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2__a 0x00ea
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(234); o.write(234,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(234); ma_write_byte(234,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2(o) (o.read(234) & 0x04)>>2
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action2() ( ma_read_byte(234) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3---
// Trigger DSP channel-action flag 3
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3__a 0x00ea
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(234); o.write(234,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(234); ma_write_byte(234,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3(o) (o.read(234) & 0x08)>>3
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__dsp_custom_action3() ( ma_read_byte(234) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol__a 0x00eb
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol(o,y) ({ uint8_t __ret = o.read(235); o.write(235,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol(y) ({ uint8_t __ret = ma_read_byte(235); ma_write_byte(235,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol(o) (o.read(235) & 0x01)>>0
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__reduceVol() ( ma_read_byte(235) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short__a 0x00eb
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short__mask 0x02
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short__shift 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short(o,y) ({ uint8_t __ret = o.read(235); o.write(235,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short(y) ({ uint8_t __ret = ma_read_byte(235); ma_write_byte(235,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short(o) (o.read(235) & 0x02)>>1
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__mute_short() ( ma_read_byte(235) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short__a 0x00eb
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(235); o.write(235,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(235); ma_write_byte(235,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short(o) (o.read(235) & 0x04)>>2
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__ser_rapidFire_short() ( ma_read_byte(235) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short__a 0x00eb
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(235); o.write(235,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(235); ma_write_byte(235,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short(o) (o.read(235) & 0x08)>>3
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__gd_dp_cont_short() ( ma_read_byte(235) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short__a 0x00eb
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(235); o.write(235,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(235); ma_write_byte(235,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short(o) (o.read(235) & 0x10)>>4
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__dis_lf_clip_rec_short() ( ma_read_byte(235) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long__a 0x00eb
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(235); o.write(235,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(235); ma_write_byte(235,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long(o) (o.read(235) & 0x20)>>5
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddMode_long() ( ma_read_byte(235) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long__a 0x00eb
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long(o,y) ({ uint8_t __ret = o.read(235); o.write(235,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(235); ma_write_byte(235,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long(o) (o.read(235) & 0x40)>>6
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowTmode_long() ( ma_read_byte(235) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long__a 0x00eb
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(235); o.write(235,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(235); ma_write_byte(235,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long(o) (o.read(235) & 0x80)>>7
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__lowPvddTmode_long() ( ma_read_byte(235) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0__a 0x00ec
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(236); o.write(236,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(236); ma_write_byte(236,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0(o) (o.read(236) & 0x01)>>0
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action0() ( ma_read_byte(236) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1__a 0x00ec
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(236); o.write(236,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(236); ma_write_byte(236,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1(o) (o.read(236) & 0x02)>>1
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action1() ( ma_read_byte(236) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2__a 0x00ec
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(236); o.write(236,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(236); ma_write_byte(236,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2(o) (o.read(236) & 0x04)>>2
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action2() ( ma_read_byte(236) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3__a 0x00ec
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(236); o.write(236,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(236); ma_write_byte(236,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3(o) (o.read(236) & 0x08)>>3
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__all_dsp_custom_action3() ( ma_read_byte(236) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__otw_action__reduceVol__a 0x00ed
#define MA_core__prot_sys__reg__otw_action__reduceVol__len 1
#define MA_core__prot_sys__reg__otw_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__otw_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__otw_action__reduceVol__reset 0x01
#define MA_core__prot_sys__reg__otw_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__reduceVol(o,y) ({ uint8_t __ret = o.read(237); o.write(237,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__otw_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(237); ma_write_byte(237,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__reduceVol(o) (o.read(237) & 0x01)>>0
#define get_MA_core__prot_sys__reg__otw_action__reduceVol() ( ma_read_byte(237) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__otw_action__mute_short__a 0x00ed
#define MA_core__prot_sys__reg__otw_action__mute_short__len 1
#define MA_core__prot_sys__reg__otw_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__otw_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__otw_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__otw_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__mute_short(o,y) ({ uint8_t __ret = o.read(237); o.write(237,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__otw_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(237); ma_write_byte(237,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__mute_short(o) (o.read(237) & 0x02)>>1
#define get_MA_core__prot_sys__reg__otw_action__mute_short() ( ma_read_byte(237) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__otw_action__ser_rapidFire_short__a 0x00ed
#define MA_core__prot_sys__reg__otw_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__otw_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__otw_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__otw_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__otw_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(237); o.write(237,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__otw_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(237); ma_write_byte(237,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__ser_rapidFire_short(o) (o.read(237) & 0x04)>>2
#define get_MA_core__prot_sys__reg__otw_action__ser_rapidFire_short() ( ma_read_byte(237) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__otw_action__gd_dp_cont_short__a 0x00ed
#define MA_core__prot_sys__reg__otw_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__otw_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__otw_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__otw_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__otw_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(237); o.write(237,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__otw_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(237); ma_write_byte(237,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__gd_dp_cont_short(o) (o.read(237) & 0x08)>>3
#define get_MA_core__prot_sys__reg__otw_action__gd_dp_cont_short() ( ma_read_byte(237) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short__a 0x00ed
#define MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(237); o.write(237,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(237); ma_write_byte(237,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short(o) (o.read(237) & 0x10)>>4
#define get_MA_core__prot_sys__reg__otw_action__dis_lf_clip_rec_short() ( ma_read_byte(237) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__otw_action__lowPvddMode_long__a 0x00ed
#define MA_core__prot_sys__reg__otw_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__otw_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__otw_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__otw_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__otw_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(237); o.write(237,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__otw_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(237); ma_write_byte(237,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__lowPvddMode_long(o) (o.read(237) & 0x20)>>5
#define get_MA_core__prot_sys__reg__otw_action__lowPvddMode_long() ( ma_read_byte(237) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__otw_action__lowTmode_long__a 0x00ed
#define MA_core__prot_sys__reg__otw_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__otw_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__otw_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__otw_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__otw_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(237); o.write(237,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__otw_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(237); ma_write_byte(237,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__lowTmode_long(o) (o.read(237) & 0x40)>>6
#define get_MA_core__prot_sys__reg__otw_action__lowTmode_long() ( ma_read_byte(237) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__otw_action__lowPvddTmode_long__a 0x00ed
#define MA_core__prot_sys__reg__otw_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__otw_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__otw_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__otw_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__otw_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(237); o.write(237,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__otw_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(237); ma_write_byte(237,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__lowPvddTmode_long(o) (o.read(237) & 0x80)>>7
#define get_MA_core__prot_sys__reg__otw_action__lowPvddTmode_long() ( ma_read_byte(237) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0__a 0x00ee
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(238); o.write(238,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(238); ma_write_byte(238,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0(o) (o.read(238) & 0x01)>>0
#define get_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action0() ( ma_read_byte(238) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1__a 0x00ee
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(238); o.write(238,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(238); ma_write_byte(238,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1(o) (o.read(238) & 0x02)>>1
#define get_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action1() ( ma_read_byte(238) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2__a 0x00ee
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(238); o.write(238,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(238); ma_write_byte(238,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2(o) (o.read(238) & 0x04)>>2
#define get_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action2() ( ma_read_byte(238) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3__a 0x00ee
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(238); o.write(238,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(238); ma_write_byte(238,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3(o) (o.read(238) & 0x08)>>3
#define get_MA_core__prot_sys__reg__otw_action__all_dsp_custom_action3() ( ma_read_byte(238) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__ote_action__reduceVol__a 0x00ef
#define MA_core__prot_sys__reg__ote_action__reduceVol__len 1
#define MA_core__prot_sys__reg__ote_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__ote_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__ote_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__ote_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__reduceVol(o,y) ({ uint8_t __ret = o.read(239); o.write(239,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ote_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(239); ma_write_byte(239,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__reduceVol(o) (o.read(239) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ote_action__reduceVol() ( ma_read_byte(239) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__ote_action__mute_short__a 0x00ef
#define MA_core__prot_sys__reg__ote_action__mute_short__len 1
#define MA_core__prot_sys__reg__ote_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__ote_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__ote_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__ote_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__mute_short(o,y) ({ uint8_t __ret = o.read(239); o.write(239,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ote_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(239); ma_write_byte(239,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__mute_short(o) (o.read(239) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ote_action__mute_short() ( ma_read_byte(239) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__ote_action__ser_rapidFire_short__a 0x00ef
#define MA_core__prot_sys__reg__ote_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__ote_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__ote_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__ote_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__ote_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(239); o.write(239,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ote_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(239); ma_write_byte(239,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__ser_rapidFire_short(o) (o.read(239) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ote_action__ser_rapidFire_short() ( ma_read_byte(239) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__ote_action__gd_dp_cont_short__a 0x00ef
#define MA_core__prot_sys__reg__ote_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__ote_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__ote_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__ote_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__ote_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(239); o.write(239,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ote_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(239); ma_write_byte(239,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__gd_dp_cont_short(o) (o.read(239) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ote_action__gd_dp_cont_short() ( ma_read_byte(239) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short__a 0x00ef
#define MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(239); o.write(239,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(239); ma_write_byte(239,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short(o) (o.read(239) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ote_action__dis_lf_clip_rec_short() ( ma_read_byte(239) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ote_action__lowPvddMode_long__a 0x00ef
#define MA_core__prot_sys__reg__ote_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__ote_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__ote_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__ote_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__ote_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(239); o.write(239,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ote_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(239); ma_write_byte(239,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__lowPvddMode_long(o) (o.read(239) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ote_action__lowPvddMode_long() ( ma_read_byte(239) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ote_action__lowTmode_long__a 0x00ef
#define MA_core__prot_sys__reg__ote_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__ote_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__ote_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__ote_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__ote_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(239); o.write(239,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__ote_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(239); ma_write_byte(239,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__lowTmode_long(o) (o.read(239) & 0x40)>>6
#define get_MA_core__prot_sys__reg__ote_action__lowTmode_long() ( ma_read_byte(239) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__ote_action__lowPvddTmode_long__a 0x00ef
#define MA_core__prot_sys__reg__ote_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__ote_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__ote_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__ote_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__ote_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(239); o.write(239,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__ote_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(239); ma_write_byte(239,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__lowPvddTmode_long(o) (o.read(239) & 0x80)>>7
#define get_MA_core__prot_sys__reg__ote_action__lowPvddTmode_long() ( ma_read_byte(239) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0__a 0x00f0
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(240); o.write(240,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(240); ma_write_byte(240,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0(o) (o.read(240) & 0x01)>>0
#define get_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action0() ( ma_read_byte(240) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1__a 0x00f0
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(240); o.write(240,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(240); ma_write_byte(240,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1(o) (o.read(240) & 0x02)>>1
#define get_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action1() ( ma_read_byte(240) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2__a 0x00f0
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(240); o.write(240,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(240); ma_write_byte(240,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2(o) (o.read(240) & 0x04)>>2
#define get_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action2() ( ma_read_byte(240) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3__a 0x00f0
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(240); o.write(240,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(240); ma_write_byte(240,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3(o) (o.read(240) & 0x08)>>3
#define get_MA_core__prot_sys__reg__ote_action__all_dsp_custom_action3() ( ma_read_byte(240) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__pvdd_uv_action__reduceVol__a 0x00f1
#define MA_core__prot_sys__reg__pvdd_uv_action__reduceVol__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__pvdd_uv_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__reduceVol(o,y) ({ uint8_t __ret = o.read(241); o.write(241,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(241); ma_write_byte(241,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__reduceVol(o) (o.read(241) & 0x01)>>0
#define get_MA_core__prot_sys__reg__pvdd_uv_action__reduceVol() ( ma_read_byte(241) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__pvdd_uv_action__mute_short__a 0x00f1
#define MA_core__prot_sys__reg__pvdd_uv_action__mute_short__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__pvdd_uv_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__pvdd_uv_action__mute_short__reset 0x01
#define MA_core__prot_sys__reg__pvdd_uv_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__mute_short(o,y) ({ uint8_t __ret = o.read(241); o.write(241,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(241); ma_write_byte(241,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__mute_short(o) (o.read(241) & 0x02)>>1
#define get_MA_core__prot_sys__reg__pvdd_uv_action__mute_short() ( ma_read_byte(241) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short__a 0x00f1
#define MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(241); o.write(241,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(241); ma_write_byte(241,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short(o) (o.read(241) & 0x04)>>2
#define get_MA_core__prot_sys__reg__pvdd_uv_action__ser_rapidFire_short() ( ma_read_byte(241) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short__a 0x00f1
#define MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(241); o.write(241,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(241); ma_write_byte(241,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short(o) (o.read(241) & 0x08)>>3
#define get_MA_core__prot_sys__reg__pvdd_uv_action__gd_dp_cont_short() ( ma_read_byte(241) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short__a 0x00f1
#define MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(241); o.write(241,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(241); ma_write_byte(241,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short(o) (o.read(241) & 0x10)>>4
#define get_MA_core__prot_sys__reg__pvdd_uv_action__dis_lf_clip_rec_short() ( ma_read_byte(241) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long__a 0x00f1
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(241); o.write(241,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(241); ma_write_byte(241,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long(o) (o.read(241) & 0x20)>>5
#define get_MA_core__prot_sys__reg__pvdd_uv_action__lowPvddMode_long() ( ma_read_byte(241) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long__a 0x00f1
#define MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(241); o.write(241,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(241); ma_write_byte(241,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long(o) (o.read(241) & 0x40)>>6
#define get_MA_core__prot_sys__reg__pvdd_uv_action__lowTmode_long() ( ma_read_byte(241) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long__a 0x00f1
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(241); o.write(241,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(241); ma_write_byte(241,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long(o) (o.read(241) & 0x80)>>7
#define get_MA_core__prot_sys__reg__pvdd_uv_action__lowPvddTmode_long() ( ma_read_byte(241) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0__a 0x00f2
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(242); o.write(242,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(242); ma_write_byte(242,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0(o) (o.read(242) & 0x01)>>0
#define get_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action0() ( ma_read_byte(242) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1__a 0x00f2
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(242); o.write(242,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(242); ma_write_byte(242,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1(o) (o.read(242) & 0x02)>>1
#define get_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action1() ( ma_read_byte(242) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2__a 0x00f2
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(242); o.write(242,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(242); ma_write_byte(242,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2(o) (o.read(242) & 0x04)>>2
#define get_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action2() ( ma_read_byte(242) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3__a 0x00f2
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(242); o.write(242,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(242); ma_write_byte(242,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3(o) (o.read(242) & 0x08)>>3
#define get_MA_core__prot_sys__reg__pvdd_uv_action__all_dsp_custom_action3() ( ma_read_byte(242) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__pvdd_low_action__reduceVol__a 0x00f3
#define MA_core__prot_sys__reg__pvdd_low_action__reduceVol__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__pvdd_low_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__reduceVol(o,y) ({ uint8_t __ret = o.read(243); o.write(243,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(243); ma_write_byte(243,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__reduceVol(o) (o.read(243) & 0x01)>>0
#define get_MA_core__prot_sys__reg__pvdd_low_action__reduceVol() ( ma_read_byte(243) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__pvdd_low_action__mute_short__a 0x00f3
#define MA_core__prot_sys__reg__pvdd_low_action__mute_short__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__pvdd_low_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__pvdd_low_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__mute_short(o,y) ({ uint8_t __ret = o.read(243); o.write(243,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(243); ma_write_byte(243,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__mute_short(o) (o.read(243) & 0x02)>>1
#define get_MA_core__prot_sys__reg__pvdd_low_action__mute_short() ( ma_read_byte(243) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short__a 0x00f3
#define MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(243); o.write(243,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(243); ma_write_byte(243,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short(o) (o.read(243) & 0x04)>>2
#define get_MA_core__prot_sys__reg__pvdd_low_action__ser_rapidFire_short() ( ma_read_byte(243) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short__a 0x00f3
#define MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(243); o.write(243,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(243); ma_write_byte(243,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short(o) (o.read(243) & 0x08)>>3
#define get_MA_core__prot_sys__reg__pvdd_low_action__gd_dp_cont_short() ( ma_read_byte(243) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short__a 0x00f3
#define MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(243); o.write(243,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(243); ma_write_byte(243,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short(o) (o.read(243) & 0x10)>>4
#define get_MA_core__prot_sys__reg__pvdd_low_action__dis_lf_clip_rec_short() ( ma_read_byte(243) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long__a 0x00f3
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(243); o.write(243,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(243); ma_write_byte(243,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long(o) (o.read(243) & 0x20)>>5
#define get_MA_core__prot_sys__reg__pvdd_low_action__lowPvddMode_long() ( ma_read_byte(243) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long__a 0x00f3
#define MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(243); o.write(243,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(243); ma_write_byte(243,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long(o) (o.read(243) & 0x40)>>6
#define get_MA_core__prot_sys__reg__pvdd_low_action__lowTmode_long() ( ma_read_byte(243) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long__a 0x00f3
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(243); o.write(243,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(243); ma_write_byte(243,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long(o) (o.read(243) & 0x80)>>7
#define get_MA_core__prot_sys__reg__pvdd_low_action__lowPvddTmode_long() ( ma_read_byte(243) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0__a 0x00f4
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(244); o.write(244,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(244); ma_write_byte(244,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0(o) (o.read(244) & 0x01)>>0
#define get_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action0() ( ma_read_byte(244) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1__a 0x00f4
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(244); o.write(244,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(244); ma_write_byte(244,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1(o) (o.read(244) & 0x02)>>1
#define get_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action1() ( ma_read_byte(244) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2__a 0x00f4
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(244); o.write(244,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(244); ma_write_byte(244,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2(o) (o.read(244) & 0x04)>>2
#define get_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action2() ( ma_read_byte(244) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3__a 0x00f4
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(244); o.write(244,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(244); ma_write_byte(244,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3(o) (o.read(244) & 0x08)>>3
#define get_MA_core__prot_sys__reg__pvdd_low_action__all_dsp_custom_action3() ( ma_read_byte(244) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__pvdd_ov_action__reduceVol__a 0x00f5
#define MA_core__prot_sys__reg__pvdd_ov_action__reduceVol__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__pvdd_ov_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__reduceVol(o,y) ({ uint8_t __ret = o.read(245); o.write(245,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(245); ma_write_byte(245,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__reduceVol(o) (o.read(245) & 0x01)>>0
#define get_MA_core__prot_sys__reg__pvdd_ov_action__reduceVol() ( ma_read_byte(245) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__pvdd_ov_action__mute_short__a 0x00f5
#define MA_core__prot_sys__reg__pvdd_ov_action__mute_short__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__pvdd_ov_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__pvdd_ov_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__mute_short(o,y) ({ uint8_t __ret = o.read(245); o.write(245,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(245); ma_write_byte(245,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__mute_short(o) (o.read(245) & 0x02)>>1
#define get_MA_core__prot_sys__reg__pvdd_ov_action__mute_short() ( ma_read_byte(245) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short__a 0x00f5
#define MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(245); o.write(245,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(245); ma_write_byte(245,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short(o) (o.read(245) & 0x04)>>2
#define get_MA_core__prot_sys__reg__pvdd_ov_action__ser_rapidFire_short() ( ma_read_byte(245) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short__a 0x00f5
#define MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(245); o.write(245,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(245); ma_write_byte(245,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short(o) (o.read(245) & 0x08)>>3
#define get_MA_core__prot_sys__reg__pvdd_ov_action__gd_dp_cont_short() ( ma_read_byte(245) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short__a 0x00f5
#define MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(245); o.write(245,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(245); ma_write_byte(245,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short(o) (o.read(245) & 0x10)>>4
#define get_MA_core__prot_sys__reg__pvdd_ov_action__dis_lf_clip_rec_short() ( ma_read_byte(245) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long__a 0x00f5
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(245); o.write(245,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(245); ma_write_byte(245,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long(o) (o.read(245) & 0x20)>>5
#define get_MA_core__prot_sys__reg__pvdd_ov_action__lowPvddMode_long() ( ma_read_byte(245) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long__a 0x00f5
#define MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(245); o.write(245,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(245); ma_write_byte(245,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long(o) (o.read(245) & 0x40)>>6
#define get_MA_core__prot_sys__reg__pvdd_ov_action__lowTmode_long() ( ma_read_byte(245) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long__a 0x00f5
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(245); o.write(245,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(245); ma_write_byte(245,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long(o) (o.read(245) & 0x80)>>7
#define get_MA_core__prot_sys__reg__pvdd_ov_action__lowPvddTmode_long() ( ma_read_byte(245) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0__a 0x00f6
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(246); o.write(246,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(246); ma_write_byte(246,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0(o) (o.read(246) & 0x01)>>0
#define get_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action0() ( ma_read_byte(246) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1__a 0x00f6
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(246); o.write(246,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(246); ma_write_byte(246,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1(o) (o.read(246) & 0x02)>>1
#define get_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action1() ( ma_read_byte(246) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2__a 0x00f6
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(246); o.write(246,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(246); ma_write_byte(246,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2(o) (o.read(246) & 0x04)>>2
#define get_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action2() ( ma_read_byte(246) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3__a 0x00f6
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(246); o.write(246,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(246); ma_write_byte(246,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3(o) (o.read(246) & 0x08)>>3
#define get_MA_core__prot_sys__reg__pvdd_ov_action__all_dsp_custom_action3() ( ma_read_byte(246) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__no_clock_action__reduceVol__a 0x00f7
#define MA_core__prot_sys__reg__no_clock_action__reduceVol__len 1
#define MA_core__prot_sys__reg__no_clock_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__no_clock_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__no_clock_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__reduceVol(o,y) ({ uint8_t __ret = o.read(247); o.write(247,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__no_clock_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(247); ma_write_byte(247,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__reduceVol(o) (o.read(247) & 0x01)>>0
#define get_MA_core__prot_sys__reg__no_clock_action__reduceVol() ( ma_read_byte(247) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__no_clock_action__mute_short__a 0x00f7
#define MA_core__prot_sys__reg__no_clock_action__mute_short__len 1
#define MA_core__prot_sys__reg__no_clock_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__no_clock_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__no_clock_action__mute_short__reset 0x01
#define MA_core__prot_sys__reg__no_clock_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__mute_short(o,y) ({ uint8_t __ret = o.read(247); o.write(247,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__no_clock_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(247); ma_write_byte(247,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__mute_short(o) (o.read(247) & 0x02)>>1
#define get_MA_core__prot_sys__reg__no_clock_action__mute_short() ( ma_read_byte(247) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short__a 0x00f7
#define MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(247); o.write(247,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(247); ma_write_byte(247,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short(o) (o.read(247) & 0x04)>>2
#define get_MA_core__prot_sys__reg__no_clock_action__ser_rapidFire_short() ( ma_read_byte(247) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short__a 0x00f7
#define MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(247); o.write(247,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(247); ma_write_byte(247,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short(o) (o.read(247) & 0x08)>>3
#define get_MA_core__prot_sys__reg__no_clock_action__gd_dp_cont_short() ( ma_read_byte(247) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short__a 0x00f7
#define MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(247); o.write(247,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(247); ma_write_byte(247,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short(o) (o.read(247) & 0x10)>>4
#define get_MA_core__prot_sys__reg__no_clock_action__dis_lf_clip_rec_short() ( ma_read_byte(247) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long__a 0x00f7
#define MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(247); o.write(247,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(247); ma_write_byte(247,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long(o) (o.read(247) & 0x20)>>5
#define get_MA_core__prot_sys__reg__no_clock_action__lowPvddMode_long() ( ma_read_byte(247) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__no_clock_action__lowTmode_long__a 0x00f7
#define MA_core__prot_sys__reg__no_clock_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__no_clock_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__no_clock_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__no_clock_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(247); o.write(247,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__no_clock_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(247); ma_write_byte(247,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__lowTmode_long(o) (o.read(247) & 0x40)>>6
#define get_MA_core__prot_sys__reg__no_clock_action__lowTmode_long() ( ma_read_byte(247) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long__a 0x00f7
#define MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(247); o.write(247,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(247); ma_write_byte(247,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long(o) (o.read(247) & 0x80)>>7
#define get_MA_core__prot_sys__reg__no_clock_action__lowPvddTmode_long() ( ma_read_byte(247) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0__a 0x00f8
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(248); o.write(248,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(248); ma_write_byte(248,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0(o) (o.read(248) & 0x01)>>0
#define get_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action0() ( ma_read_byte(248) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1__a 0x00f8
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(248); o.write(248,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(248); ma_write_byte(248,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1(o) (o.read(248) & 0x02)>>1
#define get_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action1() ( ma_read_byte(248) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2__a 0x00f8
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(248); o.write(248,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(248); ma_write_byte(248,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2(o) (o.read(248) & 0x04)>>2
#define get_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action2() ( ma_read_byte(248) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3__a 0x00f8
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(248); o.write(248,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(248); ma_write_byte(248,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3(o) (o.read(248) & 0x08)>>3
#define get_MA_core__prot_sys__reg__no_clock_action__all_dsp_custom_action3() ( ma_read_byte(248) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__no_audio_action__reduceVol__a 0x00f9
#define MA_core__prot_sys__reg__no_audio_action__reduceVol__len 1
#define MA_core__prot_sys__reg__no_audio_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__no_audio_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__no_audio_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__reduceVol(o,y) ({ uint8_t __ret = o.read(249); o.write(249,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__no_audio_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(249); ma_write_byte(249,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__reduceVol(o) (o.read(249) & 0x01)>>0
#define get_MA_core__prot_sys__reg__no_audio_action__reduceVol() ( ma_read_byte(249) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__no_audio_action__mute_short__a 0x00f9
#define MA_core__prot_sys__reg__no_audio_action__mute_short__len 1
#define MA_core__prot_sys__reg__no_audio_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__no_audio_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__no_audio_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__mute_short(o,y) ({ uint8_t __ret = o.read(249); o.write(249,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__no_audio_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(249); ma_write_byte(249,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__mute_short(o) (o.read(249) & 0x02)>>1
#define get_MA_core__prot_sys__reg__no_audio_action__mute_short() ( ma_read_byte(249) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short__a 0x00f9
#define MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(249); o.write(249,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(249); ma_write_byte(249,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short(o) (o.read(249) & 0x04)>>2
#define get_MA_core__prot_sys__reg__no_audio_action__ser_rapidFire_short() ( ma_read_byte(249) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short__a 0x00f9
#define MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(249); o.write(249,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(249); ma_write_byte(249,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short(o) (o.read(249) & 0x08)>>3
#define get_MA_core__prot_sys__reg__no_audio_action__gd_dp_cont_short() ( ma_read_byte(249) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short__a 0x00f9
#define MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(249); o.write(249,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(249); ma_write_byte(249,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short(o) (o.read(249) & 0x10)>>4
#define get_MA_core__prot_sys__reg__no_audio_action__dis_lf_clip_rec_short() ( ma_read_byte(249) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long__a 0x00f9
#define MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(249); o.write(249,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(249); ma_write_byte(249,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long(o) (o.read(249) & 0x20)>>5
#define get_MA_core__prot_sys__reg__no_audio_action__lowPvddMode_long() ( ma_read_byte(249) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__no_audio_action__lowTmode_long__a 0x00f9
#define MA_core__prot_sys__reg__no_audio_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__no_audio_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__no_audio_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__no_audio_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(249); o.write(249,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__no_audio_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(249); ma_write_byte(249,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__lowTmode_long(o) (o.read(249) & 0x40)>>6
#define get_MA_core__prot_sys__reg__no_audio_action__lowTmode_long() ( ma_read_byte(249) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long__a 0x00f9
#define MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(249); o.write(249,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(249); ma_write_byte(249,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long(o) (o.read(249) & 0x80)>>7
#define get_MA_core__prot_sys__reg__no_audio_action__lowPvddTmode_long() ( ma_read_byte(249) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0__a 0x00fa
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(250); o.write(250,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(250); ma_write_byte(250,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0(o) (o.read(250) & 0x01)>>0
#define get_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action0() ( ma_read_byte(250) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1__a 0x00fa
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(250); o.write(250,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(250); ma_write_byte(250,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1(o) (o.read(250) & 0x02)>>1
#define get_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action1() ( ma_read_byte(250) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2__a 0x00fa
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(250); o.write(250,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(250); ma_write_byte(250,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2(o) (o.read(250) & 0x04)>>2
#define get_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action2() ( ma_read_byte(250) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3__a 0x00fa
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(250); o.write(250,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(250); ma_write_byte(250,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3(o) (o.read(250) & 0x08)>>3
#define get_MA_core__prot_sys__reg__no_audio_action__all_dsp_custom_action3() ( ma_read_byte(250) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__temp_low_action__reduceVol__a 0x00fb
#define MA_core__prot_sys__reg__temp_low_action__reduceVol__len 1
#define MA_core__prot_sys__reg__temp_low_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__temp_low_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__temp_low_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__reduceVol(o,y) ({ uint8_t __ret = o.read(251); o.write(251,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__temp_low_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(251); ma_write_byte(251,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__reduceVol(o) (o.read(251) & 0x01)>>0
#define get_MA_core__prot_sys__reg__temp_low_action__reduceVol() ( ma_read_byte(251) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__temp_low_action__mute_short__a 0x00fb
#define MA_core__prot_sys__reg__temp_low_action__mute_short__len 1
#define MA_core__prot_sys__reg__temp_low_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__temp_low_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__temp_low_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__mute_short(o,y) ({ uint8_t __ret = o.read(251); o.write(251,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__temp_low_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(251); ma_write_byte(251,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__mute_short(o) (o.read(251) & 0x02)>>1
#define get_MA_core__prot_sys__reg__temp_low_action__mute_short() ( ma_read_byte(251) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short__a 0x00fb
#define MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(251); o.write(251,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(251); ma_write_byte(251,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short(o) (o.read(251) & 0x04)>>2
#define get_MA_core__prot_sys__reg__temp_low_action__ser_rapidFire_short() ( ma_read_byte(251) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short__a 0x00fb
#define MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(251); o.write(251,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(251); ma_write_byte(251,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short(o) (o.read(251) & 0x08)>>3
#define get_MA_core__prot_sys__reg__temp_low_action__gd_dp_cont_short() ( ma_read_byte(251) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short__a 0x00fb
#define MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(251); o.write(251,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(251); ma_write_byte(251,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short(o) (o.read(251) & 0x10)>>4
#define get_MA_core__prot_sys__reg__temp_low_action__dis_lf_clip_rec_short() ( ma_read_byte(251) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long__a 0x00fb
#define MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(251); o.write(251,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(251); ma_write_byte(251,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long(o) (o.read(251) & 0x20)>>5
#define get_MA_core__prot_sys__reg__temp_low_action__lowPvddMode_long() ( ma_read_byte(251) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__temp_low_action__lowTmode_long__a 0x00fb
#define MA_core__prot_sys__reg__temp_low_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__temp_low_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__temp_low_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__temp_low_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(251); o.write(251,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__temp_low_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(251); ma_write_byte(251,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__lowTmode_long(o) (o.read(251) & 0x40)>>6
#define get_MA_core__prot_sys__reg__temp_low_action__lowTmode_long() ( ma_read_byte(251) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long__a 0x00fb
#define MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(251); o.write(251,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(251); ma_write_byte(251,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long(o) (o.read(251) & 0x80)>>7
#define get_MA_core__prot_sys__reg__temp_low_action__lowPvddTmode_long() ( ma_read_byte(251) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0__a 0x00fc
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(252); o.write(252,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(252); ma_write_byte(252,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0(o) (o.read(252) & 0x01)>>0
#define get_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action0() ( ma_read_byte(252) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1__a 0x00fc
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(252); o.write(252,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(252); ma_write_byte(252,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1(o) (o.read(252) & 0x02)>>1
#define get_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action1() ( ma_read_byte(252) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2__a 0x00fc
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(252); o.write(252,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(252); ma_write_byte(252,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2(o) (o.read(252) & 0x04)>>2
#define get_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action2() ( ma_read_byte(252) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3__a 0x00fc
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(252); o.write(252,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(252); ma_write_byte(252,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3(o) (o.read(252) & 0x08)>>3
#define get_MA_core__prot_sys__reg__temp_low_action__all_dsp_custom_action3() ( ma_read_byte(252) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__pvddT_low_action__reduceVol__a 0x00fd
#define MA_core__prot_sys__reg__pvddT_low_action__reduceVol__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__pvddT_low_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__reduceVol(o,y) ({ uint8_t __ret = o.read(253); o.write(253,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(253); ma_write_byte(253,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__reduceVol(o) (o.read(253) & 0x01)>>0
#define get_MA_core__prot_sys__reg__pvddT_low_action__reduceVol() ( ma_read_byte(253) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__pvddT_low_action__mute_short__a 0x00fd
#define MA_core__prot_sys__reg__pvddT_low_action__mute_short__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__pvddT_low_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__pvddT_low_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__mute_short(o,y) ({ uint8_t __ret = o.read(253); o.write(253,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(253); ma_write_byte(253,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__mute_short(o) (o.read(253) & 0x02)>>1
#define get_MA_core__prot_sys__reg__pvddT_low_action__mute_short() ( ma_read_byte(253) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short__a 0x00fd
#define MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(253); o.write(253,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(253); ma_write_byte(253,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short(o) (o.read(253) & 0x04)>>2
#define get_MA_core__prot_sys__reg__pvddT_low_action__ser_rapidFire_short() ( ma_read_byte(253) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short__a 0x00fd
#define MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(253); o.write(253,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(253); ma_write_byte(253,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short(o) (o.read(253) & 0x08)>>3
#define get_MA_core__prot_sys__reg__pvddT_low_action__gd_dp_cont_short() ( ma_read_byte(253) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short__a 0x00fd
#define MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(253); o.write(253,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(253); ma_write_byte(253,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short(o) (o.read(253) & 0x10)>>4
#define get_MA_core__prot_sys__reg__pvddT_low_action__dis_lf_clip_rec_short() ( ma_read_byte(253) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long__a 0x00fd
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(253); o.write(253,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(253); ma_write_byte(253,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long(o) (o.read(253) & 0x20)>>5
#define get_MA_core__prot_sys__reg__pvddT_low_action__lowPvddMode_long() ( ma_read_byte(253) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long__a 0x00fd
#define MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(253); o.write(253,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(253); ma_write_byte(253,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long(o) (o.read(253) & 0x40)>>6
#define get_MA_core__prot_sys__reg__pvddT_low_action__lowTmode_long() ( ma_read_byte(253) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long__a 0x00fd
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(253); o.write(253,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(253); ma_write_byte(253,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long(o) (o.read(253) & 0x80)>>7
#define get_MA_core__prot_sys__reg__pvddT_low_action__lowPvddTmode_long() ( ma_read_byte(253) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0__a 0x00fe
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(254); o.write(254,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(254); ma_write_byte(254,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0(o) (o.read(254) & 0x01)>>0
#define get_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action0() ( ma_read_byte(254) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1__a 0x00fe
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(254); o.write(254,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(254); ma_write_byte(254,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1(o) (o.read(254) & 0x02)>>1
#define get_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action1() ( ma_read_byte(254) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2__a 0x00fe
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(254); o.write(254,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(254); ma_write_byte(254,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2(o) (o.read(254) & 0x04)>>2
#define get_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action2() ( ma_read_byte(254) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3__a 0x00fe
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(254); o.write(254,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(254); ma_write_byte(254,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3(o) (o.read(254) & 0x08)>>3
#define get_MA_core__prot_sys__reg__pvddT_low_action__all_dsp_custom_action3() ( ma_read_byte(254) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_en---
// High to enable error triger (debug) function
#define MA_core__prot_sys__reg__errTrig_en__a 0x0109
#define MA_core__prot_sys__reg__errTrig_en__len 1
#define MA_core__prot_sys__reg__errTrig_en__mask 0x01
#define MA_core__prot_sys__reg__errTrig_en__shift 0x00
#define MA_core__prot_sys__reg__errTrig_en__reset 0x00
#define MA_core__prot_sys__reg__errTrig_en__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_en(o,y) ({ uint8_t __ret = o.read(265); o.write(265,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__errTrig_en(y) ({ uint8_t __ret = ma_read_byte(265); ma_write_byte(265,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_en(o) (o.read(265) & 0x01)>>0
#define get_MA_core__prot_sys__reg__errTrig_en() ( ma_read_byte(265) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_reset---
// High to trigger a single reset of error trigger
#define MA_core__prot_sys__reg__errTrig_reset__a 0x0109
#define MA_core__prot_sys__reg__errTrig_reset__len 1
#define MA_core__prot_sys__reg__errTrig_reset__mask 0x02
#define MA_core__prot_sys__reg__errTrig_reset__shift 0x01
#define MA_core__prot_sys__reg__errTrig_reset__reset 0x00
#define MA_core__prot_sys__reg__errTrig_reset__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_reset(o,y) ({ uint8_t __ret = o.read(265); o.write(265,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__errTrig_reset(y) ({ uint8_t __ret = ma_read_byte(265); ma_write_byte(265,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_reset(o) (o.read(265) & 0x02)>>1
#define get_MA_core__prot_sys__reg__errTrig_reset() ( ma_read_byte(265) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__errVect_trig_mask__errVector_ch0---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp] <-- clip_stuck is hidden
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0__a 0x010a
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0__len 5
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0__mask 0x1f
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0__shift 0x00
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0__reset 0x00
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0(o,y) ({ uint8_t __ret = o.read(266); o.write(266,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0(y) ({ uint8_t __ret = ma_read_byte(266); ma_write_byte(266,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0(o) (o.read(266) & 0x1f)>>0
#define get_MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch0() ( ma_read_byte(266) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__errVect_trig_mask__errVector_ch1---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp]
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1__a 0x010b
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1__len 5
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1__mask 0x1f
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1__shift 0x00
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1__reset 0x00
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1(o,y) ({ uint8_t __ret = o.read(267); o.write(267,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1(y) ({ uint8_t __ret = ma_read_byte(267); ma_write_byte(267,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1(o) (o.read(267) & 0x1f)>>0
#define get_MA_core__prot_sys__reg__errVect_trig_mask__errVector_ch1() ( ma_read_byte(267) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__errVect_trig_mask__errVector_all__0---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0__a 0x010c
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0__len 8
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0__mask 0xff
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0__shift 0x00
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0__reset 0x00
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0(o,y) o.write(268,y);
#define set_MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0(y) ma_write_byte(268,y);
#define get_obj_MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0(o) (o.read(268) & 0xff)>>0
#define get_MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__0() ( ma_read_byte(268) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__errVect_trig_mask__errVector_all__1---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1__a 0x010d
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1__len 6
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1__mask 0x3f
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1__shift 0x00
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1__reset 0x00
#define MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1(o,y) ({ uint8_t __ret = o.read(269); o.write(269,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1(y) ({ uint8_t __ret = ma_read_byte(269); ma_write_byte(269,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1(o) (o.read(269) & 0x3f)>>0
#define get_MA_core__prot_sys__reg__errVect_trig_mask__errVector_all__1() ( ma_read_byte(269) & 0x3f)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__errLatch_reset---
// Low->high fires single errorLatch unlock event (both channels at once)
#define MA_core__prot_sys__reg__errLatch_reset__a 0x010e
#define MA_core__prot_sys__reg__errLatch_reset__len 1
#define MA_core__prot_sys__reg__errLatch_reset__mask 0x01
#define MA_core__prot_sys__reg__errLatch_reset__shift 0x00
#define MA_core__prot_sys__reg__errLatch_reset__reset 0x00
#define MA_core__prot_sys__reg__errLatch_reset__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errLatch_reset(o,y) ({ uint8_t __ret = o.read(270); o.write(270,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__errLatch_reset(y) ({ uint8_t __ret = ma_read_byte(270); ma_write_byte(270,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__errLatch_reset(o) (o.read(270) & 0x01)>>0
#define get_MA_core__prot_sys__reg__errLatch_reset() ( ma_read_byte(270) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_now__errVector_ch0---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp] <-- clip_stuck is hidden
#define MA_core__prot_sys__errVect_now__errVector_ch0__a 0x0118
#define MA_core__prot_sys__errVect_now__errVector_ch0__len 5
#define MA_core__prot_sys__errVect_now__errVector_ch0__mask 0x1f
#define MA_core__prot_sys__errVect_now__errVector_ch0__shift 0x00
#define MA_core__prot_sys__errVect_now__errVector_ch0__reset 0x00
#define MA_core__prot_sys__errVect_now__errVector_ch0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_now__errVector_ch0(o,y) ({ uint8_t __ret = o.read(280); o.write(280,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__errVect_now__errVector_ch0(y) ({ uint8_t __ret = ma_read_byte(280); ma_write_byte(280,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__errVect_now__errVector_ch0(o) (o.read(280) & 0x1f)>>0
#define get_MA_core__prot_sys__errVect_now__errVector_ch0() ( ma_read_byte(280) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_now__errVector_ch1---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp]
#define MA_core__prot_sys__errVect_now__errVector_ch1__a 0x0119
#define MA_core__prot_sys__errVect_now__errVector_ch1__len 5
#define MA_core__prot_sys__errVect_now__errVector_ch1__mask 0x1f
#define MA_core__prot_sys__errVect_now__errVector_ch1__shift 0x00
#define MA_core__prot_sys__errVect_now__errVector_ch1__reset 0x00
#define MA_core__prot_sys__errVect_now__errVector_ch1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_now__errVector_ch1(o,y) ({ uint8_t __ret = o.read(281); o.write(281,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__errVect_now__errVector_ch1(y) ({ uint8_t __ret = ma_read_byte(281); ma_write_byte(281,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__errVect_now__errVector_ch1(o) (o.read(281) & 0x1f)>>0
#define get_MA_core__prot_sys__errVect_now__errVector_ch1() ( ma_read_byte(281) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_now__errVector_all__0---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__errVect_now__errVector_all__0__a 0x011a
#define MA_core__prot_sys__errVect_now__errVector_all__0__len 8
#define MA_core__prot_sys__errVect_now__errVector_all__0__mask 0xff
#define MA_core__prot_sys__errVect_now__errVector_all__0__shift 0x00
#define MA_core__prot_sys__errVect_now__errVector_all__0__reset 0x00
#define MA_core__prot_sys__errVect_now__errVector_all__0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_now__errVector_all__0(o,y) o.write(282,y);
#define set_MA_core__prot_sys__errVect_now__errVector_all__0(y) ma_write_byte(282,y);
#define get_obj_MA_core__prot_sys__errVect_now__errVector_all__0(o) (o.read(282) & 0xff)>>0
#define get_MA_core__prot_sys__errVect_now__errVector_all__0() ( ma_read_byte(282) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_now__errVector_all__1---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__errVect_now__errVector_all__1__a 0x011b
#define MA_core__prot_sys__errVect_now__errVector_all__1__len 6
#define MA_core__prot_sys__errVect_now__errVector_all__1__mask 0x3f
#define MA_core__prot_sys__errVect_now__errVector_all__1__shift 0x00
#define MA_core__prot_sys__errVect_now__errVector_all__1__reset 0x00
#define MA_core__prot_sys__errVect_now__errVector_all__1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_now__errVector_all__1(o,y) ({ uint8_t __ret = o.read(283); o.write(283,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__prot_sys__errVect_now__errVector_all__1(y) ({ uint8_t __ret = ma_read_byte(283); ma_write_byte(283,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__prot_sys__errVect_now__errVector_all__1(o) (o.read(283) & 0x3f)>>0
#define get_MA_core__prot_sys__errVect_now__errVector_all__1() ( ma_read_byte(283) & 0x3f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc__errVector_ch0---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp] <-- clip_stuck is hidden
#define MA_core__prot_sys__errVect_acc__errVector_ch0__a 0x011c
#define MA_core__prot_sys__errVect_acc__errVector_ch0__len 5
#define MA_core__prot_sys__errVect_acc__errVector_ch0__mask 0x1f
#define MA_core__prot_sys__errVect_acc__errVector_ch0__shift 0x00
#define MA_core__prot_sys__errVect_acc__errVector_ch0__reset 0x00
#define MA_core__prot_sys__errVect_acc__errVector_ch0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc__errVector_ch0(o,y) ({ uint8_t __ret = o.read(284); o.write(284,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__errVect_acc__errVector_ch0(y) ({ uint8_t __ret = ma_read_byte(284); ma_write_byte(284,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__errVect_acc__errVector_ch0(o) (o.read(284) & 0x1f)>>0
#define get_MA_core__prot_sys__errVect_acc__errVector_ch0() ( ma_read_byte(284) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc__errVector_ch1---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp]
#define MA_core__prot_sys__errVect_acc__errVector_ch1__a 0x011d
#define MA_core__prot_sys__errVect_acc__errVector_ch1__len 5
#define MA_core__prot_sys__errVect_acc__errVector_ch1__mask 0x1f
#define MA_core__prot_sys__errVect_acc__errVector_ch1__shift 0x00
#define MA_core__prot_sys__errVect_acc__errVector_ch1__reset 0x00
#define MA_core__prot_sys__errVect_acc__errVector_ch1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc__errVector_ch1(o,y) ({ uint8_t __ret = o.read(285); o.write(285,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__errVect_acc__errVector_ch1(y) ({ uint8_t __ret = ma_read_byte(285); ma_write_byte(285,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__errVect_acc__errVector_ch1(o) (o.read(285) & 0x1f)>>0
#define get_MA_core__prot_sys__errVect_acc__errVector_ch1() ( ma_read_byte(285) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc__errVector_all__0---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__errVect_acc__errVector_all__0__a 0x011e
#define MA_core__prot_sys__errVect_acc__errVector_all__0__len 8
#define MA_core__prot_sys__errVect_acc__errVector_all__0__mask 0xff
#define MA_core__prot_sys__errVect_acc__errVector_all__0__shift 0x00
#define MA_core__prot_sys__errVect_acc__errVector_all__0__reset 0x00
#define MA_core__prot_sys__errVect_acc__errVector_all__0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc__errVector_all__0(o,y) o.write(286,y);
#define set_MA_core__prot_sys__errVect_acc__errVector_all__0(y) ma_write_byte(286,y);
#define get_obj_MA_core__prot_sys__errVect_acc__errVector_all__0(o) (o.read(286) & 0xff)>>0
#define get_MA_core__prot_sys__errVect_acc__errVector_all__0() ( ma_read_byte(286) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc__errVector_all__1---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__errVect_acc__errVector_all__1__a 0x011f
#define MA_core__prot_sys__errVect_acc__errVector_all__1__len 6
#define MA_core__prot_sys__errVect_acc__errVector_all__1__mask 0x3f
#define MA_core__prot_sys__errVect_acc__errVector_all__1__shift 0x00
#define MA_core__prot_sys__errVect_acc__errVector_all__1__reset 0x00
#define MA_core__prot_sys__errVect_acc__errVector_all__1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc__errVector_all__1(o,y) ({ uint8_t __ret = o.read(287); o.write(287,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__prot_sys__errVect_acc__errVector_all__1(y) ({ uint8_t __ret = ma_read_byte(287); ma_write_byte(287,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__prot_sys__errVect_acc__errVector_all__1(o) (o.read(287) & 0x3f)>>0
#define get_MA_core__prot_sys__errVect_acc__errVector_all__1() ( ma_read_byte(287) & 0x3f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc_trig__errVector_ch0---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp] <-- clip_stuck is hidden
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch0__a 0x0120
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch0__len 5
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch0__mask 0x1f
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch0__shift 0x00
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch0__reset 0x00
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc_trig__errVector_ch0(o,y) ({ uint8_t __ret = o.read(288); o.write(288,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__errVect_acc_trig__errVector_ch0(y) ({ uint8_t __ret = ma_read_byte(288); ma_write_byte(288,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__errVect_acc_trig__errVector_ch0(o) (o.read(288) & 0x1f)>>0
#define get_MA_core__prot_sys__errVect_acc_trig__errVector_ch0() ( ma_read_byte(288) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc_trig__errVector_ch1---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp]
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch1__a 0x0121
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch1__len 5
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch1__mask 0x1f
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch1__shift 0x00
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch1__reset 0x00
#define MA_core__prot_sys__errVect_acc_trig__errVector_ch1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc_trig__errVector_ch1(o,y) ({ uint8_t __ret = o.read(289); o.write(289,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__errVect_acc_trig__errVector_ch1(y) ({ uint8_t __ret = ma_read_byte(289); ma_write_byte(289,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__errVect_acc_trig__errVector_ch1(o) (o.read(289) & 0x1f)>>0
#define get_MA_core__prot_sys__errVect_acc_trig__errVector_ch1() ( ma_read_byte(289) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc_trig__errVector_all__0---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__0__a 0x0122
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__0__len 8
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__0__mask 0xff
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__0__shift 0x00
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__0__reset 0x00
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc_trig__errVector_all__0(o,y) o.write(290,y);
#define set_MA_core__prot_sys__errVect_acc_trig__errVector_all__0(y) ma_write_byte(290,y);
#define get_obj_MA_core__prot_sys__errVect_acc_trig__errVector_all__0(o) (o.read(290) & 0xff)>>0
#define get_MA_core__prot_sys__errVect_acc_trig__errVector_all__0() ( ma_read_byte(290) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc_trig__errVector_all__1---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__1__a 0x0123
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__1__len 6
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__1__mask 0x3f
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__1__shift 0x00
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__1__reset 0x00
#define MA_core__prot_sys__errVect_acc_trig__errVector_all__1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc_trig__errVector_all__1(o,y) ({ uint8_t __ret = o.read(291); o.write(291,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__prot_sys__errVect_acc_trig__errVector_all__1(y) ({ uint8_t __ret = ma_read_byte(291); ma_write_byte(291,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__prot_sys__errVect_acc_trig__errVector_all__1(o) (o.read(291) & 0x3f)>>0
#define get_MA_core__prot_sys__errVect_acc_trig__errVector_all__1() ( ma_read_byte(291) & 0x3f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_trig__errVector_ch0---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp] <-- clip_stuck is hidden
#define MA_core__prot_sys__errVect_trig__errVector_ch0__a 0x0124
#define MA_core__prot_sys__errVect_trig__errVector_ch0__len 5
#define MA_core__prot_sys__errVect_trig__errVector_ch0__mask 0x1f
#define MA_core__prot_sys__errVect_trig__errVector_ch0__shift 0x00
#define MA_core__prot_sys__errVect_trig__errVector_ch0__reset 0x00
#define MA_core__prot_sys__errVect_trig__errVector_ch0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_trig__errVector_ch0(o,y) ({ uint8_t __ret = o.read(292); o.write(292,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__errVect_trig__errVector_ch0(y) ({ uint8_t __ret = ma_read_byte(292); ma_write_byte(292,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__errVect_trig__errVector_ch0(o) (o.read(292) & 0x1f)>>0
#define get_MA_core__prot_sys__errVect_trig__errVector_ch0() ( ma_read_byte(292) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_trig__errVector_ch1---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp]
#define MA_core__prot_sys__errVect_trig__errVector_ch1__a 0x0125
#define MA_core__prot_sys__errVect_trig__errVector_ch1__len 5
#define MA_core__prot_sys__errVect_trig__errVector_ch1__mask 0x1f
#define MA_core__prot_sys__errVect_trig__errVector_ch1__shift 0x00
#define MA_core__prot_sys__errVect_trig__errVector_ch1__reset 0x00
#define MA_core__prot_sys__errVect_trig__errVector_ch1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_trig__errVector_ch1(o,y) ({ uint8_t __ret = o.read(293); o.write(293,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__errVect_trig__errVector_ch1(y) ({ uint8_t __ret = ma_read_byte(293); ma_write_byte(293,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__errVect_trig__errVector_ch1(o) (o.read(293) & 0x1f)>>0
#define get_MA_core__prot_sys__errVect_trig__errVector_ch1() ( ma_read_byte(293) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_trig__errVector_all__0---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__errVect_trig__errVector_all__0__a 0x0126
#define MA_core__prot_sys__errVect_trig__errVector_all__0__len 8
#define MA_core__prot_sys__errVect_trig__errVector_all__0__mask 0xff
#define MA_core__prot_sys__errVect_trig__errVector_all__0__shift 0x00
#define MA_core__prot_sys__errVect_trig__errVector_all__0__reset 0x00
#define MA_core__prot_sys__errVect_trig__errVector_all__0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_trig__errVector_all__0(o,y) o.write(294,y);
#define set_MA_core__prot_sys__errVect_trig__errVector_all__0(y) ma_write_byte(294,y);
#define get_obj_MA_core__prot_sys__errVect_trig__errVector_all__0(o) (o.read(294) & 0xff)>>0
#define get_MA_core__prot_sys__errVect_trig__errVector_all__0() ( ma_read_byte(294) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_trig__errVector_all__1---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__errVect_trig__errVector_all__1__a 0x0127
#define MA_core__prot_sys__errVect_trig__errVector_all__1__len 6
#define MA_core__prot_sys__errVect_trig__errVector_all__1__mask 0x3f
#define MA_core__prot_sys__errVect_trig__errVector_all__1__shift 0x00
#define MA_core__prot_sys__errVect_trig__errVector_all__1__reset 0x00
#define MA_core__prot_sys__errVect_trig__errVector_all__1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_trig__errVector_all__1(o,y) ({ uint8_t __ret = o.read(295); o.write(295,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__prot_sys__errVect_trig__errVector_all__1(y) ({ uint8_t __ret = ma_read_byte(295); ma_write_byte(295,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__prot_sys__errVect_trig__errVector_all__1(o) (o.read(295) & 0x3f)>>0
#define get_MA_core__prot_sys__errVect_trig__errVector_all__1() ( ma_read_byte(295) & 0x3f)>>0
//------------------------------------------------------------------------------core__prot_sys__errTrig_trigged---
// High if error trigger system has triggered (**hidden**)
#define MA_core__prot_sys__errTrig_trigged__a 0x0128
#define MA_core__prot_sys__errTrig_trigged__len 1
#define MA_core__prot_sys__errTrig_trigged__mask 0x01
#define MA_core__prot_sys__errTrig_trigged__shift 0x00
#define MA_core__prot_sys__errTrig_trigged__reset 0x00
#define MA_core__prot_sys__errTrig_trigged__inputonly 1
#define set_obj_MA_core__prot_sys__errTrig_trigged(o,y) ({ uint8_t __ret = o.read(296); o.write(296,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__errTrig_trigged(y) ({ uint8_t __ret = ma_read_byte(296); ma_write_byte(296,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__errTrig_trigged(o) (o.read(296) & 0x01)>>0
#define get_MA_core__prot_sys__errTrig_trigged() ( ma_read_byte(296) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__errLatch_state0---
// High if ch0 error high-Z latch is active (locked) (**public**)
#define MA_core__prot_sys__errLatch_state0__a 0x0128
#define MA_core__prot_sys__errLatch_state0__len 1
#define MA_core__prot_sys__errLatch_state0__mask 0x02
#define MA_core__prot_sys__errLatch_state0__shift 0x01
#define MA_core__prot_sys__errLatch_state0__reset 0x00
#define MA_core__prot_sys__errLatch_state0__inputonly 1
#define set_obj_MA_core__prot_sys__errLatch_state0(o,y) ({ uint8_t __ret = o.read(296); o.write(296,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__errLatch_state0(y) ({ uint8_t __ret = ma_read_byte(296); ma_write_byte(296,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__errLatch_state0(o) (o.read(296) & 0x02)>>1
#define get_MA_core__prot_sys__errLatch_state0() ( ma_read_byte(296) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__errLatch_state1---
// High if ch1 error high-Z latch is active (locked) (**public**)
#define MA_core__prot_sys__errLatch_state1__a 0x0128
#define MA_core__prot_sys__errLatch_state1__len 1
#define MA_core__prot_sys__errLatch_state1__mask 0x04
#define MA_core__prot_sys__errLatch_state1__shift 0x02
#define MA_core__prot_sys__errLatch_state1__reset 0x00
#define MA_core__prot_sys__errLatch_state1__inputonly 1
#define set_obj_MA_core__prot_sys__errLatch_state1(o,y) ({ uint8_t __ret = o.read(296); o.write(296,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__errLatch_state1(y) ({ uint8_t __ret = ma_read_byte(296); ma_write_byte(296,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__errLatch_state1(o) (o.read(296) & 0x04)>>2
#define get_MA_core__prot_sys__errLatch_state1() ( ma_read_byte(296) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__otp__dc_prot_mode_fast---
// Set high for debug-mode (fast-acting) DC protection.
#define MA_core__prot_sys__otp__dc_prot_mode_fast__a 0x00cd
#define MA_core__prot_sys__otp__dc_prot_mode_fast__len 1
#define MA_core__prot_sys__otp__dc_prot_mode_fast__mask 0x10
#define MA_core__prot_sys__otp__dc_prot_mode_fast__shift 0x04
#define MA_core__prot_sys__otp__dc_prot_mode_fast__reset 0x00
#define MA_core__prot_sys__otp__dc_prot_mode_fast__inputonly 0
#define set_obj_MA_core__prot_sys__otp__dc_prot_mode_fast(o,y) ({ uint8_t __ret = o.read(205); o.write(205,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__otp__dc_prot_mode_fast(y) ({ uint8_t __ret = ma_read_byte(205); ma_write_byte(205,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__otp__dc_prot_mode_fast(o) (o.read(205) & 0x10)>>4
#define get_MA_core__prot_sys__otp__dc_prot_mode_fast() ( ma_read_byte(205) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__otp__dc_trip_level---
// DC protection timeout level
#define MA_core__prot_sys__otp__dc_trip_level__a 0x00cd
#define MA_core__prot_sys__otp__dc_trip_level__len 3
#define MA_core__prot_sys__otp__dc_trip_level__mask 0xe0
#define MA_core__prot_sys__otp__dc_trip_level__shift 0x05
#define MA_core__prot_sys__otp__dc_trip_level__reset 0x00
#define MA_core__prot_sys__otp__dc_trip_level__inputonly 0
#define set_obj_MA_core__prot_sys__otp__dc_trip_level(o,y) ({ uint8_t __ret = o.read(205); o.write(205,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__prot_sys__otp__dc_trip_level(y) ({ uint8_t __ret = ma_read_byte(205); ma_write_byte(205,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__prot_sys__otp__dc_trip_level(o) (o.read(205) & 0xe0)>>5
#define get_MA_core__prot_sys__otp__dc_trip_level() ( ma_read_byte(205) & 0xe0)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp] <-- clip_stuck is hidden
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0__a 0x010f
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0__len 5
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0__mask 0x1f
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0__shift 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0__reset 0x1f
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0(o,y) ({ uint8_t __ret = o.read(271); o.write(271,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0(y) ({ uint8_t __ret = ma_read_byte(271); ma_write_byte(271,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0(o) (o.read(271) & 0x1f)>>0
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch0() ( ma_read_byte(271) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1---
// [clip_stuck  dc  vcf_err  ocp_severe  ocp]
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1__a 0x0110
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1__len 5
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1__mask 0x1f
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1__shift 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1__reset 0x1f
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1(o,y) ({ uint8_t __ret = o.read(272); o.write(272,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1(y) ({ uint8_t __ret = ma_read_byte(272); ma_write_byte(272,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1(o) (o.read(272) & 0x1f)>>0
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_ch1() ( ma_read_byte(272) & 0x1f)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0__a 0x0111
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0__len 8
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0__mask 0xff
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0__shift 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0__reset 0x77
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0(o,y) o.write(273,y);
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0(y) ma_write_byte(273,y);
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0(o) (o.read(273) & 0xff)>>0
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__0() ( ma_read_byte(273) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1---
// 13					  12             11            10             9            8
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1__a 0x0112
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1__len 6
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1__mask 0x3f
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1__shift 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1(o,y) ({ uint8_t __ret = o.read(274); o.write(274,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1(y) ({ uint8_t __ret = ma_read_byte(274); ma_write_byte(274,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1(o) (o.read(274) & 0x3f)>>0
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_errNow__errVector_all__1() ( ma_read_byte(274) & 0x3f)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en---
// High to enable Cfly precharge resistors in channel
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en__a 0x0113
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en__mask 0x01
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en__shift 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en(o,y) ({ uint8_t __ret = o.read(275); o.write(275,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en(y) ({ uint8_t __ret = ma_read_byte(275); ma_write_byte(275,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en(o) (o.read(275) & 0x01)>>0
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pchg_en() ( ma_read_byte(275) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire---
// High to channel gate driver serial links
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire__a 0x0113
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire__mask 0x02
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire__shift 0x01
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire(o,y) ({ uint8_t __ret = o.read(275); o.write(275,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire(y) ({ uint8_t __ret = ma_read_byte(275); ma_write_byte(275,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire(o) (o.read(275) & 0x02)>>1
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_ser_rapidFire() ( ma_read_byte(275) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol---
// High to request a channel volume reduction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol__a 0x0113
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol__mask 0x08
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol__shift 0x03
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol(o,y) ({ uint8_t __ret = o.read(275); o.write(275,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol(y) ({ uint8_t __ret = ma_read_byte(275); ma_write_byte(275,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol(o) (o.read(275) & 0x08)>>3
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_reduceVol() ( ma_read_byte(275) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute---
// High to force channel mute
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute__a 0x0113
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute__mask 0x10
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute__shift 0x04
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute__reset 0x01
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute(o,y) ({ uint8_t __ret = o.read(275); o.write(275,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute(y) ({ uint8_t __ret = ma_read_byte(275); ma_write_byte(275,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute(o) (o.read(275) & 0x10)>>4
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_mute() ( ma_read_byte(275) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force---
// High to force continuous gate driver level shifter signaling for channel
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force__a 0x0113
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force__mask 0x20
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force__shift 0x05
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force(o,y) ({ uint8_t __ret = o.read(275); o.write(275,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force(y) ({ uint8_t __ret = ma_read_byte(275); ma_write_byte(275,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force(o) (o.read(275) & 0x20)>>5
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_gd_dp_cont_force() ( ma_read_byte(275) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec---
// High to force off channel clip recovery (in loop filter)
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec__a 0x0113
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec__mask 0x40
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec__shift 0x06
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec(o,y) ({ uint8_t __ret = o.read(275); o.write(275,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec(y) ({ uint8_t __ret = ma_read_byte(275); ma_write_byte(275,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec(o) (o.read(275) & 0x40)>>6
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dis_lf_clip_rec() ( ma_read_byte(275) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max---
// High to for max. Power Mode for channel
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max__a 0x0113
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max__mask 0x80
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max__shift 0x07
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max(o,y) ({ uint8_t __ret = o.read(275); o.write(275,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max(y) ({ uint8_t __ret = ma_read_byte(275); ma_write_byte(275,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max(o) (o.read(275) & 0x80)>>7
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_powerMode_max() ( ma_read_byte(275) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0---
// Custom handle for DSP interaction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0__a 0x0114
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(276); o.write(276,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(276); ma_write_byte(276,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0(o) (o.read(276) & 0x01)>>0
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action0() ( ma_read_byte(276) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1---
// Custom handle for DSP interaction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1__a 0x0114
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(276); o.write(276,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(276); ma_write_byte(276,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1(o) (o.read(276) & 0x02)>>1
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action1() ( ma_read_byte(276) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2---
// Custom handle for DSP interaction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2__a 0x0114
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(276); o.write(276,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(276); ma_write_byte(276,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2(o) (o.read(276) & 0x04)>>2
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action2() ( ma_read_byte(276) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3---
// Custom handle for DSP interaction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3__a 0x0114
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(276); o.write(276,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(276); ma_write_byte(276,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3(o) (o.read(276) & 0x08)>>3
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_dsp_custom_action3() ( ma_read_byte(276) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode---
// High to force chip to enter "low-Pvdd" operation
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode__a 0x0115
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode__mask 0x01
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode__shift 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode(o,y) ({ uint8_t __ret = o.read(277); o.write(277,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode(y) ({ uint8_t __ret = ma_read_byte(277); ma_write_byte(277,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode(o) (o.read(277) & 0x01)>>0
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddMode() ( ma_read_byte(277) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode---
// High to force chip to enter "temp-temperature" operation
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode__a 0x0115
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode__mask 0x02
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode__shift 0x01
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode(o,y) ({ uint8_t __ret = o.read(277); o.write(277,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode(y) ({ uint8_t __ret = ma_read_byte(277); ma_write_byte(277,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode(o) (o.read(277) & 0x02)>>1
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowTmode() ( ma_read_byte(277) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode---
// High to force chip to enter "low Pvdd and temperature" operation
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode__a 0x0115
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode__mask 0x04
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode__shift 0x02
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode(o,y) ({ uint8_t __ret = o.read(277); o.write(277,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode(y) ({ uint8_t __ret = ma_read_byte(277); ma_write_byte(277,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode(o) (o.read(277) & 0x04)>>2
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__lowPvddTmode() ( ma_read_byte(277) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0---
// Custom handle for DSP interaction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0__a 0x0115
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0__mask 0x08
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0__shift 0x03
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(277); o.write(277,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(277); ma_write_byte(277,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0(o) (o.read(277) & 0x08)>>3
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action0() ( ma_read_byte(277) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1---
// Custom handle for DSP interaction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1__a 0x0115
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1__mask 0x10
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1__shift 0x04
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(277); o.write(277,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(277); ma_write_byte(277,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1(o) (o.read(277) & 0x10)>>4
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action1() ( ma_read_byte(277) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2---
// Custom handle for DSP interaction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2__a 0x0115
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2__mask 0x20
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2__shift 0x05
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(277); o.write(277,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(277); ma_write_byte(277,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2(o) (o.read(277) & 0x20)>>5
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action2() ( ma_read_byte(277) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3---
// Custom handle for DSP interaction
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3__a 0x0115
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3__mask 0x40
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3__shift 0x06
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(277); o.write(277,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(277); ma_write_byte(277,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3(o) (o.read(277) & 0x40)>>6
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_all__all_dsp_custom_action3() ( ma_read_byte(277) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__dsp_err0_action__reduceVol__a 0x00ff
#define MA_core__prot_sys__reg__dsp_err0_action__reduceVol__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__dsp_err0_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__reduceVol(o,y) ({ uint8_t __ret = o.read(255); o.write(255,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(255); ma_write_byte(255,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__reduceVol(o) (o.read(255) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dsp_err0_action__reduceVol() ( ma_read_byte(255) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__dsp_err0_action__mute_short__a 0x00ff
#define MA_core__prot_sys__reg__dsp_err0_action__mute_short__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__dsp_err0_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__dsp_err0_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__mute_short(o,y) ({ uint8_t __ret = o.read(255); o.write(255,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(255); ma_write_byte(255,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__mute_short(o) (o.read(255) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dsp_err0_action__mute_short() ( ma_read_byte(255) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short__a 0x00ff
#define MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(255); o.write(255,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(255); ma_write_byte(255,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short(o) (o.read(255) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dsp_err0_action__ser_rapidFire_short() ( ma_read_byte(255) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short__a 0x00ff
#define MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(255); o.write(255,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(255); ma_write_byte(255,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short(o) (o.read(255) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dsp_err0_action__gd_dp_cont_short() ( ma_read_byte(255) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short__a 0x00ff
#define MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(255); o.write(255,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(255); ma_write_byte(255,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short(o) (o.read(255) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dsp_err0_action__dis_lf_clip_rec_short() ( ma_read_byte(255) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long__a 0x00ff
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(255); o.write(255,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(255); ma_write_byte(255,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long(o) (o.read(255) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dsp_err0_action__lowPvddMode_long() ( ma_read_byte(255) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long__a 0x00ff
#define MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(255); o.write(255,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(255); ma_write_byte(255,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long(o) (o.read(255) & 0x40)>>6
#define get_MA_core__prot_sys__reg__dsp_err0_action__lowTmode_long() ( ma_read_byte(255) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long__a 0x00ff
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(255); o.write(255,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(255); ma_write_byte(255,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long(o) (o.read(255) & 0x80)>>7
#define get_MA_core__prot_sys__reg__dsp_err0_action__lowPvddTmode_long() ( ma_read_byte(255) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0__a 0x0100
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(256); o.write(256,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(256); ma_write_byte(256,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0(o) (o.read(256) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action0() ( ma_read_byte(256) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1__a 0x0100
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(256); o.write(256,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(256); ma_write_byte(256,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1(o) (o.read(256) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action1() ( ma_read_byte(256) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2__a 0x0100
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(256); o.write(256,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(256); ma_write_byte(256,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2(o) (o.read(256) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action2() ( ma_read_byte(256) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3__a 0x0100
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(256); o.write(256,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(256); ma_write_byte(256,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3(o) (o.read(256) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dsp_err0_action__all_dsp_custom_action3() ( ma_read_byte(256) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__dsp_err1_action__reduceVol__a 0x0101
#define MA_core__prot_sys__reg__dsp_err1_action__reduceVol__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__dsp_err1_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__reduceVol(o,y) ({ uint8_t __ret = o.read(257); o.write(257,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(257); ma_write_byte(257,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__reduceVol(o) (o.read(257) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dsp_err1_action__reduceVol() ( ma_read_byte(257) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__dsp_err1_action__mute_short__a 0x0101
#define MA_core__prot_sys__reg__dsp_err1_action__mute_short__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__dsp_err1_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__dsp_err1_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__mute_short(o,y) ({ uint8_t __ret = o.read(257); o.write(257,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(257); ma_write_byte(257,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__mute_short(o) (o.read(257) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dsp_err1_action__mute_short() ( ma_read_byte(257) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short__a 0x0101
#define MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(257); o.write(257,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(257); ma_write_byte(257,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short(o) (o.read(257) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dsp_err1_action__ser_rapidFire_short() ( ma_read_byte(257) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short__a 0x0101
#define MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(257); o.write(257,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(257); ma_write_byte(257,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short(o) (o.read(257) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dsp_err1_action__gd_dp_cont_short() ( ma_read_byte(257) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short__a 0x0101
#define MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(257); o.write(257,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(257); ma_write_byte(257,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short(o) (o.read(257) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dsp_err1_action__dis_lf_clip_rec_short() ( ma_read_byte(257) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long__a 0x0101
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(257); o.write(257,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(257); ma_write_byte(257,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long(o) (o.read(257) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dsp_err1_action__lowPvddMode_long() ( ma_read_byte(257) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long__a 0x0101
#define MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(257); o.write(257,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(257); ma_write_byte(257,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long(o) (o.read(257) & 0x40)>>6
#define get_MA_core__prot_sys__reg__dsp_err1_action__lowTmode_long() ( ma_read_byte(257) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long__a 0x0101
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(257); o.write(257,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(257); ma_write_byte(257,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long(o) (o.read(257) & 0x80)>>7
#define get_MA_core__prot_sys__reg__dsp_err1_action__lowPvddTmode_long() ( ma_read_byte(257) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0__a 0x0102
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(258); o.write(258,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(258); ma_write_byte(258,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0(o) (o.read(258) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action0() ( ma_read_byte(258) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1__a 0x0102
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(258); o.write(258,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(258); ma_write_byte(258,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1(o) (o.read(258) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action1() ( ma_read_byte(258) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2__a 0x0102
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(258); o.write(258,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(258); ma_write_byte(258,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2(o) (o.read(258) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action2() ( ma_read_byte(258) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3__a 0x0102
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(258); o.write(258,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(258); ma_write_byte(258,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3(o) (o.read(258) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dsp_err1_action__all_dsp_custom_action3() ( ma_read_byte(258) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__dsp_err2_action__reduceVol__a 0x0103
#define MA_core__prot_sys__reg__dsp_err2_action__reduceVol__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__dsp_err2_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__reduceVol(o,y) ({ uint8_t __ret = o.read(259); o.write(259,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(259); ma_write_byte(259,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__reduceVol(o) (o.read(259) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dsp_err2_action__reduceVol() ( ma_read_byte(259) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__dsp_err2_action__mute_short__a 0x0103
#define MA_core__prot_sys__reg__dsp_err2_action__mute_short__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__dsp_err2_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__dsp_err2_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__mute_short(o,y) ({ uint8_t __ret = o.read(259); o.write(259,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(259); ma_write_byte(259,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__mute_short(o) (o.read(259) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dsp_err2_action__mute_short() ( ma_read_byte(259) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short__a 0x0103
#define MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(259); o.write(259,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(259); ma_write_byte(259,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short(o) (o.read(259) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dsp_err2_action__ser_rapidFire_short() ( ma_read_byte(259) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short__a 0x0103
#define MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(259); o.write(259,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(259); ma_write_byte(259,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short(o) (o.read(259) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dsp_err2_action__gd_dp_cont_short() ( ma_read_byte(259) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short__a 0x0103
#define MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(259); o.write(259,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(259); ma_write_byte(259,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short(o) (o.read(259) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dsp_err2_action__dis_lf_clip_rec_short() ( ma_read_byte(259) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long__a 0x0103
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(259); o.write(259,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(259); ma_write_byte(259,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long(o) (o.read(259) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dsp_err2_action__lowPvddMode_long() ( ma_read_byte(259) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long__a 0x0103
#define MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(259); o.write(259,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(259); ma_write_byte(259,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long(o) (o.read(259) & 0x40)>>6
#define get_MA_core__prot_sys__reg__dsp_err2_action__lowTmode_long() ( ma_read_byte(259) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long__a 0x0103
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(259); o.write(259,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(259); ma_write_byte(259,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long(o) (o.read(259) & 0x80)>>7
#define get_MA_core__prot_sys__reg__dsp_err2_action__lowPvddTmode_long() ( ma_read_byte(259) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0__a 0x0104
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(260); o.write(260,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(260); ma_write_byte(260,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0(o) (o.read(260) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action0() ( ma_read_byte(260) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1__a 0x0104
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(260); o.write(260,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(260); ma_write_byte(260,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1(o) (o.read(260) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action1() ( ma_read_byte(260) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2__a 0x0104
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(260); o.write(260,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(260); ma_write_byte(260,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2(o) (o.read(260) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action2() ( ma_read_byte(260) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3__a 0x0104
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(260); o.write(260,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(260); ma_write_byte(260,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3(o) (o.read(260) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dsp_err2_action__all_dsp_custom_action3() ( ma_read_byte(260) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__dsp_err3_action__reduceVol__a 0x0105
#define MA_core__prot_sys__reg__dsp_err3_action__reduceVol__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__dsp_err3_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__reduceVol(o,y) ({ uint8_t __ret = o.read(261); o.write(261,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(261); ma_write_byte(261,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__reduceVol(o) (o.read(261) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dsp_err3_action__reduceVol() ( ma_read_byte(261) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__dsp_err3_action__mute_short__a 0x0105
#define MA_core__prot_sys__reg__dsp_err3_action__mute_short__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__dsp_err3_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__dsp_err3_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__mute_short(o,y) ({ uint8_t __ret = o.read(261); o.write(261,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(261); ma_write_byte(261,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__mute_short(o) (o.read(261) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dsp_err3_action__mute_short() ( ma_read_byte(261) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short__a 0x0105
#define MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(261); o.write(261,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(261); ma_write_byte(261,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short(o) (o.read(261) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dsp_err3_action__ser_rapidFire_short() ( ma_read_byte(261) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short__a 0x0105
#define MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(261); o.write(261,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(261); ma_write_byte(261,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short(o) (o.read(261) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dsp_err3_action__gd_dp_cont_short() ( ma_read_byte(261) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short__a 0x0105
#define MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(261); o.write(261,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(261); ma_write_byte(261,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short(o) (o.read(261) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dsp_err3_action__dis_lf_clip_rec_short() ( ma_read_byte(261) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long__a 0x0105
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(261); o.write(261,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(261); ma_write_byte(261,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long(o) (o.read(261) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dsp_err3_action__lowPvddMode_long() ( ma_read_byte(261) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long__a 0x0105
#define MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(261); o.write(261,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(261); ma_write_byte(261,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long(o) (o.read(261) & 0x40)>>6
#define get_MA_core__prot_sys__reg__dsp_err3_action__lowTmode_long() ( ma_read_byte(261) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long__a 0x0105
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(261); o.write(261,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(261); ma_write_byte(261,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long(o) (o.read(261) & 0x80)>>7
#define get_MA_core__prot_sys__reg__dsp_err3_action__lowPvddTmode_long() ( ma_read_byte(261) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0__a 0x0106
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(262); o.write(262,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(262); ma_write_byte(262,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0(o) (o.read(262) & 0x01)>>0
#define get_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action0() ( ma_read_byte(262) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1__a 0x0106
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(262); o.write(262,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(262); ma_write_byte(262,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1(o) (o.read(262) & 0x02)>>1
#define get_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action1() ( ma_read_byte(262) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2__a 0x0106
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(262); o.write(262,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(262); ma_write_byte(262,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2(o) (o.read(262) & 0x04)>>2
#define get_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action2() ( ma_read_byte(262) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3__a 0x0106
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(262); o.write(262,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(262); ma_write_byte(262,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3(o) (o.read(262) & 0x08)>>3
#define get_MA_core__prot_sys__reg__dsp_err3_action__all_dsp_custom_action3() ( ma_read_byte(262) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__reduceVol---
// Trigger volume reduction of all audio channels in chip
#define MA_core__prot_sys__reg__errTrig_action__reduceVol__a 0x0107
#define MA_core__prot_sys__reg__errTrig_action__reduceVol__len 1
#define MA_core__prot_sys__reg__errTrig_action__reduceVol__mask 0x01
#define MA_core__prot_sys__reg__errTrig_action__reduceVol__shift 0x00
#define MA_core__prot_sys__reg__errTrig_action__reduceVol__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__reduceVol__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__reduceVol(o,y) ({ uint8_t __ret = o.read(263); o.write(263,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__errTrig_action__reduceVol(y) ({ uint8_t __ret = ma_read_byte(263); ma_write_byte(263,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__reduceVol(o) (o.read(263) & 0x01)>>0
#define get_MA_core__prot_sys__reg__errTrig_action__reduceVol() ( ma_read_byte(263) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__mute_short---
// Trigger mute of all audio channels while error w/ short extension
#define MA_core__prot_sys__reg__errTrig_action__mute_short__a 0x0107
#define MA_core__prot_sys__reg__errTrig_action__mute_short__len 1
#define MA_core__prot_sys__reg__errTrig_action__mute_short__mask 0x02
#define MA_core__prot_sys__reg__errTrig_action__mute_short__shift 0x01
#define MA_core__prot_sys__reg__errTrig_action__mute_short__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__mute_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__mute_short(o,y) ({ uint8_t __ret = o.read(263); o.write(263,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__errTrig_action__mute_short(y) ({ uint8_t __ret = ma_read_byte(263); ma_write_byte(263,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__mute_short(o) (o.read(263) & 0x02)>>1
#define get_MA_core__prot_sys__reg__errTrig_action__mute_short() ( ma_read_byte(263) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__ser_rapidFire_short---
// Trigger rapid update of all chip gate driver serial links while error (with "short" extension)
#define MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short__a 0x0107
#define MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short__len 1
#define MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short__mask 0x04
#define MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short__shift 0x02
#define MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short(o,y) ({ uint8_t __ret = o.read(263); o.write(263,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short(y) ({ uint8_t __ret = ma_read_byte(263); ma_write_byte(263,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short(o) (o.read(263) & 0x04)>>2
#define get_MA_core__prot_sys__reg__errTrig_action__ser_rapidFire_short() ( ma_read_byte(263) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__gd_dp_cont_short---
// Trigger continuous operation of all chip gate driver level shifters (with "short" extension)
#define MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short__a 0x0107
#define MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short__len 1
#define MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short__mask 0x08
#define MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short__shift 0x03
#define MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short(o,y) ({ uint8_t __ret = o.read(263); o.write(263,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short(y) ({ uint8_t __ret = ma_read_byte(263); ma_write_byte(263,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short(o) (o.read(263) & 0x08)>>3
#define get_MA_core__prot_sys__reg__errTrig_action__gd_dp_cont_short() ( ma_read_byte(263) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short---
// Trigger disable of loop filter clip recovery in channel (with "short" extension)
#define MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short__a 0x0107
#define MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short__len 1
#define MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short__mask 0x10
#define MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short__shift 0x04
#define MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short(o,y) ({ uint8_t __ret = o.read(263); o.write(263,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short(y) ({ uint8_t __ret = ma_read_byte(263); ma_write_byte(263,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short(o) (o.read(263) & 0x10)>>4
#define get_MA_core__prot_sys__reg__errTrig_action__dis_lf_clip_rec_short() ( ma_read_byte(263) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__lowPvddMode_long---
// Trigger "low-Pvdd" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long__a 0x0107
#define MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long__len 1
#define MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long__mask 0x20
#define MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long__shift 0x05
#define MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long(o,y) ({ uint8_t __ret = o.read(263); o.write(263,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long(y) ({ uint8_t __ret = ma_read_byte(263); ma_write_byte(263,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long(o) (o.read(263) & 0x20)>>5
#define get_MA_core__prot_sys__reg__errTrig_action__lowPvddMode_long() ( ma_read_byte(263) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__lowTmode_long---
// Trigger "low temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__errTrig_action__lowTmode_long__a 0x0107
#define MA_core__prot_sys__reg__errTrig_action__lowTmode_long__len 1
#define MA_core__prot_sys__reg__errTrig_action__lowTmode_long__mask 0x40
#define MA_core__prot_sys__reg__errTrig_action__lowTmode_long__shift 0x06
#define MA_core__prot_sys__reg__errTrig_action__lowTmode_long__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__lowTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__lowTmode_long(o,y) ({ uint8_t __ret = o.read(263); o.write(263,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__errTrig_action__lowTmode_long(y) ({ uint8_t __ret = ma_read_byte(263); ma_write_byte(263,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__lowTmode_long(o) (o.read(263) & 0x40)>>6
#define get_MA_core__prot_sys__reg__errTrig_action__lowTmode_long() ( ma_read_byte(263) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__lowPvddTmode_long---
// Trigger "low-Pvdd-and temperature" operation mode of all chip half bridges (with "long" extension)
#define MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long__a 0x0107
#define MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long__len 1
#define MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long__mask 0x80
#define MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long__shift 0x07
#define MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long(o,y) ({ uint8_t __ret = o.read(263); o.write(263,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long(y) ({ uint8_t __ret = ma_read_byte(263); ma_write_byte(263,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long(o) (o.read(263) & 0x80)>>7
#define get_MA_core__prot_sys__reg__errTrig_action__lowPvddTmode_long() ( ma_read_byte(263) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__all_dsp_custom_action0---
// Trigger DSP chip-action flag 0
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0__a 0x0108
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0__len 1
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0__mask 0x01
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0__shift 0x00
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0(o,y) ({ uint8_t __ret = o.read(264); o.write(264,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0(y) ({ uint8_t __ret = ma_read_byte(264); ma_write_byte(264,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0(o) (o.read(264) & 0x01)>>0
#define get_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action0() ( ma_read_byte(264) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__all_dsp_custom_action1---
// Trigger DSP chip-action flag 1
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1__a 0x0108
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1__len 1
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1__mask 0x02
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1__shift 0x01
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1(o,y) ({ uint8_t __ret = o.read(264); o.write(264,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1(y) ({ uint8_t __ret = ma_read_byte(264); ma_write_byte(264,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1(o) (o.read(264) & 0x02)>>1
#define get_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action1() ( ma_read_byte(264) & 0x02)>>1
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__all_dsp_custom_action2---
// Trigger DSP chip-action flag 2
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2__a 0x0108
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2__len 1
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2__mask 0x04
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2__shift 0x02
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2(o,y) ({ uint8_t __ret = o.read(264); o.write(264,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2(y) ({ uint8_t __ret = ma_read_byte(264); ma_write_byte(264,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2(o) (o.read(264) & 0x04)>>2
#define get_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action2() ( ma_read_byte(264) & 0x04)>>2
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__all_dsp_custom_action3---
// Trigger DSP chip-action flag 3
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3__a 0x0108
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3__len 1
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3__mask 0x08
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3__shift 0x03
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3(o,y) ({ uint8_t __ret = o.read(264); o.write(264,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3(y) ({ uint8_t __ret = ma_read_byte(264); ma_write_byte(264,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3(o) (o.read(264) & 0x08)>>3
#define get_MA_core__prot_sys__reg__errTrig_action__all_dsp_custom_action3() ( ma_read_byte(264) & 0x08)>>3
//------------------------------------------------------------------------------core__prot_sys__errVect_acc_ocp_ch0---
// Channel-0 OCP flag accumulator register			[q3b q2b q1b q0b q3a q2a q1a q0a]
#define MA_core__prot_sys__errVect_acc_ocp_ch0__a 0x0129
#define MA_core__prot_sys__errVect_acc_ocp_ch0__len 8
#define MA_core__prot_sys__errVect_acc_ocp_ch0__mask 0xff
#define MA_core__prot_sys__errVect_acc_ocp_ch0__shift 0x00
#define MA_core__prot_sys__errVect_acc_ocp_ch0__reset 0x00
#define MA_core__prot_sys__errVect_acc_ocp_ch0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc_ocp_ch0(o,y) o.write(297,y);
#define set_MA_core__prot_sys__errVect_acc_ocp_ch0(y) ma_write_byte(297,y);
#define get_obj_MA_core__prot_sys__errVect_acc_ocp_ch0(o) (o.read(297) & 0xff)>>0
#define get_MA_core__prot_sys__errVect_acc_ocp_ch0() ( ma_read_byte(297) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc_ocp_ch1---
// Channel-1 OCP flag accumulator register			[q3b q2b q1b q0b q3a q2a q1a q0a]
#define MA_core__prot_sys__errVect_acc_ocp_ch1__a 0x012a
#define MA_core__prot_sys__errVect_acc_ocp_ch1__len 8
#define MA_core__prot_sys__errVect_acc_ocp_ch1__mask 0xff
#define MA_core__prot_sys__errVect_acc_ocp_ch1__shift 0x00
#define MA_core__prot_sys__errVect_acc_ocp_ch1__reset 0x00
#define MA_core__prot_sys__errVect_acc_ocp_ch1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc_ocp_ch1(o,y) o.write(298,y);
#define set_MA_core__prot_sys__errVect_acc_ocp_ch1(y) ma_write_byte(298,y);
#define get_obj_MA_core__prot_sys__errVect_acc_ocp_ch1(o) (o.read(298) & 0xff)>>0
#define get_MA_core__prot_sys__errVect_acc_ocp_ch1() ( ma_read_byte(298) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_trig_ocp_ch0---
// Channel-0 OCP flag trigger-time register			[q3b q2b q1b q0b q3a q2a q1a q0a]
#define MA_core__prot_sys__errVect_trig_ocp_ch0__a 0x012b
#define MA_core__prot_sys__errVect_trig_ocp_ch0__len 8
#define MA_core__prot_sys__errVect_trig_ocp_ch0__mask 0xff
#define MA_core__prot_sys__errVect_trig_ocp_ch0__shift 0x00
#define MA_core__prot_sys__errVect_trig_ocp_ch0__reset 0x00
#define MA_core__prot_sys__errVect_trig_ocp_ch0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_trig_ocp_ch0(o,y) o.write(299,y);
#define set_MA_core__prot_sys__errVect_trig_ocp_ch0(y) ma_write_byte(299,y);
#define get_obj_MA_core__prot_sys__errVect_trig_ocp_ch0(o) (o.read(299) & 0xff)>>0
#define get_MA_core__prot_sys__errVect_trig_ocp_ch0() ( ma_read_byte(299) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_trig_ocp_ch1---
// Channel-1 OCP flag trigger-time register			[q3b q2b q1b q0b q3a q2a q1a q0a]
#define MA_core__prot_sys__errVect_trig_ocp_ch1__a 0x012c
#define MA_core__prot_sys__errVect_trig_ocp_ch1__len 8
#define MA_core__prot_sys__errVect_trig_ocp_ch1__mask 0xff
#define MA_core__prot_sys__errVect_trig_ocp_ch1__shift 0x00
#define MA_core__prot_sys__errVect_trig_ocp_ch1__reset 0x00
#define MA_core__prot_sys__errVect_trig_ocp_ch1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_trig_ocp_ch1(o,y) o.write(300,y);
#define set_MA_core__prot_sys__errVect_trig_ocp_ch1(y) ma_write_byte(300,y);
#define get_obj_MA_core__prot_sys__errVect_trig_ocp_ch1(o) (o.read(300) & 0xff)>>0
#define get_MA_core__prot_sys__errVect_trig_ocp_ch1() ( ma_read_byte(300) & 0xff)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc_vcf_ch0---
// Channel-0 Vcfly error flag accumulator register		[ov_b uv_b ob_a uv_a]
#define MA_core__prot_sys__errVect_acc_vcf_ch0__a 0x012d
#define MA_core__prot_sys__errVect_acc_vcf_ch0__len 4
#define MA_core__prot_sys__errVect_acc_vcf_ch0__mask 0x0f
#define MA_core__prot_sys__errVect_acc_vcf_ch0__shift 0x00
#define MA_core__prot_sys__errVect_acc_vcf_ch0__reset 0x00
#define MA_core__prot_sys__errVect_acc_vcf_ch0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc_vcf_ch0(o,y) ({ uint8_t __ret = o.read(301); o.write(301,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__prot_sys__errVect_acc_vcf_ch0(y) ({ uint8_t __ret = ma_read_byte(301); ma_write_byte(301,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__prot_sys__errVect_acc_vcf_ch0(o) (o.read(301) & 0x0f)>>0
#define get_MA_core__prot_sys__errVect_acc_vcf_ch0() ( ma_read_byte(301) & 0x0f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_acc_vcf_ch1---
// Channel-1 Vcfly error flag accumulator register		[ov_b uv_b ob_a uv_a
#define MA_core__prot_sys__errVect_acc_vcf_ch1__a 0x012d
#define MA_core__prot_sys__errVect_acc_vcf_ch1__len 4
#define MA_core__prot_sys__errVect_acc_vcf_ch1__mask 0xf0
#define MA_core__prot_sys__errVect_acc_vcf_ch1__shift 0x04
#define MA_core__prot_sys__errVect_acc_vcf_ch1__reset 0x00
#define MA_core__prot_sys__errVect_acc_vcf_ch1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_acc_vcf_ch1(o,y) ({ uint8_t __ret = o.read(301); o.write(301,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__prot_sys__errVect_acc_vcf_ch1(y) ({ uint8_t __ret = ma_read_byte(301); ma_write_byte(301,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__prot_sys__errVect_acc_vcf_ch1(o) (o.read(301) & 0xf0)>>4
#define get_MA_core__prot_sys__errVect_acc_vcf_ch1() ( ma_read_byte(301) & 0xf0)>>4
//------------------------------------------------------------------------------core__prot_sys__errVect_trig_vcf_ch0---
// Channel-0 Vcfly error flag trigger-time register	[ov_b uv_b ob_a uv_a
#define MA_core__prot_sys__errVect_trig_vcf_ch0__a 0x012e
#define MA_core__prot_sys__errVect_trig_vcf_ch0__len 4
#define MA_core__prot_sys__errVect_trig_vcf_ch0__mask 0x0f
#define MA_core__prot_sys__errVect_trig_vcf_ch0__shift 0x00
#define MA_core__prot_sys__errVect_trig_vcf_ch0__reset 0x00
#define MA_core__prot_sys__errVect_trig_vcf_ch0__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_trig_vcf_ch0(o,y) ({ uint8_t __ret = o.read(302); o.write(302,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__prot_sys__errVect_trig_vcf_ch0(y) ({ uint8_t __ret = ma_read_byte(302); ma_write_byte(302,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__prot_sys__errVect_trig_vcf_ch0(o) (o.read(302) & 0x0f)>>0
#define get_MA_core__prot_sys__errVect_trig_vcf_ch0() ( ma_read_byte(302) & 0x0f)>>0
//------------------------------------------------------------------------------core__prot_sys__errVect_trig_vcf_ch1---
// Channel-1 Vcfly error flag trigger-time register	[ov_b uv_b ob_a uv_a
#define MA_core__prot_sys__errVect_trig_vcf_ch1__a 0x012e
#define MA_core__prot_sys__errVect_trig_vcf_ch1__len 4
#define MA_core__prot_sys__errVect_trig_vcf_ch1__mask 0xf0
#define MA_core__prot_sys__errVect_trig_vcf_ch1__shift 0x04
#define MA_core__prot_sys__errVect_trig_vcf_ch1__reset 0x00
#define MA_core__prot_sys__errVect_trig_vcf_ch1__inputonly 1
#define set_obj_MA_core__prot_sys__errVect_trig_vcf_ch1(o,y) ({ uint8_t __ret = o.read(302); o.write(302,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__prot_sys__errVect_trig_vcf_ch1(y) ({ uint8_t __ret = ma_read_byte(302); ma_write_byte(302,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__prot_sys__errVect_trig_vcf_ch1(o) (o.read(302) & 0xf0)>>4
#define get_MA_core__prot_sys__errVect_trig_vcf_ch1() ( ma_read_byte(302) & 0xf0)>>4
//------------------------------------------------------------------------------core__prot_sys__otp__pb_protMode_lowlow---
// "Protection mode" behavior of power stage; "0"=>high-Z, "1"=>low-low
#define MA_core__prot_sys__otp__pb_protMode_lowlow__a 0x00c0
#define MA_core__prot_sys__otp__pb_protMode_lowlow__len 1
#define MA_core__prot_sys__otp__pb_protMode_lowlow__mask 0x01
#define MA_core__prot_sys__otp__pb_protMode_lowlow__shift 0x00
#define MA_core__prot_sys__otp__pb_protMode_lowlow__reset 0x00
#define MA_core__prot_sys__otp__pb_protMode_lowlow__inputonly 0
#define set_obj_MA_core__prot_sys__otp__pb_protMode_lowlow(o,y) ({ uint8_t __ret = o.read(192); o.write(192,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__prot_sys__otp__pb_protMode_lowlow(y) ({ uint8_t __ret = ma_read_byte(192); ma_write_byte(192,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__prot_sys__otp__pb_protMode_lowlow(o) (o.read(192) & 0x01)>>0
#define get_MA_core__prot_sys__otp__pb_protMode_lowlow() ( ma_read_byte(192) & 0x01)>>0
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short---
// Trigger "short" protection state for all channel half bridges
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short__a 0x00da
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short__mask 0x10
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short__shift 0x04
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short__reset 0x01
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short(o,y) ({ uint8_t __ret = o.read(218); o.write(218,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short(y) ({ uint8_t __ret = ma_read_byte(218); ma_write_byte(218,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short(o) (o.read(218) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_short() ( ma_read_byte(218) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long---
// Trigger "long" protection state for all channel half bridges
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long__a 0x00da
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long__mask 0x20
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long__shift 0x05
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long(o,y) ({ uint8_t __ret = o.read(218); o.write(218,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long(y) ({ uint8_t __ret = ma_read_byte(218); ma_write_byte(218,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long(o) (o.read(218) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_long() ( ma_read_byte(218) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi---
// Trigger latched protection state for channel half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi__a 0x00da
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi__mask 0x40
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi__shift 0x06
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(218); o.write(218,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(218); ma_write_byte(218,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi(o) (o.read(218) & 0x40)>>6
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_semi() ( ma_read_byte(218) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma---
// Trigger latched protection state for channel half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma__a 0x00da
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma__mask 0x80
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma__shift 0x07
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(218); o.write(218,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(218); ma_write_byte(218,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma(o) (o.read(218) & 0x80)>>7
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_ch__pb_prot_latch_perma() ( ma_read_byte(218) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi__a 0x00dc
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(220); o.write(220,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(220); ma_write_byte(220,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi(o) (o.read(220) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_semi() ( ma_read_byte(220) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma__a 0x00dc
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(220); o.write(220,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(220); ma_write_byte(220,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma(o) (o.read(220) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ocp_action__prt_rsp_all__pb_prot_latch_perma() ( ma_read_byte(220) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short---
// Trigger "short" protection state for all channel half bridges
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short__a 0x00de
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short__mask 0x10
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short__shift 0x04
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short(o,y) ({ uint8_t __ret = o.read(222); o.write(222,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short(y) ({ uint8_t __ret = ma_read_byte(222); ma_write_byte(222,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short(o) (o.read(222) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_short() ( ma_read_byte(222) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long---
// Trigger "long" protection state for all channel half bridges
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long__a 0x00de
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long__mask 0x20
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long__shift 0x05
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long(o,y) ({ uint8_t __ret = o.read(222); o.write(222,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long(y) ({ uint8_t __ret = ma_read_byte(222); ma_write_byte(222,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long(o) (o.read(222) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_long() ( ma_read_byte(222) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi---
// Trigger latched protection state for channel half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi__a 0x00de
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi__mask 0x40
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi__shift 0x06
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi__reset 0x01
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(222); o.write(222,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(222); ma_write_byte(222,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi(o) (o.read(222) & 0x40)>>6
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_semi() ( ma_read_byte(222) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma---
// Trigger latched protection state for channel half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma__a 0x00de
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma__mask 0x80
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma__shift 0x07
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(222); o.write(222,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(222); ma_write_byte(222,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma(o) (o.read(222) & 0x80)>>7
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_ch__pb_prot_latch_perma() ( ma_read_byte(222) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi__a 0x00e0
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(224); o.write(224,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(224); ma_write_byte(224,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi(o) (o.read(224) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_semi() ( ma_read_byte(224) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma__a 0x00e0
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(224); o.write(224,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(224); ma_write_byte(224,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma(o) (o.read(224) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ocp_severe_action__prt_rsp_all__pb_prot_latch_perma() ( ma_read_byte(224) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short---
// Trigger "short" protection state for all channel half bridges
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short__a 0x00e2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short__mask 0x10
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short__shift 0x04
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short(o,y) ({ uint8_t __ret = o.read(226); o.write(226,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short(y) ({ uint8_t __ret = ma_read_byte(226); ma_write_byte(226,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short(o) (o.read(226) & 0x10)>>4
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_short() ( ma_read_byte(226) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long---
// Trigger "long" protection state for all channel half bridges
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long__a 0x00e2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long__mask 0x20
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long__shift 0x05
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long(o,y) ({ uint8_t __ret = o.read(226); o.write(226,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long(y) ({ uint8_t __ret = ma_read_byte(226); ma_write_byte(226,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long(o) (o.read(226) & 0x20)>>5
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_long() ( ma_read_byte(226) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi---
// Trigger latched protection state for channel half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi__a 0x00e2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi__mask 0x40
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi__shift 0x06
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(226); o.write(226,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(226); ma_write_byte(226,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi(o) (o.read(226) & 0x40)>>6
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_semi() ( ma_read_byte(226) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma---
// Trigger latched protection state for channel half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma__a 0x00e2
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma__mask 0x80
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma__shift 0x07
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(226); o.write(226,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(226); ma_write_byte(226,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma(o) (o.read(226) & 0x80)>>7
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_ch__pb_prot_latch_perma() ( ma_read_byte(226) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi__a 0x00e4
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(228); o.write(228,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(228); ma_write_byte(228,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi(o) (o.read(228) & 0x10)>>4
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_semi() ( ma_read_byte(228) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma__a 0x00e4
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(228); o.write(228,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(228); ma_write_byte(228,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma(o) (o.read(228) & 0x20)>>5
#define get_MA_core__prot_sys__reg__vcfp_action__prt_rsp_all__pb_prot_latch_perma() ( ma_read_byte(228) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short---
// Trigger "short" protection state for all channel half bridges
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short__a 0x00e6
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short__mask 0x10
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short__shift 0x04
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short(o,y) ({ uint8_t __ret = o.read(230); o.write(230,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short(y) ({ uint8_t __ret = ma_read_byte(230); ma_write_byte(230,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short(o) (o.read(230) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_short() ( ma_read_byte(230) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long---
// Trigger "long" protection state for all channel half bridges
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long__a 0x00e6
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long__mask 0x20
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long__shift 0x05
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long(o,y) ({ uint8_t __ret = o.read(230); o.write(230,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long(y) ({ uint8_t __ret = ma_read_byte(230); ma_write_byte(230,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long(o) (o.read(230) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_long() ( ma_read_byte(230) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi---
// Trigger latched protection state for channel half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi__a 0x00e6
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi__mask 0x40
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi__shift 0x06
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi__reset 0x01
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(230); o.write(230,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(230); ma_write_byte(230,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi(o) (o.read(230) & 0x40)>>6
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_semi() ( ma_read_byte(230) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma---
// Trigger latched protection state for channel half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma__a 0x00e6
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma__mask 0x80
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma__shift 0x07
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(230); o.write(230,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(230); ma_write_byte(230,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma(o) (o.read(230) & 0x80)>>7
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_ch__pb_prot_latch_perma() ( ma_read_byte(230) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi__a 0x00e8
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(232); o.write(232,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(232); ma_write_byte(232,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi(o) (o.read(232) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_semi() ( ma_read_byte(232) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma__a 0x00e8
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(232); o.write(232,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(232); ma_write_byte(232,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma(o) (o.read(232) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dc_action__prt_rsp_all__pb_prot_latch_perma() ( ma_read_byte(232) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short---
// Trigger "short" protection state for all channel half bridges
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short__a 0x00ea
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short__mask 0x10
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short__shift 0x04
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short(o,y) ({ uint8_t __ret = o.read(234); o.write(234,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short(y) ({ uint8_t __ret = ma_read_byte(234); ma_write_byte(234,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short(o) (o.read(234) & 0x10)>>4
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_short() ( ma_read_byte(234) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long---
// Trigger "long" protection state for all channel half bridges
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long__a 0x00ea
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long__mask 0x20
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long__shift 0x05
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long(o,y) ({ uint8_t __ret = o.read(234); o.write(234,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long(y) ({ uint8_t __ret = ma_read_byte(234); ma_write_byte(234,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long(o) (o.read(234) & 0x20)>>5
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_long() ( ma_read_byte(234) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi---
// Trigger latched protection state for channel half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi__a 0x00ea
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi__mask 0x40
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi__shift 0x06
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(234); o.write(234,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(234); ma_write_byte(234,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi(o) (o.read(234) & 0x40)>>6
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_semi() ( ma_read_byte(234) & 0x40)>>6
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma---
// Trigger latched protection state for channel half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma__a 0x00ea
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma__mask 0x80
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma__shift 0x07
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(234); o.write(234,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(234); ma_write_byte(234,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma(o) (o.read(234) & 0x80)>>7
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_ch__pb_prot_latch_perma() ( ma_read_byte(234) & 0x80)>>7
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi__a 0x00ec
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(236); o.write(236,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(236); ma_write_byte(236,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi(o) (o.read(236) & 0x10)>>4
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_semi() ( ma_read_byte(236) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma__a 0x00ec
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(236); o.write(236,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(236); ma_write_byte(236,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma(o) (o.read(236) & 0x20)>>5
#define get_MA_core__prot_sys__reg__clip_stuck_action__prt_rsp_all__pb_prot_latch_perma() ( ma_read_byte(236) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi__a 0x00ee
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(238); o.write(238,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(238); ma_write_byte(238,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi(o) (o.read(238) & 0x10)>>4
#define get_MA_core__prot_sys__reg__otw_action__pb_prot_latch_semi() ( ma_read_byte(238) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__otw_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma__a 0x00ee
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(238); o.write(238,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(238); ma_write_byte(238,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma(o) (o.read(238) & 0x20)>>5
#define get_MA_core__prot_sys__reg__otw_action__pb_prot_latch_perma() ( ma_read_byte(238) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi__a 0x00f0
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi__reset 0x01
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(240); o.write(240,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(240); ma_write_byte(240,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi(o) (o.read(240) & 0x10)>>4
#define get_MA_core__prot_sys__reg__ote_action__pb_prot_latch_semi() ( ma_read_byte(240) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__ote_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma__a 0x00f0
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(240); o.write(240,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(240); ma_write_byte(240,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma(o) (o.read(240) & 0x20)>>5
#define get_MA_core__prot_sys__reg__ote_action__pb_prot_latch_perma() ( ma_read_byte(240) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi__a 0x00f2
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(242); o.write(242,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(242); ma_write_byte(242,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi(o) (o.read(242) & 0x10)>>4
#define get_MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_semi() ( ma_read_byte(242) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma__a 0x00f2
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(242); o.write(242,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(242); ma_write_byte(242,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma(o) (o.read(242) & 0x20)>>5
#define get_MA_core__prot_sys__reg__pvdd_uv_action__pb_prot_latch_perma() ( ma_read_byte(242) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi__a 0x00f4
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(244); o.write(244,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(244); ma_write_byte(244,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi(o) (o.read(244) & 0x10)>>4
#define get_MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_semi() ( ma_read_byte(244) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma__a 0x00f4
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(244); o.write(244,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(244); ma_write_byte(244,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma(o) (o.read(244) & 0x20)>>5
#define get_MA_core__prot_sys__reg__pvdd_low_action__pb_prot_latch_perma() ( ma_read_byte(244) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi__a 0x00f6
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi__reset 0x01
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(246); o.write(246,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(246); ma_write_byte(246,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi(o) (o.read(246) & 0x10)>>4
#define get_MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_semi() ( ma_read_byte(246) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma__a 0x00f6
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(246); o.write(246,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(246); ma_write_byte(246,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma(o) (o.read(246) & 0x20)>>5
#define get_MA_core__prot_sys__reg__pvdd_ov_action__pb_prot_latch_perma() ( ma_read_byte(246) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi__a 0x00f8
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(248); o.write(248,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(248); ma_write_byte(248,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi(o) (o.read(248) & 0x10)>>4
#define get_MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_semi() ( ma_read_byte(248) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__no_clock_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma__a 0x00f8
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(248); o.write(248,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(248); ma_write_byte(248,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma(o) (o.read(248) & 0x20)>>5
#define get_MA_core__prot_sys__reg__no_clock_action__pb_prot_latch_perma() ( ma_read_byte(248) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi__a 0x00fa
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(250); o.write(250,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(250); ma_write_byte(250,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi(o) (o.read(250) & 0x10)>>4
#define get_MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_semi() ( ma_read_byte(250) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__no_audio_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma__a 0x00fa
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(250); o.write(250,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(250); ma_write_byte(250,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma(o) (o.read(250) & 0x20)>>5
#define get_MA_core__prot_sys__reg__no_audio_action__pb_prot_latch_perma() ( ma_read_byte(250) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi__a 0x00fc
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(252); o.write(252,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(252); ma_write_byte(252,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi(o) (o.read(252) & 0x10)>>4
#define get_MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_semi() ( ma_read_byte(252) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__temp_low_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma__a 0x00fc
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(252); o.write(252,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(252); ma_write_byte(252,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma(o) (o.read(252) & 0x20)>>5
#define get_MA_core__prot_sys__reg__temp_low_action__pb_prot_latch_perma() ( ma_read_byte(252) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi__a 0x00fe
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(254); o.write(254,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(254); ma_write_byte(254,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi(o) (o.read(254) & 0x10)>>4
#define get_MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_semi() ( ma_read_byte(254) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma__a 0x00fe
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(254); o.write(254,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(254); ma_write_byte(254,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma(o) (o.read(254) & 0x20)>>5
#define get_MA_core__prot_sys__reg__pvddT_low_action__pb_prot_latch_perma() ( ma_read_byte(254) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi__a 0x0100
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(256); o.write(256,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(256); ma_write_byte(256,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi(o) (o.read(256) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_semi() ( ma_read_byte(256) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma__a 0x0100
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(256); o.write(256,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(256); ma_write_byte(256,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma(o) (o.read(256) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dsp_err0_action__pb_prot_latch_perma() ( ma_read_byte(256) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi__a 0x0102
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(258); o.write(258,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(258); ma_write_byte(258,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi(o) (o.read(258) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_semi() ( ma_read_byte(258) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma__a 0x0102
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(258); o.write(258,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(258); ma_write_byte(258,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma(o) (o.read(258) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dsp_err1_action__pb_prot_latch_perma() ( ma_read_byte(258) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi__a 0x0104
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(260); o.write(260,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(260); ma_write_byte(260,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi(o) (o.read(260) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_semi() ( ma_read_byte(260) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma__a 0x0104
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(260); o.write(260,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(260); ma_write_byte(260,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma(o) (o.read(260) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dsp_err2_action__pb_prot_latch_perma() ( ma_read_byte(260) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi__a 0x0106
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(262); o.write(262,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(262); ma_write_byte(262,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi(o) (o.read(262) & 0x10)>>4
#define get_MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_semi() ( ma_read_byte(262) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma__a 0x0106
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma__reset 0x00
#define MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(262); o.write(262,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(262); ma_write_byte(262,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma(o) (o.read(262) & 0x20)>>5
#define get_MA_core__prot_sys__reg__dsp_err3_action__pb_prot_latch_perma() ( ma_read_byte(262) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__pb_prot_latch_semi---
// Trigger latched high-Z of all chip half bridges, with auto-unlock/re-try
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi__a 0x0108
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi__len 1
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi__mask 0x10
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi__shift 0x04
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi__reset 0x00
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi(o,y) ({ uint8_t __ret = o.read(264); o.write(264,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi(y) ({ uint8_t __ret = ma_read_byte(264); ma_write_byte(264,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi(o) (o.read(264) & 0x10)>>4
#define get_MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_semi() ( ma_read_byte(264) & 0x10)>>4
//------------------------------------------------------------------------------core__prot_sys__reg__errTrig_action__pb_prot_latch_perma---
// Trigger latched high-Z of all chip half bridges, with only register-based unlock
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma__a 0x0108
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma__len 1
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma__mask 0x20
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma__shift 0x05
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma__reset 0x01
#define MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma__inputonly 0
#define set_obj_MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma(o,y) ({ uint8_t __ret = o.read(264); o.write(264,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma(y) ({ uint8_t __ret = ma_read_byte(264); ma_write_byte(264,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma(o) (o.read(264) & 0x20)>>5
#define get_MA_core__prot_sys__reg__errTrig_action__pb_prot_latch_perma() ( ma_read_byte(264) & 0x20)>>5
//------------------------------------------------------------------------------core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force---
// High to force protection state for full bridge Q0...7
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force__a 0x0113
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force__len 1
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force__mask 0x04
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force__shift 0x02
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force__reset 0x01
#define MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force__inputonly 0
#define set_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force(o,y) ({ uint8_t __ret = o.read(275); o.write(275,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force(y) ({ uint8_t __ret = ma_read_byte(275); ma_write_byte(275,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force(o) (o.read(275) & 0x04)>>2
#define get_MA_core__prot_sys__reg__protSys_nErrPin_mask__mask_act_ch__ch_pb_prot_force() ( ma_read_byte(275) & 0x04)>>2
//------------------------------------------------------------------------------core__pa_hw__otp__pa_rtrim---
// Resistor trim code for coutering R*C process variation
#define MA_core__pa_hw__otp__pa_rtrim__a 0x0140
#define MA_core__pa_hw__otp__pa_rtrim__len 4
#define MA_core__pa_hw__otp__pa_rtrim__mask 0x0f
#define MA_core__pa_hw__otp__pa_rtrim__shift 0x00
#define MA_core__pa_hw__otp__pa_rtrim__reset 0x0a
#define MA_core__pa_hw__otp__pa_rtrim__inputonly 0
#define set_obj_MA_core__pa_hw__otp__pa_rtrim(o,y) ({ uint8_t __ret = o.read(320); o.write(320,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__pa_rtrim(y) ({ uint8_t __ret = ma_read_byte(320); ma_write_byte(320,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__pa_rtrim(o) (o.read(320) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__pa_rtrim() ( ma_read_byte(320) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__afir_vcmo_set---
// AFIR-DAC output common-mode operating point selection
#define MA_core__pa_hw__otp__afir_vcmo_set__a 0x0140
#define MA_core__pa_hw__otp__afir_vcmo_set__len 4
#define MA_core__pa_hw__otp__afir_vcmo_set__mask 0xf0
#define MA_core__pa_hw__otp__afir_vcmo_set__shift 0x04
#define MA_core__pa_hw__otp__afir_vcmo_set__reset 0x0b
#define MA_core__pa_hw__otp__afir_vcmo_set__inputonly 0
#define set_obj_MA_core__pa_hw__otp__afir_vcmo_set(o,y) ({ uint8_t __ret = o.read(320); o.write(320,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__afir_vcmo_set(y) ({ uint8_t __ret = ma_read_byte(320); ma_write_byte(320,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__afir_vcmo_set(o) (o.read(320) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__afir_vcmo_set() ( ma_read_byte(320) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__afir_rref_trim---
// AFIR-DAC output current scale fine-trim
#define MA_core__pa_hw__otp__afir_rref_trim__a 0x0141
#define MA_core__pa_hw__otp__afir_rref_trim__len 6
#define MA_core__pa_hw__otp__afir_rref_trim__mask 0x3f
#define MA_core__pa_hw__otp__afir_rref_trim__shift 0x00
#define MA_core__pa_hw__otp__afir_rref_trim__reset 0x20
#define MA_core__pa_hw__otp__afir_rref_trim__inputonly 0
#define set_obj_MA_core__pa_hw__otp__afir_rref_trim(o,y) ({ uint8_t __ret = o.read(321); o.write(321,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__pa_hw__otp__afir_rref_trim(y) ({ uint8_t __ret = ma_read_byte(321); ma_write_byte(321,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__pa_hw__otp__afir_rref_trim(o) (o.read(321) & 0x3f)>>0
#define get_MA_core__pa_hw__otp__afir_rref_trim() ( ma_read_byte(321) & 0x3f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__pb_dp_len---
// Level shifter pulse length setup
#define MA_core__pa_hw__otp__pb_dp_len__a 0x0142
#define MA_core__pa_hw__otp__pb_dp_len__len 2
#define MA_core__pa_hw__otp__pb_dp_len__mask 0x03
#define MA_core__pa_hw__otp__pb_dp_len__shift 0x00
#define MA_core__pa_hw__otp__pb_dp_len__reset 0x02
#define MA_core__pa_hw__otp__pb_dp_len__inputonly 0
#define set_obj_MA_core__pa_hw__otp__pb_dp_len(o,y) ({ uint8_t __ret = o.read(322); o.write(322,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pa_hw__otp__pb_dp_len(y) ({ uint8_t __ret = ma_read_byte(322); ma_write_byte(322,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pa_hw__otp__pb_dp_len(o) (o.read(322) & 0x03)>>0
#define get_MA_core__pa_hw__otp__pb_dp_len() ( ma_read_byte(322) & 0x03)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__force_dp_cont---
// Level shifter continuous-pulse forcing handle
#define MA_core__pa_hw__otp__force_dp_cont__a 0x0142
#define MA_core__pa_hw__otp__force_dp_cont__len 1
#define MA_core__pa_hw__otp__force_dp_cont__mask 0x04
#define MA_core__pa_hw__otp__force_dp_cont__shift 0x02
#define MA_core__pa_hw__otp__force_dp_cont__reset 0x00
#define MA_core__pa_hw__otp__force_dp_cont__inputonly 0
#define set_obj_MA_core__pa_hw__otp__force_dp_cont(o,y) ({ uint8_t __ret = o.read(322); o.write(322,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pa_hw__otp__force_dp_cont(y) ({ uint8_t __ret = ma_read_byte(322); ma_write_byte(322,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pa_hw__otp__force_dp_cont(o) (o.read(322) & 0x04)>>2
#define get_MA_core__pa_hw__otp__force_dp_cont() ( ma_read_byte(322) & 0x04)>>2
//------------------------------------------------------------------------------core__pa_hw__otp__pwm_pvdd_scale---
// PWM refgen Pvdd_scale. "111" for MA120.
#define MA_core__pa_hw__otp__pwm_pvdd_scale__a 0x0142
#define MA_core__pa_hw__otp__pwm_pvdd_scale__len 3
#define MA_core__pa_hw__otp__pwm_pvdd_scale__mask 0x38
#define MA_core__pa_hw__otp__pwm_pvdd_scale__shift 0x03
#define MA_core__pa_hw__otp__pwm_pvdd_scale__reset 0x07
#define MA_core__pa_hw__otp__pwm_pvdd_scale__inputonly 0
#define set_obj_MA_core__pa_hw__otp__pwm_pvdd_scale(o,y) ({ uint8_t __ret = o.read(322); o.write(322,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_core__pa_hw__otp__pwm_pvdd_scale(y) ({ uint8_t __ret = ma_read_byte(322); ma_write_byte(322,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_core__pa_hw__otp__pwm_pvdd_scale(o) (o.read(322) & 0x38)>>3
#define get_MA_core__pa_hw__otp__pwm_pvdd_scale() ( ma_read_byte(322) & 0x38)>>3
//------------------------------------------------------------------------------core__pa_hw__otp__unmute_cnt---
// Unmute-mode delay from release request to actual unmute. 100us/1ms/10ms/100ms per step.
#define MA_core__pa_hw__otp__unmute_cnt__a 0x0143
#define MA_core__pa_hw__otp__unmute_cnt__len 4
#define MA_core__pa_hw__otp__unmute_cnt__mask 0x0f
#define MA_core__pa_hw__otp__unmute_cnt__shift 0x00
#define MA_core__pa_hw__otp__unmute_cnt__reset 0x03
#define MA_core__pa_hw__otp__unmute_cnt__inputonly 0
#define set_obj_MA_core__pa_hw__otp__unmute_cnt(o,y) ({ uint8_t __ret = o.read(323); o.write(323,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__unmute_cnt(y) ({ uint8_t __ret = ma_read_byte(323); ma_write_byte(323,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__unmute_cnt(o) (o.read(323) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__unmute_cnt() ( ma_read_byte(323) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__afir_pchg_cnt---
// AFIR startup bias filter precharge duration. 100us per step.
#define MA_core__pa_hw__otp__afir_pchg_cnt__a 0x0143
#define MA_core__pa_hw__otp__afir_pchg_cnt__len 4
#define MA_core__pa_hw__otp__afir_pchg_cnt__mask 0xf0
#define MA_core__pa_hw__otp__afir_pchg_cnt__shift 0x04
#define MA_core__pa_hw__otp__afir_pchg_cnt__reset 0x04
#define MA_core__pa_hw__otp__afir_pchg_cnt__inputonly 0
#define set_obj_MA_core__pa_hw__otp__afir_pchg_cnt(o,y) ({ uint8_t __ret = o.read(323); o.write(323,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__afir_pchg_cnt(y) ({ uint8_t __ret = ma_read_byte(323); ma_write_byte(323,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__afir_pchg_cnt(o) (o.read(323) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__afir_pchg_cnt() ( ma_read_byte(323) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmctrl_pvddShift---
// Pvdd measurement scaling factor for DAC CM control machine.
#define MA_core__pa_hw__otp__cmctrl_pvddShift__a 0x0144
#define MA_core__pa_hw__otp__cmctrl_pvddShift__len 3
#define MA_core__pa_hw__otp__cmctrl_pvddShift__mask 0x07
#define MA_core__pa_hw__otp__cmctrl_pvddShift__shift 0x00
#define MA_core__pa_hw__otp__cmctrl_pvddShift__reset 0x03
#define MA_core__pa_hw__otp__cmctrl_pvddShift__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmctrl_pvddShift(o,y) ({ uint8_t __ret = o.read(324); o.write(324,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__pa_hw__otp__cmctrl_pvddShift(y) ({ uint8_t __ret = ma_read_byte(324); ma_write_byte(324,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__pa_hw__otp__cmctrl_pvddShift(o) (o.read(324) & 0x07)>>0
#define get_MA_core__pa_hw__otp__cmctrl_pvddShift() ( ma_read_byte(324) & 0x07)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl---
// High to enable active, continuous-time common-mode controller
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl__a 0x0145
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl__mask 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl__reset 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl(o,y) ({ uint8_t __ret = o.read(325); o.write(325,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl(y) ({ uint8_t __ret = ma_read_byte(325); ma_write_byte(325,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl(o) (o.read(325) & 0x01)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmtrl() ( ma_read_byte(325) & 0x01)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu---
// High to enable passive Pvdd-pullup resistor bank
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu__a 0x0145
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu__mask 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu__shift 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu(o,y) ({ uint8_t __ret = o.read(325); o.write(325,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu(y) ({ uint8_t __ret = ma_read_byte(325); ma_write_byte(325,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu(o) (o.read(325) & 0x02)>>1
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_rcmpu() ( ma_read_byte(325) & 0x02)>>1
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR---
// Pvdd-pullup resistor (if used) setting for high value of int1 FB res. (lf_int1_rscale_low = 0)
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR__a 0x0145
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR__len 3
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR__mask 0x1c
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR__shift 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR(o,y) ({ uint8_t __ret = o.read(325); o.write(325,(__ret&0xe3)|((y<<2)&0x1c)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR(y) ({ uint8_t __ret = ma_read_byte(325); ma_write_byte(325,(__ret&0xe3)|((y<<2)&0x1c)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR(o) (o.read(325) & 0x1c)>>2
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_highR() ( ma_read_byte(325) & 0x1c)>>2
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR---
// Pvdd-pullup resistor (if used) setting for high value of int1 FB res. (lf_int1_rscale_low = 1)
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR__a 0x0145
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR__len 3
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR__mask 0xe0
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR__shift 0x05
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR(o,y) ({ uint8_t __ret = o.read(325); o.write(325,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR(y) ({ uint8_t __ret = ma_read_byte(325); ma_write_byte(325,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR(o) (o.read(325) & 0xe0)>>5
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__rcmpu_lowR() ( ma_read_byte(325) & 0xe0)>>5
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres---
// PWM-SDM output duty cycle setting where 3-level and 2-level operation intersect, if dac_ternary_en	= 1.
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres__a 0x0146
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres__mask 0x0f
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres__reset 0x03
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres(o,y) ({ uint8_t __ret = o.read(326); o.write(326,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres(y) ({ uint8_t __ret = ma_read_byte(326); ma_write_byte(326,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres(o) (o.read(326) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_thres() ( ma_read_byte(326) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd---
// Fixed PWM-SDM output common-mode level setting if dac_use_cmadj = 0.
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd__a 0x0146
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd__mask 0xf0
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd__shift 0x04
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd__reset 0x08
#define MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd(o,y) ({ uint8_t __ret = o.read(326); o.write(326,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd(y) ({ uint8_t __ret = ma_read_byte(326); ma_write_byte(326,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd(o) (o.read(326) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__sdm_d_cm_fxd() ( ma_read_byte(326) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR---
// Constant-part of calculation of Pvdd-based d_cm for dac_use_cmadj = 1. For (lf_int1_rscale_low = 0).
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR__a 0x0147
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR__mask 0x0f
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR(o,y) ({ uint8_t __ret = o.read(327); o.write(327,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR(y) ({ uint8_t __ret = ma_read_byte(327); ma_write_byte(327,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR(o) (o.read(327) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_highR() ( ma_read_byte(327) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR---
// Constant-part of calculation of Pvdd-based d_cm for dac_use_cmadj = 1. For (lf_int1_rscale_low = 1).
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR__a 0x0147
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR__mask 0xf0
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR__shift 0x04
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR(o,y) ({ uint8_t __ret = o.read(327); o.write(327,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR(y) ({ uint8_t __ret = ma_read_byte(327); ma_write_byte(327,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR(o) (o.read(327) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k0_lowR() ( ma_read_byte(327) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1---
// Pvdd-prop. factor for calc of d_cm for dac_use_cmadj = 1.
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1__a 0x0148
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1__len 6
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1__mask 0x3f
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1(o,y) ({ uint8_t __ret = o.read(328); o.write(328,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1(y) ({ uint8_t __ret = ma_read_byte(328); ma_write_byte(328,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1(o) (o.read(328) & 0x3f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__cmadj_k1() ( ma_read_byte(328) & 0x3f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en---
// High to use ternary-mode AFIR.
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en__a 0x0148
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en__mask 0x40
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en__shift 0x06
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en__reset 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en(o,y) ({ uint8_t __ret = o.read(328); o.write(328,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en(y) ({ uint8_t __ret = ma_read_byte(328); ma_write_byte(328,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en(o) (o.read(328) & 0x40)>>6
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_ternary_en() ( ma_read_byte(328) & 0x40)>>6
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj---
// High to use Pvdd-based control of AFIR CM current level.
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj__a 0x0148
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj__mask 0x80
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj__shift 0x07
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj__reset 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj(o,y) ({ uint8_t __ret = o.read(328); o.write(328,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj(y) ({ uint8_t __ret = ma_read_byte(328); ma_write_byte(328,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj(o) (o.read(328) & 0x80)>>7
#define get_MA_core__pa_hw__otp__cmCtrlProfs__0__dac_use_cmadj() ( ma_read_byte(328) & 0x80)>>7
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl---
// High to enable active, continuous-time common-mode controller
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl__a 0x0149
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl__mask 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl(o,y) ({ uint8_t __ret = o.read(329); o.write(329,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl(y) ({ uint8_t __ret = ma_read_byte(329); ma_write_byte(329,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl(o) (o.read(329) & 0x01)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmtrl() ( ma_read_byte(329) & 0x01)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu---
// High to enable passive Pvdd-pullup resistor bank
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu__a 0x0149
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu__mask 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu__shift 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu(o,y) ({ uint8_t __ret = o.read(329); o.write(329,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu(y) ({ uint8_t __ret = ma_read_byte(329); ma_write_byte(329,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu(o) (o.read(329) & 0x02)>>1
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_rcmpu() ( ma_read_byte(329) & 0x02)>>1
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR---
// Pvdd-pullup resistor (if used) setting for high value of int1 FB res. (lf_int1_rscale_low = 0)
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR__a 0x0149
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR__len 3
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR__mask 0x1c
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR__shift 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR(o,y) ({ uint8_t __ret = o.read(329); o.write(329,(__ret&0xe3)|((y<<2)&0x1c)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR(y) ({ uint8_t __ret = ma_read_byte(329); ma_write_byte(329,(__ret&0xe3)|((y<<2)&0x1c)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR(o) (o.read(329) & 0x1c)>>2
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_highR() ( ma_read_byte(329) & 0x1c)>>2
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR---
// Pvdd-pullup resistor (if used) setting for high value of int1 FB res. (lf_int1_rscale_low = 1)
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR__a 0x0149
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR__len 3
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR__mask 0xe0
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR__shift 0x05
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR(o,y) ({ uint8_t __ret = o.read(329); o.write(329,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR(y) ({ uint8_t __ret = ma_read_byte(329); ma_write_byte(329,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR(o) (o.read(329) & 0xe0)>>5
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__rcmpu_lowR() ( ma_read_byte(329) & 0xe0)>>5
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres---
// PWM-SDM output duty cycle setting where 3-level and 2-level operation intersect, if dac_ternary_en	= 1.
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres__a 0x014a
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres__mask 0x0f
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres(o,y) ({ uint8_t __ret = o.read(330); o.write(330,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres(y) ({ uint8_t __ret = ma_read_byte(330); ma_write_byte(330,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres(o) (o.read(330) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_thres() ( ma_read_byte(330) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd---
// Fixed PWM-SDM output common-mode level setting if dac_use_cmadj = 0.
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd__a 0x014a
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd__mask 0xf0
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd__shift 0x04
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd__reset 0x08
#define MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd(o,y) ({ uint8_t __ret = o.read(330); o.write(330,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd(y) ({ uint8_t __ret = ma_read_byte(330); ma_write_byte(330,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd(o) (o.read(330) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__sdm_d_cm_fxd() ( ma_read_byte(330) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR---
// Constant-part of calculation of Pvdd-based d_cm for dac_use_cmadj = 1. For (lf_int1_rscale_low = 0).
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR__a 0x014b
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR__mask 0x0f
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR(o,y) ({ uint8_t __ret = o.read(331); o.write(331,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR(y) ({ uint8_t __ret = ma_read_byte(331); ma_write_byte(331,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR(o) (o.read(331) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_highR() ( ma_read_byte(331) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR---
// Constant-part of calculation of Pvdd-based d_cm for dac_use_cmadj = 1. For (lf_int1_rscale_low = 1).
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR__a 0x014b
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR__mask 0xf0
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR__shift 0x04
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR(o,y) ({ uint8_t __ret = o.read(331); o.write(331,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR(y) ({ uint8_t __ret = ma_read_byte(331); ma_write_byte(331,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR(o) (o.read(331) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k0_lowR() ( ma_read_byte(331) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1---
// Pvdd-prop. factor for calc of d_cm for dac_use_cmadj = 1.
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1__a 0x014c
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1__len 6
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1__mask 0x3f
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1(o,y) ({ uint8_t __ret = o.read(332); o.write(332,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1(y) ({ uint8_t __ret = ma_read_byte(332); ma_write_byte(332,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1(o) (o.read(332) & 0x3f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__cmadj_k1() ( ma_read_byte(332) & 0x3f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en---
// High to use ternary-mode AFIR.
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en__a 0x014c
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en__mask 0x40
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en__shift 0x06
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en(o,y) ({ uint8_t __ret = o.read(332); o.write(332,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en(y) ({ uint8_t __ret = ma_read_byte(332); ma_write_byte(332,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en(o) (o.read(332) & 0x40)>>6
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_ternary_en() ( ma_read_byte(332) & 0x40)>>6
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj---
// High to use Pvdd-based control of AFIR CM current level.
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj__a 0x014c
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj__mask 0x80
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj__shift 0x07
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj__reset 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj(o,y) ({ uint8_t __ret = o.read(332); o.write(332,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj(y) ({ uint8_t __ret = ma_read_byte(332); ma_write_byte(332,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj(o) (o.read(332) & 0x80)>>7
#define get_MA_core__pa_hw__otp__cmCtrlProfs__1__dac_use_cmadj() ( ma_read_byte(332) & 0x80)>>7
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl---
// High to enable active, continuous-time common-mode controller
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl__a 0x014d
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl__mask 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl(o,y) ({ uint8_t __ret = o.read(333); o.write(333,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl(y) ({ uint8_t __ret = ma_read_byte(333); ma_write_byte(333,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl(o) (o.read(333) & 0x01)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmtrl() ( ma_read_byte(333) & 0x01)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu---
// High to enable passive Pvdd-pullup resistor bank
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu__a 0x014d
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu__mask 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu__shift 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu(o,y) ({ uint8_t __ret = o.read(333); o.write(333,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu(y) ({ uint8_t __ret = ma_read_byte(333); ma_write_byte(333,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu(o) (o.read(333) & 0x02)>>1
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_rcmpu() ( ma_read_byte(333) & 0x02)>>1
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR---
// Pvdd-pullup resistor (if used) setting for high value of int1 FB res. (lf_int1_rscale_low = 0)
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR__a 0x014d
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR__len 3
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR__mask 0x1c
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR__shift 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR(o,y) ({ uint8_t __ret = o.read(333); o.write(333,(__ret&0xe3)|((y<<2)&0x1c)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR(y) ({ uint8_t __ret = ma_read_byte(333); ma_write_byte(333,(__ret&0xe3)|((y<<2)&0x1c)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR(o) (o.read(333) & 0x1c)>>2
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_highR() ( ma_read_byte(333) & 0x1c)>>2
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR---
// Pvdd-pullup resistor (if used) setting for high value of int1 FB res. (lf_int1_rscale_low = 1)
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR__a 0x014d
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR__len 3
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR__mask 0xe0
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR__shift 0x05
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR(o,y) ({ uint8_t __ret = o.read(333); o.write(333,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR(y) ({ uint8_t __ret = ma_read_byte(333); ma_write_byte(333,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR(o) (o.read(333) & 0xe0)>>5
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__rcmpu_lowR() ( ma_read_byte(333) & 0xe0)>>5
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres---
// PWM-SDM output duty cycle setting where 3-level and 2-level operation intersect, if dac_ternary_en	= 1.
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres__a 0x014e
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres__mask 0x0f
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres(o,y) ({ uint8_t __ret = o.read(334); o.write(334,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres(y) ({ uint8_t __ret = ma_read_byte(334); ma_write_byte(334,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres(o) (o.read(334) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_thres() ( ma_read_byte(334) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd---
// Fixed PWM-SDM output common-mode level setting if dac_use_cmadj = 0.
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd__a 0x014e
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd__mask 0xf0
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd__shift 0x04
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd__reset 0x08
#define MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd(o,y) ({ uint8_t __ret = o.read(334); o.write(334,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd(y) ({ uint8_t __ret = ma_read_byte(334); ma_write_byte(334,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd(o) (o.read(334) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__sdm_d_cm_fxd() ( ma_read_byte(334) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR---
// Constant-part of calculation of Pvdd-based d_cm for dac_use_cmadj = 1. For (lf_int1_rscale_low = 0).
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR__a 0x014f
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR__mask 0x0f
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR(o,y) ({ uint8_t __ret = o.read(335); o.write(335,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR(y) ({ uint8_t __ret = ma_read_byte(335); ma_write_byte(335,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR(o) (o.read(335) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_highR() ( ma_read_byte(335) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR---
// Constant-part of calculation of Pvdd-based d_cm for dac_use_cmadj = 1. For (lf_int1_rscale_low = 1).
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR__a 0x014f
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR__mask 0xf0
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR__shift 0x04
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR(o,y) ({ uint8_t __ret = o.read(335); o.write(335,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR(y) ({ uint8_t __ret = ma_read_byte(335); ma_write_byte(335,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR(o) (o.read(335) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k0_lowR() ( ma_read_byte(335) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1---
// Pvdd-prop. factor for calc of d_cm for dac_use_cmadj = 1.
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1__a 0x0150
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1__len 6
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1__mask 0x3f
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1(o,y) ({ uint8_t __ret = o.read(336); o.write(336,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1(y) ({ uint8_t __ret = ma_read_byte(336); ma_write_byte(336,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1(o) (o.read(336) & 0x3f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__cmadj_k1() ( ma_read_byte(336) & 0x3f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en---
// High to use ternary-mode AFIR.
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en__a 0x0150
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en__mask 0x40
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en__shift 0x06
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en(o,y) ({ uint8_t __ret = o.read(336); o.write(336,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en(y) ({ uint8_t __ret = ma_read_byte(336); ma_write_byte(336,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en(o) (o.read(336) & 0x40)>>6
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_ternary_en() ( ma_read_byte(336) & 0x40)>>6
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj---
// High to use Pvdd-based control of AFIR CM current level.
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj__a 0x0150
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj__mask 0x80
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj__shift 0x07
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj__reset 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj(o,y) ({ uint8_t __ret = o.read(336); o.write(336,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj(y) ({ uint8_t __ret = ma_read_byte(336); ma_write_byte(336,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj(o) (o.read(336) & 0x80)>>7
#define get_MA_core__pa_hw__otp__cmCtrlProfs__2__dac_use_cmadj() ( ma_read_byte(336) & 0x80)>>7
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl---
// High to enable active, continuous-time common-mode controller
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl__a 0x0151
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl__mask 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl__reset 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl(o,y) ({ uint8_t __ret = o.read(337); o.write(337,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl(y) ({ uint8_t __ret = ma_read_byte(337); ma_write_byte(337,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl(o) (o.read(337) & 0x01)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmtrl() ( ma_read_byte(337) & 0x01)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu---
// High to enable passive Pvdd-pullup resistor bank
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu__a 0x0151
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu__mask 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu__shift 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu(o,y) ({ uint8_t __ret = o.read(337); o.write(337,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu(y) ({ uint8_t __ret = ma_read_byte(337); ma_write_byte(337,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu(o) (o.read(337) & 0x02)>>1
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_rcmpu() ( ma_read_byte(337) & 0x02)>>1
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR---
// Pvdd-pullup resistor (if used) setting for high value of int1 FB res. (lf_int1_rscale_low = 0)
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR__a 0x0151
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR__len 3
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR__mask 0x1c
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR__shift 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR(o,y) ({ uint8_t __ret = o.read(337); o.write(337,(__ret&0xe3)|((y<<2)&0x1c)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR(y) ({ uint8_t __ret = ma_read_byte(337); ma_write_byte(337,(__ret&0xe3)|((y<<2)&0x1c)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR(o) (o.read(337) & 0x1c)>>2
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_highR() ( ma_read_byte(337) & 0x1c)>>2
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR---
// Pvdd-pullup resistor (if used) setting for high value of int1 FB res. (lf_int1_rscale_low = 1)
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR__a 0x0151
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR__len 3
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR__mask 0xe0
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR__shift 0x05
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR(o,y) ({ uint8_t __ret = o.read(337); o.write(337,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR(y) ({ uint8_t __ret = ma_read_byte(337); ma_write_byte(337,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR(o) (o.read(337) & 0xe0)>>5
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__rcmpu_lowR() ( ma_read_byte(337) & 0xe0)>>5
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres---
// PWM-SDM output duty cycle setting where 3-level and 2-level operation intersect, if dac_ternary_en	= 1.
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres__a 0x0152
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres__mask 0x0f
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres__reset 0x02
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres(o,y) ({ uint8_t __ret = o.read(338); o.write(338,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres(y) ({ uint8_t __ret = ma_read_byte(338); ma_write_byte(338,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres(o) (o.read(338) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_thres() ( ma_read_byte(338) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd---
// Fixed PWM-SDM output common-mode level setting if dac_use_cmadj = 0.
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd__a 0x0152
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd__mask 0xf0
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd__shift 0x04
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd__reset 0x0c
#define MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd(o,y) ({ uint8_t __ret = o.read(338); o.write(338,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd(y) ({ uint8_t __ret = ma_read_byte(338); ma_write_byte(338,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd(o) (o.read(338) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__sdm_d_cm_fxd() ( ma_read_byte(338) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR---
// Constant-part of calculation of Pvdd-based d_cm for dac_use_cmadj = 1. For (lf_int1_rscale_low = 0).
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR__a 0x0153
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR__mask 0x0f
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR(o,y) ({ uint8_t __ret = o.read(339); o.write(339,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR(y) ({ uint8_t __ret = ma_read_byte(339); ma_write_byte(339,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR(o) (o.read(339) & 0x0f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_highR() ( ma_read_byte(339) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR---
// Constant-part of calculation of Pvdd-based d_cm for dac_use_cmadj = 1. For (lf_int1_rscale_low = 1).
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR__a 0x0153
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR__len 4
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR__mask 0xf0
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR__shift 0x04
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR(o,y) ({ uint8_t __ret = o.read(339); o.write(339,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR(y) ({ uint8_t __ret = ma_read_byte(339); ma_write_byte(339,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR(o) (o.read(339) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k0_lowR() ( ma_read_byte(339) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1---
// Pvdd-prop. factor for calc of d_cm for dac_use_cmadj = 1.
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1__a 0x0154
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1__len 6
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1__mask 0x3f
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1__shift 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1__reset 0x00
#define MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1(o,y) ({ uint8_t __ret = o.read(340); o.write(340,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1(y) ({ uint8_t __ret = ma_read_byte(340); ma_write_byte(340,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1(o) (o.read(340) & 0x3f)>>0
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__cmadj_k1() ( ma_read_byte(340) & 0x3f)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en---
// High to use ternary-mode AFIR.
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en__a 0x0154
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en__mask 0x40
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en__shift 0x06
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en__reset 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en(o,y) ({ uint8_t __ret = o.read(340); o.write(340,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en(y) ({ uint8_t __ret = ma_read_byte(340); ma_write_byte(340,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en(o) (o.read(340) & 0x40)>>6
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_ternary_en() ( ma_read_byte(340) & 0x40)>>6
//------------------------------------------------------------------------------core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj---
// High to use Pvdd-based control of AFIR CM current level.
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj__a 0x0154
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj__len 1
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj__mask 0x80
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj__shift 0x07
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj__reset 0x01
#define MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj(o,y) ({ uint8_t __ret = o.read(340); o.write(340,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj(y) ({ uint8_t __ret = ma_read_byte(340); ma_write_byte(340,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj(o) (o.read(340) & 0x80)>>7
#define get_MA_core__pa_hw__otp__cmCtrlProfs__3__dac_use_cmadj() ( ma_read_byte(340) & 0x80)>>7
//------------------------------------------------------------------------------core__pa_hw__reg__gd_test_mode---
// Gate drive "test mode force" vector [b1 a1 b0 a0].
#define MA_core__pa_hw__reg__gd_test_mode__a 0x0156
#define MA_core__pa_hw__reg__gd_test_mode__len 4
#define MA_core__pa_hw__reg__gd_test_mode__mask 0x0f
#define MA_core__pa_hw__reg__gd_test_mode__shift 0x00
#define MA_core__pa_hw__reg__gd_test_mode__reset 0x00
#define MA_core__pa_hw__reg__gd_test_mode__inputonly 0
#define set_obj_MA_core__pa_hw__reg__gd_test_mode(o,y) ({ uint8_t __ret = o.read(342); o.write(342,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__reg__gd_test_mode(y) ({ uint8_t __ret = ma_read_byte(342); ma_write_byte(342,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__reg__gd_test_mode(o) (o.read(342) & 0x0f)>>0
#define get_MA_core__pa_hw__reg__gd_test_mode() ( ma_read_byte(342) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__reg__gd_ocp_dis---
// Gate driver "ocp disable" vector    [b1 a1 b0 a0].
#define MA_core__pa_hw__reg__gd_ocp_dis__a 0x0156
#define MA_core__pa_hw__reg__gd_ocp_dis__len 4
#define MA_core__pa_hw__reg__gd_ocp_dis__mask 0xf0
#define MA_core__pa_hw__reg__gd_ocp_dis__shift 0x04
#define MA_core__pa_hw__reg__gd_ocp_dis__reset 0x00
#define MA_core__pa_hw__reg__gd_ocp_dis__inputonly 0
#define set_obj_MA_core__pa_hw__reg__gd_ocp_dis(o,y) ({ uint8_t __ret = o.read(342); o.write(342,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__reg__gd_ocp_dis(y) ({ uint8_t __ret = ma_read_byte(342); ma_write_byte(342,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__reg__gd_ocp_dis(o) (o.read(342) & 0xf0)>>4
#define get_MA_core__pa_hw__reg__gd_ocp_dis() ( ma_read_byte(342) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__reg__gd_test_cfg---
// Gate drive "test mode" configuration.
#define MA_core__pa_hw__reg__gd_test_cfg__a 0x0157
#define MA_core__pa_hw__reg__gd_test_cfg__len 2
#define MA_core__pa_hw__reg__gd_test_cfg__mask 0x03
#define MA_core__pa_hw__reg__gd_test_cfg__shift 0x00
#define MA_core__pa_hw__reg__gd_test_cfg__reset 0x00
#define MA_core__pa_hw__reg__gd_test_cfg__inputonly 0
#define set_obj_MA_core__pa_hw__reg__gd_test_cfg(o,y) ({ uint8_t __ret = o.read(343); o.write(343,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__pa_hw__reg__gd_test_cfg(y) ({ uint8_t __ret = ma_read_byte(343); ma_write_byte(343,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__pa_hw__reg__gd_test_cfg(o) (o.read(343) & 0x03)>>0
#define get_MA_core__pa_hw__reg__gd_test_cfg() ( ma_read_byte(343) & 0x03)>>0
//------------------------------------------------------------------------------core__pa_hw__reg__gd_spare_cfg---
// Gate driver spare config. bits. 		[b1 a1 b0 a0].
#define MA_core__pa_hw__reg__gd_spare_cfg__a 0x0157
#define MA_core__pa_hw__reg__gd_spare_cfg__len 4
#define MA_core__pa_hw__reg__gd_spare_cfg__mask 0x3c
#define MA_core__pa_hw__reg__gd_spare_cfg__shift 0x02
#define MA_core__pa_hw__reg__gd_spare_cfg__reset 0x00
#define MA_core__pa_hw__reg__gd_spare_cfg__inputonly 0
#define set_obj_MA_core__pa_hw__reg__gd_spare_cfg(o,y) ({ uint8_t __ret = o.read(343); o.write(343,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pa_hw__reg__gd_spare_cfg(y) ({ uint8_t __ret = ma_read_byte(343); ma_write_byte(343,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pa_hw__reg__gd_spare_cfg(o) (o.read(343) & 0x3c)>>2
#define get_MA_core__pa_hw__reg__gd_spare_cfg() ( ma_read_byte(343) & 0x3c)>>2
//------------------------------------------------------------------------------core__pa_hw__reg__afir_pchg_force---
// High to force AFIR bias filter into prechage mode.
#define MA_core__pa_hw__reg__afir_pchg_force__a 0x0157
#define MA_core__pa_hw__reg__afir_pchg_force__len 1
#define MA_core__pa_hw__reg__afir_pchg_force__mask 0x40
#define MA_core__pa_hw__reg__afir_pchg_force__shift 0x06
#define MA_core__pa_hw__reg__afir_pchg_force__reset 0x00
#define MA_core__pa_hw__reg__afir_pchg_force__inputonly 0
#define set_obj_MA_core__pa_hw__reg__afir_pchg_force(o,y) ({ uint8_t __ret = o.read(343); o.write(343,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__pa_hw__reg__afir_pchg_force(y) ({ uint8_t __ret = ma_read_byte(343); ma_write_byte(343,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__pa_hw__reg__afir_pchg_force(o) (o.read(343) & 0x40)>>6
#define get_MA_core__pa_hw__reg__afir_pchg_force() ( ma_read_byte(343) & 0x40)>>6
//------------------------------------------------------------------------------core__pa_hw__reg__OTP_supply_en_force---
// High to force enable for GD refgen, to provide dvdd_5v0 for OTP read.
#define MA_core__pa_hw__reg__OTP_supply_en_force__a 0x0157
#define MA_core__pa_hw__reg__OTP_supply_en_force__len 1
#define MA_core__pa_hw__reg__OTP_supply_en_force__mask 0x80
#define MA_core__pa_hw__reg__OTP_supply_en_force__shift 0x07
#define MA_core__pa_hw__reg__OTP_supply_en_force__reset 0x00
#define MA_core__pa_hw__reg__OTP_supply_en_force__inputonly 0
#define set_obj_MA_core__pa_hw__reg__OTP_supply_en_force(o,y) ({ uint8_t __ret = o.read(343); o.write(343,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__pa_hw__reg__OTP_supply_en_force(y) ({ uint8_t __ret = ma_read_byte(343); ma_write_byte(343,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__pa_hw__reg__OTP_supply_en_force(o) (o.read(343) & 0x80)>>7
#define get_MA_core__pa_hw__reg__OTP_supply_en_force() ( ma_read_byte(343) & 0x80)>>7
//------------------------------------------------------------------------------core__pa_hw__reg__sw_force_reg0---
// High to force channel 0 switch control vector from register.
#define MA_core__pa_hw__reg__sw_force_reg0__a 0x0158
#define MA_core__pa_hw__reg__sw_force_reg0__len 1
#define MA_core__pa_hw__reg__sw_force_reg0__mask 0x01
#define MA_core__pa_hw__reg__sw_force_reg0__shift 0x00
#define MA_core__pa_hw__reg__sw_force_reg0__reset 0x00
#define MA_core__pa_hw__reg__sw_force_reg0__inputonly 0
#define set_obj_MA_core__pa_hw__reg__sw_force_reg0(o,y) ({ uint8_t __ret = o.read(344); o.write(344,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa_hw__reg__sw_force_reg0(y) ({ uint8_t __ret = ma_read_byte(344); ma_write_byte(344,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa_hw__reg__sw_force_reg0(o) (o.read(344) & 0x01)>>0
#define get_MA_core__pa_hw__reg__sw_force_reg0() ( ma_read_byte(344) & 0x01)>>0
//------------------------------------------------------------------------------core__pa_hw__reg__sw_force_reg1---
// High to force channel 1 switch control vector from register.
#define MA_core__pa_hw__reg__sw_force_reg1__a 0x0158
#define MA_core__pa_hw__reg__sw_force_reg1__len 1
#define MA_core__pa_hw__reg__sw_force_reg1__mask 0x02
#define MA_core__pa_hw__reg__sw_force_reg1__shift 0x01
#define MA_core__pa_hw__reg__sw_force_reg1__reset 0x00
#define MA_core__pa_hw__reg__sw_force_reg1__inputonly 0
#define set_obj_MA_core__pa_hw__reg__sw_force_reg1(o,y) ({ uint8_t __ret = o.read(344); o.write(344,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa_hw__reg__sw_force_reg1(y) ({ uint8_t __ret = ma_read_byte(344); ma_write_byte(344,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa_hw__reg__sw_force_reg1(o) (o.read(344) & 0x02)>>1
#define get_MA_core__pa_hw__reg__sw_force_reg1() ( ma_read_byte(344) & 0x02)>>1
//------------------------------------------------------------------------------core__pa_hw__reg__gd_pchg_force---
// Gate driver "force precharge to reg setting" vector [b1 a1 b0 a0];
#define MA_core__pa_hw__reg__gd_pchg_force__a 0x0158
#define MA_core__pa_hw__reg__gd_pchg_force__len 4
#define MA_core__pa_hw__reg__gd_pchg_force__mask 0x3c
#define MA_core__pa_hw__reg__gd_pchg_force__shift 0x02
#define MA_core__pa_hw__reg__gd_pchg_force__reset 0x00
#define MA_core__pa_hw__reg__gd_pchg_force__inputonly 0
#define set_obj_MA_core__pa_hw__reg__gd_pchg_force(o,y) ({ uint8_t __ret = o.read(344); o.write(344,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__pa_hw__reg__gd_pchg_force(y) ({ uint8_t __ret = ma_read_byte(344); ma_write_byte(344,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__pa_hw__reg__gd_pchg_force(o) (o.read(344) & 0x3c)>>2
#define get_MA_core__pa_hw__reg__gd_pchg_force() ( ma_read_byte(344) & 0x3c)>>2
//------------------------------------------------------------------------------core__pa_hw__reg__clip_rec_dis_force0---
// High to force specific register value of ch 0 clip recovery disable bit.
#define MA_core__pa_hw__reg__clip_rec_dis_force0__a 0x0158
#define MA_core__pa_hw__reg__clip_rec_dis_force0__len 1
#define MA_core__pa_hw__reg__clip_rec_dis_force0__mask 0x40
#define MA_core__pa_hw__reg__clip_rec_dis_force0__shift 0x06
#define MA_core__pa_hw__reg__clip_rec_dis_force0__reset 0x00
#define MA_core__pa_hw__reg__clip_rec_dis_force0__inputonly 0
#define set_obj_MA_core__pa_hw__reg__clip_rec_dis_force0(o,y) ({ uint8_t __ret = o.read(344); o.write(344,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__pa_hw__reg__clip_rec_dis_force0(y) ({ uint8_t __ret = ma_read_byte(344); ma_write_byte(344,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__pa_hw__reg__clip_rec_dis_force0(o) (o.read(344) & 0x40)>>6
#define get_MA_core__pa_hw__reg__clip_rec_dis_force0() ( ma_read_byte(344) & 0x40)>>6
//------------------------------------------------------------------------------core__pa_hw__reg__clip_rec_dis_force1---
// High to force specific register value of ch 0 clip recovery disable bit.
#define MA_core__pa_hw__reg__clip_rec_dis_force1__a 0x0158
#define MA_core__pa_hw__reg__clip_rec_dis_force1__len 1
#define MA_core__pa_hw__reg__clip_rec_dis_force1__mask 0x80
#define MA_core__pa_hw__reg__clip_rec_dis_force1__shift 0x07
#define MA_core__pa_hw__reg__clip_rec_dis_force1__reset 0x00
#define MA_core__pa_hw__reg__clip_rec_dis_force1__inputonly 0
#define set_obj_MA_core__pa_hw__reg__clip_rec_dis_force1(o,y) ({ uint8_t __ret = o.read(344); o.write(344,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__pa_hw__reg__clip_rec_dis_force1(y) ({ uint8_t __ret = ma_read_byte(344); ma_write_byte(344,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__pa_hw__reg__clip_rec_dis_force1(o) (o.read(344) & 0x80)>>7
#define get_MA_core__pa_hw__reg__clip_rec_dis_force1() ( ma_read_byte(344) & 0x80)>>7
//------------------------------------------------------------------------------core__pa_hw__reg__sw_a0_reg---
// Channel 0, bridge A switch control vector for "register force".
#define MA_core__pa_hw__reg__sw_a0_reg__a 0x0159
#define MA_core__pa_hw__reg__sw_a0_reg__len 4
#define MA_core__pa_hw__reg__sw_a0_reg__mask 0x0f
#define MA_core__pa_hw__reg__sw_a0_reg__shift 0x00
#define MA_core__pa_hw__reg__sw_a0_reg__reset 0x00
#define MA_core__pa_hw__reg__sw_a0_reg__inputonly 0
#define set_obj_MA_core__pa_hw__reg__sw_a0_reg(o,y) ({ uint8_t __ret = o.read(345); o.write(345,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__reg__sw_a0_reg(y) ({ uint8_t __ret = ma_read_byte(345); ma_write_byte(345,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__reg__sw_a0_reg(o) (o.read(345) & 0x0f)>>0
#define get_MA_core__pa_hw__reg__sw_a0_reg() ( ma_read_byte(345) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__reg__sw_b0_reg---
// Channel 0, bridge B switch control vector for "register force".
#define MA_core__pa_hw__reg__sw_b0_reg__a 0x0159
#define MA_core__pa_hw__reg__sw_b0_reg__len 4
#define MA_core__pa_hw__reg__sw_b0_reg__mask 0xf0
#define MA_core__pa_hw__reg__sw_b0_reg__shift 0x04
#define MA_core__pa_hw__reg__sw_b0_reg__reset 0x00
#define MA_core__pa_hw__reg__sw_b0_reg__inputonly 0
#define set_obj_MA_core__pa_hw__reg__sw_b0_reg(o,y) ({ uint8_t __ret = o.read(345); o.write(345,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__reg__sw_b0_reg(y) ({ uint8_t __ret = ma_read_byte(345); ma_write_byte(345,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__reg__sw_b0_reg(o) (o.read(345) & 0xf0)>>4
#define get_MA_core__pa_hw__reg__sw_b0_reg() ( ma_read_byte(345) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__reg__sw_a1_reg---
// Channel 1, bridge A switch control vector for "register force".
#define MA_core__pa_hw__reg__sw_a1_reg__a 0x015a
#define MA_core__pa_hw__reg__sw_a1_reg__len 4
#define MA_core__pa_hw__reg__sw_a1_reg__mask 0x0f
#define MA_core__pa_hw__reg__sw_a1_reg__shift 0x00
#define MA_core__pa_hw__reg__sw_a1_reg__reset 0x00
#define MA_core__pa_hw__reg__sw_a1_reg__inputonly 0
#define set_obj_MA_core__pa_hw__reg__sw_a1_reg(o,y) ({ uint8_t __ret = o.read(346); o.write(346,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__reg__sw_a1_reg(y) ({ uint8_t __ret = ma_read_byte(346); ma_write_byte(346,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__reg__sw_a1_reg(o) (o.read(346) & 0x0f)>>0
#define get_MA_core__pa_hw__reg__sw_a1_reg() ( ma_read_byte(346) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__reg__sw_b1_reg---
// Channel 1, bridge B switch control vector for "register force".
#define MA_core__pa_hw__reg__sw_b1_reg__a 0x015a
#define MA_core__pa_hw__reg__sw_b1_reg__len 4
#define MA_core__pa_hw__reg__sw_b1_reg__mask 0xf0
#define MA_core__pa_hw__reg__sw_b1_reg__shift 0x04
#define MA_core__pa_hw__reg__sw_b1_reg__reset 0x00
#define MA_core__pa_hw__reg__sw_b1_reg__inputonly 0
#define set_obj_MA_core__pa_hw__reg__sw_b1_reg(o,y) ({ uint8_t __ret = o.read(346); o.write(346,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__reg__sw_b1_reg(y) ({ uint8_t __ret = ma_read_byte(346); ma_write_byte(346,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__reg__sw_b1_reg(o) (o.read(346) & 0xf0)>>4
#define get_MA_core__pa_hw__reg__sw_b1_reg() ( ma_read_byte(346) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__reg__gd_pchg_reg---
// Gate driver prechage settings vector for reg. force. [b1 a1 b0 a0];
#define MA_core__pa_hw__reg__gd_pchg_reg__a 0x015b
#define MA_core__pa_hw__reg__gd_pchg_reg__len 4
#define MA_core__pa_hw__reg__gd_pchg_reg__mask 0x0f
#define MA_core__pa_hw__reg__gd_pchg_reg__shift 0x00
#define MA_core__pa_hw__reg__gd_pchg_reg__reset 0x00
#define MA_core__pa_hw__reg__gd_pchg_reg__inputonly 0
#define set_obj_MA_core__pa_hw__reg__gd_pchg_reg(o,y) ({ uint8_t __ret = o.read(347); o.write(347,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__reg__gd_pchg_reg(y) ({ uint8_t __ret = ma_read_byte(347); ma_write_byte(347,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__reg__gd_pchg_reg(o) (o.read(347) & 0x0f)>>0
#define get_MA_core__pa_hw__reg__gd_pchg_reg() ( ma_read_byte(347) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__reg__clip_rec_dis_reg0---
// "Register force" value of channel 0 lf_clip_rec_dis bit.
#define MA_core__pa_hw__reg__clip_rec_dis_reg0__a 0x015b
#define MA_core__pa_hw__reg__clip_rec_dis_reg0__len 1
#define MA_core__pa_hw__reg__clip_rec_dis_reg0__mask 0x10
#define MA_core__pa_hw__reg__clip_rec_dis_reg0__shift 0x04
#define MA_core__pa_hw__reg__clip_rec_dis_reg0__reset 0x00
#define MA_core__pa_hw__reg__clip_rec_dis_reg0__inputonly 0
#define set_obj_MA_core__pa_hw__reg__clip_rec_dis_reg0(o,y) ({ uint8_t __ret = o.read(347); o.write(347,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__pa_hw__reg__clip_rec_dis_reg0(y) ({ uint8_t __ret = ma_read_byte(347); ma_write_byte(347,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__pa_hw__reg__clip_rec_dis_reg0(o) (o.read(347) & 0x10)>>4
#define get_MA_core__pa_hw__reg__clip_rec_dis_reg0() ( ma_read_byte(347) & 0x10)>>4
//------------------------------------------------------------------------------core__pa_hw__reg__clip_rec_dis_reg1---
// "Register force" value of channel 1 lf_clip_rec_dis bit.
#define MA_core__pa_hw__reg__clip_rec_dis_reg1__a 0x015b
#define MA_core__pa_hw__reg__clip_rec_dis_reg1__len 1
#define MA_core__pa_hw__reg__clip_rec_dis_reg1__mask 0x20
#define MA_core__pa_hw__reg__clip_rec_dis_reg1__shift 0x05
#define MA_core__pa_hw__reg__clip_rec_dis_reg1__reset 0x00
#define MA_core__pa_hw__reg__clip_rec_dis_reg1__inputonly 0
#define set_obj_MA_core__pa_hw__reg__clip_rec_dis_reg1(o,y) ({ uint8_t __ret = o.read(347); o.write(347,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__pa_hw__reg__clip_rec_dis_reg1(y) ({ uint8_t __ret = ma_read_byte(347); ma_write_byte(347,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__pa_hw__reg__clip_rec_dis_reg1(o) (o.read(347) & 0x20)>>5
#define get_MA_core__pa_hw__reg__clip_rec_dis_reg1() ( ma_read_byte(347) & 0x20)>>5
//------------------------------------------------------------------------------core__pa_hw__status_ch0---
// 
#define MA_core__pa_hw__status_ch0__a 0x015e
#define MA_core__pa_hw__status_ch0__len 4
#define MA_core__pa_hw__status_ch0__mask 0x0f
#define MA_core__pa_hw__status_ch0__shift 0x00
#define MA_core__pa_hw__status_ch0__reset 0x00
#define MA_core__pa_hw__status_ch0__inputonly 1
#define set_obj_MA_core__pa_hw__status_ch0(o,y) ({ uint8_t __ret = o.read(350); o.write(350,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__pa_hw__status_ch0(y) ({ uint8_t __ret = ma_read_byte(350); ma_write_byte(350,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__pa_hw__status_ch0(o) (o.read(350) & 0x0f)>>0
#define get_MA_core__pa_hw__status_ch0() ( ma_read_byte(350) & 0x0f)>>0
//------------------------------------------------------------------------------core__pa_hw__status_ch1---
// 
#define MA_core__pa_hw__status_ch1__a 0x015e
#define MA_core__pa_hw__status_ch1__len 4
#define MA_core__pa_hw__status_ch1__mask 0xf0
#define MA_core__pa_hw__status_ch1__shift 0x04
#define MA_core__pa_hw__status_ch1__reset 0x00
#define MA_core__pa_hw__status_ch1__inputonly 1
#define set_obj_MA_core__pa_hw__status_ch1(o,y) ({ uint8_t __ret = o.read(350); o.write(350,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__status_ch1(y) ({ uint8_t __ret = ma_read_byte(350); ma_write_byte(350,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__status_ch1(o) (o.read(350) & 0xf0)>>4
#define get_MA_core__pa_hw__status_ch1() ( ma_read_byte(350) & 0xf0)>>4
//------------------------------------------------------------------------------core__pa_hw__otp__pwmClkDiv_base---
// PA PWM base clock divider; nom. 2 => 4.096MHz base.
#define MA_core__pa_hw__otp__pwmClkDiv_base__a 0x0155
#define MA_core__pa_hw__otp__pwmClkDiv_base__len 3
#define MA_core__pa_hw__otp__pwmClkDiv_base__mask 0x07
#define MA_core__pa_hw__otp__pwmClkDiv_base__shift 0x00
#define MA_core__pa_hw__otp__pwmClkDiv_base__reset 0x02
#define MA_core__pa_hw__otp__pwmClkDiv_base__inputonly 0
#define set_obj_MA_core__pa_hw__otp__pwmClkDiv_base(o,y) ({ uint8_t __ret = o.read(341); o.write(341,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__pa_hw__otp__pwmClkDiv_base(y) ({ uint8_t __ret = ma_read_byte(341); ma_write_byte(341,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__pa_hw__otp__pwmClkDiv_base(o) (o.read(341) & 0x07)>>0
#define get_MA_core__pa_hw__otp__pwmClkDiv_base() ( ma_read_byte(341) & 0x07)>>0
//------------------------------------------------------------------------------core__pa_hw__otp__cmctrl_hyst---
// Hysteresis in DAC CM control machine
#define MA_core__pa_hw__otp__cmctrl_hyst__a 0x0144
#define MA_core__pa_hw__otp__cmctrl_hyst__len 4
#define MA_core__pa_hw__otp__cmctrl_hyst__mask 0x78
#define MA_core__pa_hw__otp__cmctrl_hyst__shift 0x03
#define MA_core__pa_hw__otp__cmctrl_hyst__reset 0x02
#define MA_core__pa_hw__otp__cmctrl_hyst__inputonly 0
#define set_obj_MA_core__pa_hw__otp__cmctrl_hyst(o,y) ({ uint8_t __ret = o.read(324); o.write(324,(__ret&0x87)|((y<<3)&0x78)); })
#define set_MA_core__pa_hw__otp__cmctrl_hyst(y) ({ uint8_t __ret = ma_read_byte(324); ma_write_byte(324,(__ret&0x87)|((y<<3)&0x78)); })
#define get_obj_MA_core__pa_hw__otp__cmctrl_hyst(o) (o.read(324) & 0x78)>>3
#define get_MA_core__pa_hw__otp__cmctrl_hyst() ( ma_read_byte(324) & 0x78)>>3
//------------------------------------------------------------------------------core__pa_hw__otp__clk_chop_32kHz---
// Low (default) to use 64kHz chop clock, otherwise 32kHz is selected.
#define MA_core__pa_hw__otp__clk_chop_32kHz__a 0x0155
#define MA_core__pa_hw__otp__clk_chop_32kHz__len 1
#define MA_core__pa_hw__otp__clk_chop_32kHz__mask 0x08
#define MA_core__pa_hw__otp__clk_chop_32kHz__shift 0x03
#define MA_core__pa_hw__otp__clk_chop_32kHz__reset 0x00
#define MA_core__pa_hw__otp__clk_chop_32kHz__inputonly 0
#define set_obj_MA_core__pa_hw__otp__clk_chop_32kHz(o,y) ({ uint8_t __ret = o.read(341); o.write(341,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pa_hw__otp__clk_chop_32kHz(y) ({ uint8_t __ret = ma_read_byte(341); ma_write_byte(341,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pa_hw__otp__clk_chop_32kHz(o) (o.read(341) & 0x08)>>3
#define get_MA_core__pa_hw__otp__clk_chop_32kHz() ( ma_read_byte(341) & 0x08)>>3
//------------------------------------------------------------------------------core__pa_hw__reg__afir_force_disable0---
// High to force disable of AFIR in channel 0.
#define MA_core__pa_hw__reg__afir_force_disable0__a 0x015c
#define MA_core__pa_hw__reg__afir_force_disable0__len 1
#define MA_core__pa_hw__reg__afir_force_disable0__mask 0x01
#define MA_core__pa_hw__reg__afir_force_disable0__shift 0x00
#define MA_core__pa_hw__reg__afir_force_disable0__reset 0x00
#define MA_core__pa_hw__reg__afir_force_disable0__inputonly 0
#define set_obj_MA_core__pa_hw__reg__afir_force_disable0(o,y) ({ uint8_t __ret = o.read(348); o.write(348,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__pa_hw__reg__afir_force_disable0(y) ({ uint8_t __ret = ma_read_byte(348); ma_write_byte(348,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__pa_hw__reg__afir_force_disable0(o) (o.read(348) & 0x01)>>0
#define get_MA_core__pa_hw__reg__afir_force_disable0() ( ma_read_byte(348) & 0x01)>>0
//------------------------------------------------------------------------------core__pa_hw__reg__afir_force_disable1---
// High to force disable of AFIR in channel 1.
#define MA_core__pa_hw__reg__afir_force_disable1__a 0x015c
#define MA_core__pa_hw__reg__afir_force_disable1__len 1
#define MA_core__pa_hw__reg__afir_force_disable1__mask 0x02
#define MA_core__pa_hw__reg__afir_force_disable1__shift 0x01
#define MA_core__pa_hw__reg__afir_force_disable1__reset 0x00
#define MA_core__pa_hw__reg__afir_force_disable1__inputonly 0
#define set_obj_MA_core__pa_hw__reg__afir_force_disable1(o,y) ({ uint8_t __ret = o.read(348); o.write(348,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__pa_hw__reg__afir_force_disable1(y) ({ uint8_t __ret = ma_read_byte(348); ma_write_byte(348,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__pa_hw__reg__afir_force_disable1(o) (o.read(348) & 0x02)>>1
#define get_MA_core__pa_hw__reg__afir_force_disable1() ( ma_read_byte(348) & 0x02)>>1
//------------------------------------------------------------------------------core__pa_hw__reg__lf_force_disable0---
// High to force disable of loop filter in channel 0.
#define MA_core__pa_hw__reg__lf_force_disable0__a 0x015c
#define MA_core__pa_hw__reg__lf_force_disable0__len 1
#define MA_core__pa_hw__reg__lf_force_disable0__mask 0x04
#define MA_core__pa_hw__reg__lf_force_disable0__shift 0x02
#define MA_core__pa_hw__reg__lf_force_disable0__reset 0x00
#define MA_core__pa_hw__reg__lf_force_disable0__inputonly 0
#define set_obj_MA_core__pa_hw__reg__lf_force_disable0(o,y) ({ uint8_t __ret = o.read(348); o.write(348,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__pa_hw__reg__lf_force_disable0(y) ({ uint8_t __ret = ma_read_byte(348); ma_write_byte(348,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__pa_hw__reg__lf_force_disable0(o) (o.read(348) & 0x04)>>2
#define get_MA_core__pa_hw__reg__lf_force_disable0() ( ma_read_byte(348) & 0x04)>>2
//------------------------------------------------------------------------------core__pa_hw__reg__lf_force_disable1---
// High to force disable of loop filter in channel 1.
#define MA_core__pa_hw__reg__lf_force_disable1__a 0x015c
#define MA_core__pa_hw__reg__lf_force_disable1__len 1
#define MA_core__pa_hw__reg__lf_force_disable1__mask 0x08
#define MA_core__pa_hw__reg__lf_force_disable1__shift 0x03
#define MA_core__pa_hw__reg__lf_force_disable1__reset 0x00
#define MA_core__pa_hw__reg__lf_force_disable1__inputonly 0
#define set_obj_MA_core__pa_hw__reg__lf_force_disable1(o,y) ({ uint8_t __ret = o.read(348); o.write(348,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__pa_hw__reg__lf_force_disable1(y) ({ uint8_t __ret = ma_read_byte(348); ma_write_byte(348,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__pa_hw__reg__lf_force_disable1(o) (o.read(348) & 0x08)>>3
#define get_MA_core__pa_hw__reg__lf_force_disable1() ( ma_read_byte(348) & 0x08)>>3
//------------------------------------------------------------------------------core__pa_hw__reg__pwm_force_disable0---
// High to force disable of PWM in channel 0.
#define MA_core__pa_hw__reg__pwm_force_disable0__a 0x015c
#define MA_core__pa_hw__reg__pwm_force_disable0__len 1
#define MA_core__pa_hw__reg__pwm_force_disable0__mask 0x10
#define MA_core__pa_hw__reg__pwm_force_disable0__shift 0x04
#define MA_core__pa_hw__reg__pwm_force_disable0__reset 0x00
#define MA_core__pa_hw__reg__pwm_force_disable0__inputonly 0
#define set_obj_MA_core__pa_hw__reg__pwm_force_disable0(o,y) ({ uint8_t __ret = o.read(348); o.write(348,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__pa_hw__reg__pwm_force_disable0(y) ({ uint8_t __ret = ma_read_byte(348); ma_write_byte(348,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__pa_hw__reg__pwm_force_disable0(o) (o.read(348) & 0x10)>>4
#define get_MA_core__pa_hw__reg__pwm_force_disable0() ( ma_read_byte(348) & 0x10)>>4
//------------------------------------------------------------------------------core__pa_hw__reg__pwm_force_disable1---
// High to force disable of PWM in channel 1.
#define MA_core__pa_hw__reg__pwm_force_disable1__a 0x015c
#define MA_core__pa_hw__reg__pwm_force_disable1__len 1
#define MA_core__pa_hw__reg__pwm_force_disable1__mask 0x20
#define MA_core__pa_hw__reg__pwm_force_disable1__shift 0x05
#define MA_core__pa_hw__reg__pwm_force_disable1__reset 0x00
#define MA_core__pa_hw__reg__pwm_force_disable1__inputonly 0
#define set_obj_MA_core__pa_hw__reg__pwm_force_disable1(o,y) ({ uint8_t __ret = o.read(348); o.write(348,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__pa_hw__reg__pwm_force_disable1(y) ({ uint8_t __ret = ma_read_byte(348); ma_write_byte(348,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__pa_hw__reg__pwm_force_disable1(o) (o.read(348) & 0x20)>>5
#define get_MA_core__pa_hw__reg__pwm_force_disable1() ( ma_read_byte(348) & 0x20)>>5
//------------------------------------------------------------------------------core__pa_hw__otp__gd_pd_strong---
// Gate driver strong pull down enable vector [b1 a1 b0 a0].
#define MA_core__pa_hw__otp__gd_pd_strong__a 0x0155
#define MA_core__pa_hw__otp__gd_pd_strong__len 4
#define MA_core__pa_hw__otp__gd_pd_strong__mask 0xf0
#define MA_core__pa_hw__otp__gd_pd_strong__shift 0x04
#define MA_core__pa_hw__otp__gd_pd_strong__reset 0x00
#define MA_core__pa_hw__otp__gd_pd_strong__inputonly 0
#define set_obj_MA_core__pa_hw__otp__gd_pd_strong(o,y) ({ uint8_t __ret = o.read(341); o.write(341,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__pa_hw__otp__gd_pd_strong(y) ({ uint8_t __ret = ma_read_byte(341); ma_write_byte(341,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__pa_hw__otp__gd_pd_strong(o) (o.read(341) & 0xf0)>>4
#define get_MA_core__pa_hw__otp__gd_pd_strong() ( ma_read_byte(341) & 0xf0)>>4
//------------------------------------------------------------------------------core__clk_sys__enable_dco_ow---
// 
#define MA_core__clk_sys__enable_dco_ow__a 0x0180
#define MA_core__clk_sys__enable_dco_ow__len 1
#define MA_core__clk_sys__enable_dco_ow__mask 0x01
#define MA_core__clk_sys__enable_dco_ow__shift 0x00
#define MA_core__clk_sys__enable_dco_ow__reset 0x00
#define MA_core__clk_sys__enable_dco_ow__inputonly 0
#define set_obj_MA_core__clk_sys__enable_dco_ow(o,y) ({ uint8_t __ret = o.read(384); o.write(384,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__enable_dco_ow(y) ({ uint8_t __ret = ma_read_byte(384); ma_write_byte(384,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__enable_dco_ow(o) (o.read(384) & 0x01)>>0
#define get_MA_core__clk_sys__enable_dco_ow() ( ma_read_byte(384) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__enable_dco---
// 
#define MA_core__clk_sys__enable_dco__a 0x0180
#define MA_core__clk_sys__enable_dco__len 1
#define MA_core__clk_sys__enable_dco__mask 0x02
#define MA_core__clk_sys__enable_dco__shift 0x01
#define MA_core__clk_sys__enable_dco__reset 0x00
#define MA_core__clk_sys__enable_dco__inputonly 0
#define set_obj_MA_core__clk_sys__enable_dco(o,y) ({ uint8_t __ret = o.read(384); o.write(384,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__enable_dco(y) ({ uint8_t __ret = ma_read_byte(384); ma_write_byte(384,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__enable_dco(o) (o.read(384) & 0x02)>>1
#define get_MA_core__clk_sys__enable_dco() ( ma_read_byte(384) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__dco_enable_ow_single_bits---
// 
#define MA_core__clk_sys__dco_enable_ow_single_bits__a 0x0180
#define MA_core__clk_sys__dco_enable_ow_single_bits__len 1
#define MA_core__clk_sys__dco_enable_ow_single_bits__mask 0x04
#define MA_core__clk_sys__dco_enable_ow_single_bits__shift 0x02
#define MA_core__clk_sys__dco_enable_ow_single_bits__reset 0x00
#define MA_core__clk_sys__dco_enable_ow_single_bits__inputonly 0
#define set_obj_MA_core__clk_sys__dco_enable_ow_single_bits(o,y) ({ uint8_t __ret = o.read(384); o.write(384,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__dco_enable_ow_single_bits(y) ({ uint8_t __ret = ma_read_byte(384); ma_write_byte(384,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__dco_enable_ow_single_bits(o) (o.read(384) & 0x04)>>2
#define get_MA_core__clk_sys__dco_enable_ow_single_bits() ( ma_read_byte(384) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__dco_bias_enable_single_bit---
// 
#define MA_core__clk_sys__dco_bias_enable_single_bit__a 0x0180
#define MA_core__clk_sys__dco_bias_enable_single_bit__len 1
#define MA_core__clk_sys__dco_bias_enable_single_bit__mask 0x08
#define MA_core__clk_sys__dco_bias_enable_single_bit__shift 0x03
#define MA_core__clk_sys__dco_bias_enable_single_bit__reset 0x00
#define MA_core__clk_sys__dco_bias_enable_single_bit__inputonly 0
#define set_obj_MA_core__clk_sys__dco_bias_enable_single_bit(o,y) ({ uint8_t __ret = o.read(384); o.write(384,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__dco_bias_enable_single_bit(y) ({ uint8_t __ret = ma_read_byte(384); ma_write_byte(384,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__dco_bias_enable_single_bit(o) (o.read(384) & 0x08)>>3
#define get_MA_core__clk_sys__dco_bias_enable_single_bit() ( ma_read_byte(384) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__dco_core_bias_enable_single_bit---
// 
#define MA_core__clk_sys__dco_core_bias_enable_single_bit__a 0x0180
#define MA_core__clk_sys__dco_core_bias_enable_single_bit__len 1
#define MA_core__clk_sys__dco_core_bias_enable_single_bit__mask 0x10
#define MA_core__clk_sys__dco_core_bias_enable_single_bit__shift 0x04
#define MA_core__clk_sys__dco_core_bias_enable_single_bit__reset 0x00
#define MA_core__clk_sys__dco_core_bias_enable_single_bit__inputonly 0
#define set_obj_MA_core__clk_sys__dco_core_bias_enable_single_bit(o,y) ({ uint8_t __ret = o.read(384); o.write(384,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__dco_core_bias_enable_single_bit(y) ({ uint8_t __ret = ma_read_byte(384); ma_write_byte(384,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__dco_core_bias_enable_single_bit(o) (o.read(384) & 0x10)>>4
#define get_MA_core__clk_sys__dco_core_bias_enable_single_bit() ( ma_read_byte(384) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__dco_core_enable_single_bit---
// 
#define MA_core__clk_sys__dco_core_enable_single_bit__a 0x0180
#define MA_core__clk_sys__dco_core_enable_single_bit__len 1
#define MA_core__clk_sys__dco_core_enable_single_bit__mask 0x20
#define MA_core__clk_sys__dco_core_enable_single_bit__shift 0x05
#define MA_core__clk_sys__dco_core_enable_single_bit__reset 0x00
#define MA_core__clk_sys__dco_core_enable_single_bit__inputonly 0
#define set_obj_MA_core__clk_sys__dco_core_enable_single_bit(o,y) ({ uint8_t __ret = o.read(384); o.write(384,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__clk_sys__dco_core_enable_single_bit(y) ({ uint8_t __ret = ma_read_byte(384); ma_write_byte(384,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__clk_sys__dco_core_enable_single_bit(o) (o.read(384) & 0x20)>>5
#define get_MA_core__clk_sys__dco_core_enable_single_bit() ( ma_read_byte(384) & 0x20)>>5
//------------------------------------------------------------------------------core__clk_sys__dco_clk_enable_single_bit---
// 
#define MA_core__clk_sys__dco_clk_enable_single_bit__a 0x0180
#define MA_core__clk_sys__dco_clk_enable_single_bit__len 1
#define MA_core__clk_sys__dco_clk_enable_single_bit__mask 0x40
#define MA_core__clk_sys__dco_clk_enable_single_bit__shift 0x06
#define MA_core__clk_sys__dco_clk_enable_single_bit__reset 0x00
#define MA_core__clk_sys__dco_clk_enable_single_bit__inputonly 0
#define set_obj_MA_core__clk_sys__dco_clk_enable_single_bit(o,y) ({ uint8_t __ret = o.read(384); o.write(384,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__clk_sys__dco_clk_enable_single_bit(y) ({ uint8_t __ret = ma_read_byte(384); ma_write_byte(384,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__clk_sys__dco_clk_enable_single_bit(o) (o.read(384) & 0x40)>>6
#define get_MA_core__clk_sys__dco_clk_enable_single_bit() ( ma_read_byte(384) & 0x40)>>6
//------------------------------------------------------------------------------core__clk_sys__dpll_enable_ow---
// 
#define MA_core__clk_sys__dpll_enable_ow__a 0x0181
#define MA_core__clk_sys__dpll_enable_ow__len 1
#define MA_core__clk_sys__dpll_enable_ow__mask 0x01
#define MA_core__clk_sys__dpll_enable_ow__shift 0x00
#define MA_core__clk_sys__dpll_enable_ow__reset 0x00
#define MA_core__clk_sys__dpll_enable_ow__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_enable_ow(o,y) ({ uint8_t __ret = o.read(385); o.write(385,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__dpll_enable_ow(y) ({ uint8_t __ret = ma_read_byte(385); ma_write_byte(385,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__dpll_enable_ow(o) (o.read(385) & 0x01)>>0
#define get_MA_core__clk_sys__dpll_enable_ow() ( ma_read_byte(385) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__dpll_enable---
// 
#define MA_core__clk_sys__dpll_enable__a 0x0181
#define MA_core__clk_sys__dpll_enable__len 1
#define MA_core__clk_sys__dpll_enable__mask 0x02
#define MA_core__clk_sys__dpll_enable__shift 0x01
#define MA_core__clk_sys__dpll_enable__reset 0x00
#define MA_core__clk_sys__dpll_enable__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_enable(o,y) ({ uint8_t __ret = o.read(385); o.write(385,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__dpll_enable(y) ({ uint8_t __ret = ma_read_byte(385); ma_write_byte(385,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__dpll_enable(o) (o.read(385) & 0x02)>>1
#define get_MA_core__clk_sys__dpll_enable() ( ma_read_byte(385) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__dpll_sleep_ow---
// 
#define MA_core__clk_sys__dpll_sleep_ow__a 0x0181
#define MA_core__clk_sys__dpll_sleep_ow__len 1
#define MA_core__clk_sys__dpll_sleep_ow__mask 0x04
#define MA_core__clk_sys__dpll_sleep_ow__shift 0x02
#define MA_core__clk_sys__dpll_sleep_ow__reset 0x00
#define MA_core__clk_sys__dpll_sleep_ow__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_sleep_ow(o,y) ({ uint8_t __ret = o.read(385); o.write(385,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__dpll_sleep_ow(y) ({ uint8_t __ret = ma_read_byte(385); ma_write_byte(385,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__dpll_sleep_ow(o) (o.read(385) & 0x04)>>2
#define get_MA_core__clk_sys__dpll_sleep_ow() ( ma_read_byte(385) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__dpll_sleep---
// 
#define MA_core__clk_sys__dpll_sleep__a 0x0181
#define MA_core__clk_sys__dpll_sleep__len 1
#define MA_core__clk_sys__dpll_sleep__mask 0x08
#define MA_core__clk_sys__dpll_sleep__shift 0x03
#define MA_core__clk_sys__dpll_sleep__reset 0x00
#define MA_core__clk_sys__dpll_sleep__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_sleep(o,y) ({ uint8_t __ret = o.read(385); o.write(385,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__dpll_sleep(y) ({ uint8_t __ret = ma_read_byte(385); ma_write_byte(385,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__dpll_sleep(o) (o.read(385) & 0x08)>>3
#define get_MA_core__clk_sys__dpll_sleep() ( ma_read_byte(385) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__dpll_run_dco_free_ow---
// 
#define MA_core__clk_sys__dpll_run_dco_free_ow__a 0x0181
#define MA_core__clk_sys__dpll_run_dco_free_ow__len 1
#define MA_core__clk_sys__dpll_run_dco_free_ow__mask 0x10
#define MA_core__clk_sys__dpll_run_dco_free_ow__shift 0x04
#define MA_core__clk_sys__dpll_run_dco_free_ow__reset 0x00
#define MA_core__clk_sys__dpll_run_dco_free_ow__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_run_dco_free_ow(o,y) ({ uint8_t __ret = o.read(385); o.write(385,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__dpll_run_dco_free_ow(y) ({ uint8_t __ret = ma_read_byte(385); ma_write_byte(385,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__dpll_run_dco_free_ow(o) (o.read(385) & 0x10)>>4
#define get_MA_core__clk_sys__dpll_run_dco_free_ow() ( ma_read_byte(385) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__dpll_run_dco_free---
// 
#define MA_core__clk_sys__dpll_run_dco_free__a 0x0181
#define MA_core__clk_sys__dpll_run_dco_free__len 1
#define MA_core__clk_sys__dpll_run_dco_free__mask 0x20
#define MA_core__clk_sys__dpll_run_dco_free__shift 0x05
#define MA_core__clk_sys__dpll_run_dco_free__reset 0x00
#define MA_core__clk_sys__dpll_run_dco_free__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_run_dco_free(o,y) ({ uint8_t __ret = o.read(385); o.write(385,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__clk_sys__dpll_run_dco_free(y) ({ uint8_t __ret = ma_read_byte(385); ma_write_byte(385,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__clk_sys__dpll_run_dco_free(o) (o.read(385) & 0x20)>>5
#define get_MA_core__clk_sys__dpll_run_dco_free() ( ma_read_byte(385) & 0x20)>>5
//------------------------------------------------------------------------------core__clk_sys__dco_trim_coarse---
// 
#define MA_core__clk_sys__dco_trim_coarse__a 0x0182
#define MA_core__clk_sys__dco_trim_coarse__len 5
#define MA_core__clk_sys__dco_trim_coarse__mask 0x1f
#define MA_core__clk_sys__dco_trim_coarse__shift 0x00
#define MA_core__clk_sys__dco_trim_coarse__reset 0x00
#define MA_core__clk_sys__dco_trim_coarse__inputonly 0
#define set_obj_MA_core__clk_sys__dco_trim_coarse(o,y) ({ uint8_t __ret = o.read(386); o.write(386,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__dco_trim_coarse(y) ({ uint8_t __ret = ma_read_byte(386); ma_write_byte(386,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__dco_trim_coarse(o) (o.read(386) & 0x1f)>>0
#define get_MA_core__clk_sys__dco_trim_coarse() ( ma_read_byte(386) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__dco_trim_ow---
// 
#define MA_core__clk_sys__dco_trim_ow__a 0x0182
#define MA_core__clk_sys__dco_trim_ow__len 1
#define MA_core__clk_sys__dco_trim_ow__mask 0x20
#define MA_core__clk_sys__dco_trim_ow__shift 0x05
#define MA_core__clk_sys__dco_trim_ow__reset 0x00
#define MA_core__clk_sys__dco_trim_ow__inputonly 0
#define set_obj_MA_core__clk_sys__dco_trim_ow(o,y) ({ uint8_t __ret = o.read(386); o.write(386,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__clk_sys__dco_trim_ow(y) ({ uint8_t __ret = ma_read_byte(386); ma_write_byte(386,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__clk_sys__dco_trim_ow(o) (o.read(386) & 0x20)>>5
#define get_MA_core__clk_sys__dco_trim_ow() ( ma_read_byte(386) & 0x20)>>5
//------------------------------------------------------------------------------core__clk_sys__dco_trim_fine---
// 
#define MA_core__clk_sys__dco_trim_fine__a 0x0183
#define MA_core__clk_sys__dco_trim_fine__len 6
#define MA_core__clk_sys__dco_trim_fine__mask 0x3f
#define MA_core__clk_sys__dco_trim_fine__shift 0x00
#define MA_core__clk_sys__dco_trim_fine__reset 0x00
#define MA_core__clk_sys__dco_trim_fine__inputonly 0
#define set_obj_MA_core__clk_sys__dco_trim_fine(o,y) ({ uint8_t __ret = o.read(387); o.write(387,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__dco_trim_fine(y) ({ uint8_t __ret = ma_read_byte(387); ma_write_byte(387,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__dco_trim_fine(o) (o.read(387) & 0x3f)>>0
#define get_MA_core__clk_sys__dco_trim_fine() ( ma_read_byte(387) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__auto_detect_enable_ow---
// 
#define MA_core__clk_sys__auto_detect_enable_ow__a 0x0184
#define MA_core__clk_sys__auto_detect_enable_ow__len 1
#define MA_core__clk_sys__auto_detect_enable_ow__mask 0x01
#define MA_core__clk_sys__auto_detect_enable_ow__shift 0x00
#define MA_core__clk_sys__auto_detect_enable_ow__reset 0x00
#define MA_core__clk_sys__auto_detect_enable_ow__inputonly 0
#define set_obj_MA_core__clk_sys__auto_detect_enable_ow(o,y) ({ uint8_t __ret = o.read(388); o.write(388,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__auto_detect_enable_ow(y) ({ uint8_t __ret = ma_read_byte(388); ma_write_byte(388,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__auto_detect_enable_ow(o) (o.read(388) & 0x01)>>0
#define get_MA_core__clk_sys__auto_detect_enable_ow() ( ma_read_byte(388) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__enable_auto_detect---
// 
#define MA_core__clk_sys__enable_auto_detect__a 0x0184
#define MA_core__clk_sys__enable_auto_detect__len 1
#define MA_core__clk_sys__enable_auto_detect__mask 0x02
#define MA_core__clk_sys__enable_auto_detect__shift 0x01
#define MA_core__clk_sys__enable_auto_detect__reset 0x00
#define MA_core__clk_sys__enable_auto_detect__inputonly 0
#define set_obj_MA_core__clk_sys__enable_auto_detect(o,y) ({ uint8_t __ret = o.read(388); o.write(388,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__enable_auto_detect(y) ({ uint8_t __ret = ma_read_byte(388); ma_write_byte(388,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__enable_auto_detect(o) (o.read(388) & 0x02)>>1
#define get_MA_core__clk_sys__enable_auto_detect() ( ma_read_byte(388) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__div_ow---
// 
#define MA_core__clk_sys__div_ow__a 0x0184
#define MA_core__clk_sys__div_ow__len 1
#define MA_core__clk_sys__div_ow__mask 0x04
#define MA_core__clk_sys__div_ow__shift 0x02
#define MA_core__clk_sys__div_ow__reset 0x00
#define MA_core__clk_sys__div_ow__inputonly 0
#define set_obj_MA_core__clk_sys__div_ow(o,y) ({ uint8_t __ret = o.read(388); o.write(388,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__div_ow(y) ({ uint8_t __ret = ma_read_byte(388); ma_write_byte(388,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__div_ow(o) (o.read(388) & 0x04)>>2
#define get_MA_core__clk_sys__div_ow() ( ma_read_byte(388) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__mode_m_div---
// 
#define MA_core__clk_sys__mode_m_div__a 0x0185
#define MA_core__clk_sys__mode_m_div__len 6
#define MA_core__clk_sys__mode_m_div__mask 0x3f
#define MA_core__clk_sys__mode_m_div__shift 0x00
#define MA_core__clk_sys__mode_m_div__reset 0x00
#define MA_core__clk_sys__mode_m_div__inputonly 0
#define set_obj_MA_core__clk_sys__mode_m_div(o,y) ({ uint8_t __ret = o.read(389); o.write(389,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__mode_m_div(y) ({ uint8_t __ret = ma_read_byte(389); ma_write_byte(389,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__mode_m_div(o) (o.read(389) & 0x3f)>>0
#define get_MA_core__clk_sys__mode_m_div() ( ma_read_byte(389) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__mode_ref_div---
// 
#define MA_core__clk_sys__mode_ref_div__a 0x0185
#define MA_core__clk_sys__mode_ref_div__len 1
#define MA_core__clk_sys__mode_ref_div__mask 0x40
#define MA_core__clk_sys__mode_ref_div__shift 0x06
#define MA_core__clk_sys__mode_ref_div__reset 0x00
#define MA_core__clk_sys__mode_ref_div__inputonly 0
#define set_obj_MA_core__clk_sys__mode_ref_div(o,y) ({ uint8_t __ret = o.read(389); o.write(389,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__clk_sys__mode_ref_div(y) ({ uint8_t __ret = ma_read_byte(389); ma_write_byte(389,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__clk_sys__mode_ref_div(o) (o.read(389) & 0x40)>>6
#define get_MA_core__clk_sys__mode_ref_div() ( ma_read_byte(389) & 0x40)>>6
//------------------------------------------------------------------------------core__clk_sys__mode_fb_div---
// 
#define MA_core__clk_sys__mode_fb_div__a 0x0185
#define MA_core__clk_sys__mode_fb_div__len 1
#define MA_core__clk_sys__mode_fb_div__mask 0x80
#define MA_core__clk_sys__mode_fb_div__shift 0x07
#define MA_core__clk_sys__mode_fb_div__reset 0x00
#define MA_core__clk_sys__mode_fb_div__inputonly 0
#define set_obj_MA_core__clk_sys__mode_fb_div(o,y) ({ uint8_t __ret = o.read(389); o.write(389,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__clk_sys__mode_fb_div(y) ({ uint8_t __ret = ma_read_byte(389); ma_write_byte(389,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__clk_sys__mode_fb_div(o) (o.read(389) & 0x80)>>7
#define get_MA_core__clk_sys__mode_fb_div() ( ma_read_byte(389) & 0x80)>>7
//------------------------------------------------------------------------------core__clk_sys__sys_clk_div---
// System clock frequency select; 0: 24 MHz, 1: 48 MHz
#define MA_core__clk_sys__sys_clk_div__a 0x0186
#define MA_core__clk_sys__sys_clk_div__len 1
#define MA_core__clk_sys__sys_clk_div__mask 0x01
#define MA_core__clk_sys__sys_clk_div__shift 0x00
#define MA_core__clk_sys__sys_clk_div__reset 0x00
#define MA_core__clk_sys__sys_clk_div__inputonly 0
#define set_obj_MA_core__clk_sys__sys_clk_div(o,y) ({ uint8_t __ret = o.read(390); o.write(390,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__sys_clk_div(y) ({ uint8_t __ret = ma_read_byte(390); ma_write_byte(390,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__sys_clk_div(o) (o.read(390) & 0x01)>>0
#define get_MA_core__clk_sys__sys_clk_div() ( ma_read_byte(390) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__i2s_frame_ow---
// 
#define MA_core__clk_sys__i2s_frame_ow__a 0x0186
#define MA_core__clk_sys__i2s_frame_ow__len 1
#define MA_core__clk_sys__i2s_frame_ow__mask 0x04
#define MA_core__clk_sys__i2s_frame_ow__shift 0x02
#define MA_core__clk_sys__i2s_frame_ow__reset 0x00
#define MA_core__clk_sys__i2s_frame_ow__inputonly 0
#define set_obj_MA_core__clk_sys__i2s_frame_ow(o,y) ({ uint8_t __ret = o.read(390); o.write(390,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__i2s_frame_ow(y) ({ uint8_t __ret = ma_read_byte(390); ma_write_byte(390,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__i2s_frame_ow(o) (o.read(390) & 0x04)>>2
#define get_MA_core__clk_sys__i2s_frame_ow() ( ma_read_byte(390) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__framesize---
// 
#define MA_core__clk_sys__framesize__a 0x0186
#define MA_core__clk_sys__framesize__len 2
#define MA_core__clk_sys__framesize__mask 0x18
#define MA_core__clk_sys__framesize__shift 0x03
#define MA_core__clk_sys__framesize__reset 0x00
#define MA_core__clk_sys__framesize__inputonly 0
#define set_obj_MA_core__clk_sys__framesize(o,y) ({ uint8_t __ret = o.read(390); o.write(390,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__clk_sys__framesize(y) ({ uint8_t __ret = ma_read_byte(390); ma_write_byte(390,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__clk_sys__framesize(o) (o.read(390) & 0x18)>>3
#define get_MA_core__clk_sys__framesize() ( ma_read_byte(390) & 0x18)>>3
//------------------------------------------------------------------------------core__clk_sys__i2s_sck_Fs_base---
// 
#define MA_core__clk_sys__i2s_sck_Fs_base__a 0x0186
#define MA_core__clk_sys__i2s_sck_Fs_base__len 2
#define MA_core__clk_sys__i2s_sck_Fs_base__mask 0x60
#define MA_core__clk_sys__i2s_sck_Fs_base__shift 0x05
#define MA_core__clk_sys__i2s_sck_Fs_base__reset 0x00
#define MA_core__clk_sys__i2s_sck_Fs_base__inputonly 0
#define set_obj_MA_core__clk_sys__i2s_sck_Fs_base(o,y) ({ uint8_t __ret = o.read(390); o.write(390,(__ret&0x9f)|((y<<5)&0x60)); })
#define set_MA_core__clk_sys__i2s_sck_Fs_base(y) ({ uint8_t __ret = ma_read_byte(390); ma_write_byte(390,(__ret&0x9f)|((y<<5)&0x60)); })
#define get_obj_MA_core__clk_sys__i2s_sck_Fs_base(o) (o.read(390) & 0x60)>>5
#define get_MA_core__clk_sys__i2s_sck_Fs_base() ( ma_read_byte(390) & 0x60)>>5
//------------------------------------------------------------------------------core__clk_sys__bit_clk---
// 
#define MA_core__clk_sys__bit_clk__a 0x0188
#define MA_core__clk_sys__bit_clk__len 5
#define MA_core__clk_sys__bit_clk__mask 0x1f
#define MA_core__clk_sys__bit_clk__shift 0x00
#define MA_core__clk_sys__bit_clk__reset 0x00
#define MA_core__clk_sys__bit_clk__inputonly 0
#define set_obj_MA_core__clk_sys__bit_clk(o,y) ({ uint8_t __ret = o.read(392); o.write(392,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__bit_clk(y) ({ uint8_t __ret = ma_read_byte(392); ma_write_byte(392,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__bit_clk(o) (o.read(392) & 0x1f)>>0
#define get_MA_core__clk_sys__bit_clk() ( ma_read_byte(392) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__dco_clk_ok_ow---
// 
#define MA_core__clk_sys__dco_clk_ok_ow__a 0x0189
#define MA_core__clk_sys__dco_clk_ok_ow__len 1
#define MA_core__clk_sys__dco_clk_ok_ow__mask 0x01
#define MA_core__clk_sys__dco_clk_ok_ow__shift 0x00
#define MA_core__clk_sys__dco_clk_ok_ow__reset 0x00
#define MA_core__clk_sys__dco_clk_ok_ow__inputonly 0
#define set_obj_MA_core__clk_sys__dco_clk_ok_ow(o,y) ({ uint8_t __ret = o.read(393); o.write(393,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__dco_clk_ok_ow(y) ({ uint8_t __ret = ma_read_byte(393); ma_write_byte(393,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__dco_clk_ok_ow(o) (o.read(393) & 0x01)>>0
#define get_MA_core__clk_sys__dco_clk_ok_ow() ( ma_read_byte(393) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__dco_clk_ok---
// 
#define MA_core__clk_sys__dco_clk_ok__a 0x0189
#define MA_core__clk_sys__dco_clk_ok__len 1
#define MA_core__clk_sys__dco_clk_ok__mask 0x02
#define MA_core__clk_sys__dco_clk_ok__shift 0x01
#define MA_core__clk_sys__dco_clk_ok__reset 0x00
#define MA_core__clk_sys__dco_clk_ok__inputonly 0
#define set_obj_MA_core__clk_sys__dco_clk_ok(o,y) ({ uint8_t __ret = o.read(393); o.write(393,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__dco_clk_ok(y) ({ uint8_t __ret = ma_read_byte(393); ma_write_byte(393,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__dco_clk_ok(o) (o.read(393) & 0x02)>>1
#define get_MA_core__clk_sys__dco_clk_ok() ( ma_read_byte(393) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__pll_locked_ow---
// 
#define MA_core__clk_sys__pll_locked_ow__a 0x0189
#define MA_core__clk_sys__pll_locked_ow__len 1
#define MA_core__clk_sys__pll_locked_ow__mask 0x04
#define MA_core__clk_sys__pll_locked_ow__shift 0x02
#define MA_core__clk_sys__pll_locked_ow__reset 0x00
#define MA_core__clk_sys__pll_locked_ow__inputonly 0
#define set_obj_MA_core__clk_sys__pll_locked_ow(o,y) ({ uint8_t __ret = o.read(393); o.write(393,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__pll_locked_ow(y) ({ uint8_t __ret = ma_read_byte(393); ma_write_byte(393,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__pll_locked_ow(o) (o.read(393) & 0x04)>>2
#define get_MA_core__clk_sys__pll_locked_ow() ( ma_read_byte(393) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__pll_locked---
// 
#define MA_core__clk_sys__pll_locked__a 0x0189
#define MA_core__clk_sys__pll_locked__len 1
#define MA_core__clk_sys__pll_locked__mask 0x08
#define MA_core__clk_sys__pll_locked__shift 0x03
#define MA_core__clk_sys__pll_locked__reset 0x00
#define MA_core__clk_sys__pll_locked__inputonly 0
#define set_obj_MA_core__clk_sys__pll_locked(o,y) ({ uint8_t __ret = o.read(393); o.write(393,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__pll_locked(y) ({ uint8_t __ret = ma_read_byte(393); ma_write_byte(393,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__pll_locked(o) (o.read(393) & 0x08)>>3
#define get_MA_core__clk_sys__pll_locked() ( ma_read_byte(393) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__i2s_sck_ok_ow---
// 
#define MA_core__clk_sys__i2s_sck_ok_ow__a 0x0189
#define MA_core__clk_sys__i2s_sck_ok_ow__len 1
#define MA_core__clk_sys__i2s_sck_ok_ow__mask 0x10
#define MA_core__clk_sys__i2s_sck_ok_ow__shift 0x04
#define MA_core__clk_sys__i2s_sck_ok_ow__reset 0x00
#define MA_core__clk_sys__i2s_sck_ok_ow__inputonly 0
#define set_obj_MA_core__clk_sys__i2s_sck_ok_ow(o,y) ({ uint8_t __ret = o.read(393); o.write(393,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__i2s_sck_ok_ow(y) ({ uint8_t __ret = ma_read_byte(393); ma_write_byte(393,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__i2s_sck_ok_ow(o) (o.read(393) & 0x10)>>4
#define get_MA_core__clk_sys__i2s_sck_ok_ow() ( ma_read_byte(393) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__i2s_sck_ok---
// 
#define MA_core__clk_sys__i2s_sck_ok__a 0x0189
#define MA_core__clk_sys__i2s_sck_ok__len 1
#define MA_core__clk_sys__i2s_sck_ok__mask 0x20
#define MA_core__clk_sys__i2s_sck_ok__shift 0x05
#define MA_core__clk_sys__i2s_sck_ok__reset 0x00
#define MA_core__clk_sys__i2s_sck_ok__inputonly 0
#define set_obj_MA_core__clk_sys__i2s_sck_ok(o,y) ({ uint8_t __ret = o.read(393); o.write(393,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__clk_sys__i2s_sck_ok(y) ({ uint8_t __ret = ma_read_byte(393); ma_write_byte(393,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__clk_sys__i2s_sck_ok(o) (o.read(393) & 0x20)>>5
#define get_MA_core__clk_sys__i2s_sck_ok() ( ma_read_byte(393) & 0x20)>>5
//------------------------------------------------------------------------------core__clk_sys__dpll_test_enable---
// 
#define MA_core__clk_sys__dpll_test_enable__a 0x018a
#define MA_core__clk_sys__dpll_test_enable__len 1
#define MA_core__clk_sys__dpll_test_enable__mask 0x01
#define MA_core__clk_sys__dpll_test_enable__shift 0x00
#define MA_core__clk_sys__dpll_test_enable__reset 0x00
#define MA_core__clk_sys__dpll_test_enable__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_test_enable(o,y) ({ uint8_t __ret = o.read(394); o.write(394,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__dpll_test_enable(y) ({ uint8_t __ret = ma_read_byte(394); ma_write_byte(394,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__dpll_test_enable(o) (o.read(394) & 0x01)>>0
#define get_MA_core__clk_sys__dpll_test_enable() ( ma_read_byte(394) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__dpll_test_mode---
// 
#define MA_core__clk_sys__dpll_test_mode__a 0x018a
#define MA_core__clk_sys__dpll_test_mode__len 1
#define MA_core__clk_sys__dpll_test_mode__mask 0x02
#define MA_core__clk_sys__dpll_test_mode__shift 0x01
#define MA_core__clk_sys__dpll_test_mode__reset 0x00
#define MA_core__clk_sys__dpll_test_mode__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_test_mode(o,y) ({ uint8_t __ret = o.read(394); o.write(394,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__dpll_test_mode(y) ({ uint8_t __ret = ma_read_byte(394); ma_write_byte(394,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__dpll_test_mode(o) (o.read(394) & 0x02)>>1
#define get_MA_core__clk_sys__dpll_test_mode() ( ma_read_byte(394) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__dpll_test_start---
// 
#define MA_core__clk_sys__dpll_test_start__a 0x018a
#define MA_core__clk_sys__dpll_test_start__len 1
#define MA_core__clk_sys__dpll_test_start__mask 0x04
#define MA_core__clk_sys__dpll_test_start__shift 0x02
#define MA_core__clk_sys__dpll_test_start__reset 0x00
#define MA_core__clk_sys__dpll_test_start__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_test_start(o,y) ({ uint8_t __ret = o.read(394); o.write(394,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__dpll_test_start(y) ({ uint8_t __ret = ma_read_byte(394); ma_write_byte(394,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__dpll_test_start(o) (o.read(394) & 0x04)>>2
#define get_MA_core__clk_sys__dpll_test_start() ( ma_read_byte(394) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__dpll_test_dco_trim_coarse_range_plus---
// 
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus__a 0x018b
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus__len 4
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus__mask 0x0f
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus__shift 0x00
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus__reset 0x00
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus(o,y) ({ uint8_t __ret = o.read(395); o.write(395,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus(y) ({ uint8_t __ret = ma_read_byte(395); ma_write_byte(395,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus(o) (o.read(395) & 0x0f)>>0
#define get_MA_core__clk_sys__dpll_test_dco_trim_coarse_range_plus() ( ma_read_byte(395) & 0x0f)>>0
//------------------------------------------------------------------------------core__clk_sys__dpll_test_dco_trim_coarse_range_minus---
// 
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus__a 0x018b
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus__len 4
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus__mask 0xf0
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus__shift 0x04
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus__reset 0x00
#define MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus(o,y) ({ uint8_t __ret = o.read(395); o.write(395,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus(y) ({ uint8_t __ret = ma_read_byte(395); ma_write_byte(395,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus(o) (o.read(395) & 0xf0)>>4
#define get_MA_core__clk_sys__dpll_test_dco_trim_coarse_range_minus() ( ma_read_byte(395) & 0xf0)>>4
//------------------------------------------------------------------------------core__clk_sys__loopfilter_high_lim---
// 
#define MA_core__clk_sys__loopfilter_high_lim__a 0x018e
#define MA_core__clk_sys__loopfilter_high_lim__len 5
#define MA_core__clk_sys__loopfilter_high_lim__mask 0x1f
#define MA_core__clk_sys__loopfilter_high_lim__shift 0x00
#define MA_core__clk_sys__loopfilter_high_lim__reset 0x18
#define MA_core__clk_sys__loopfilter_high_lim__inputonly 0
#define set_obj_MA_core__clk_sys__loopfilter_high_lim(o,y) ({ uint8_t __ret = o.read(398); o.write(398,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__loopfilter_high_lim(y) ({ uint8_t __ret = ma_read_byte(398); ma_write_byte(398,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__loopfilter_high_lim(o) (o.read(398) & 0x1f)>>0
#define get_MA_core__clk_sys__loopfilter_high_lim() ( ma_read_byte(398) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__loopfilter_low_lim---
// 
#define MA_core__clk_sys__loopfilter_low_lim__a 0x018f
#define MA_core__clk_sys__loopfilter_low_lim__len 5
#define MA_core__clk_sys__loopfilter_low_lim__mask 0x1f
#define MA_core__clk_sys__loopfilter_low_lim__shift 0x00
#define MA_core__clk_sys__loopfilter_low_lim__reset 0x00
#define MA_core__clk_sys__loopfilter_low_lim__inputonly 0
#define set_obj_MA_core__clk_sys__loopfilter_low_lim(o,y) ({ uint8_t __ret = o.read(399); o.write(399,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__loopfilter_low_lim(y) ({ uint8_t __ret = ma_read_byte(399); ma_write_byte(399,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__loopfilter_low_lim(o) (o.read(399) & 0x1f)>>0
#define get_MA_core__clk_sys__loopfilter_low_lim() ( ma_read_byte(399) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__loopfilter_reset_val---
// 
#define MA_core__clk_sys__loopfilter_reset_val__a 0x0190
#define MA_core__clk_sys__loopfilter_reset_val__len 5
#define MA_core__clk_sys__loopfilter_reset_val__mask 0x1f
#define MA_core__clk_sys__loopfilter_reset_val__shift 0x00
#define MA_core__clk_sys__loopfilter_reset_val__reset 0x0c
#define MA_core__clk_sys__loopfilter_reset_val__inputonly 0
#define set_obj_MA_core__clk_sys__loopfilter_reset_val(o,y) ({ uint8_t __ret = o.read(400); o.write(400,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__loopfilter_reset_val(y) ({ uint8_t __ret = ma_read_byte(400); ma_write_byte(400,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__loopfilter_reset_val(o) (o.read(400) & 0x1f)>>0
#define get_MA_core__clk_sys__loopfilter_reset_val() ( ma_read_byte(400) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__loopfilter_force_reset---
// 
#define MA_core__clk_sys__loopfilter_force_reset__a 0x0190
#define MA_core__clk_sys__loopfilter_force_reset__len 1
#define MA_core__clk_sys__loopfilter_force_reset__mask 0x20
#define MA_core__clk_sys__loopfilter_force_reset__shift 0x05
#define MA_core__clk_sys__loopfilter_force_reset__reset 0x00
#define MA_core__clk_sys__loopfilter_force_reset__inputonly 0
#define set_obj_MA_core__clk_sys__loopfilter_force_reset(o,y) ({ uint8_t __ret = o.read(400); o.write(400,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__clk_sys__loopfilter_force_reset(y) ({ uint8_t __ret = ma_read_byte(400); ma_write_byte(400,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__clk_sys__loopfilter_force_reset(o) (o.read(400) & 0x20)>>5
#define get_MA_core__clk_sys__loopfilter_force_reset() ( ma_read_byte(400) & 0x20)>>5
//------------------------------------------------------------------------------core__clk_sys__phase_error_read---
// 
#define MA_core__clk_sys__phase_error_read__a 0x0191
#define MA_core__clk_sys__phase_error_read__len 1
#define MA_core__clk_sys__phase_error_read__mask 0x01
#define MA_core__clk_sys__phase_error_read__shift 0x00
#define MA_core__clk_sys__phase_error_read__reset 0x00
#define MA_core__clk_sys__phase_error_read__inputonly 0
#define set_obj_MA_core__clk_sys__phase_error_read(o,y) ({ uint8_t __ret = o.read(401); o.write(401,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__phase_error_read(y) ({ uint8_t __ret = ma_read_byte(401); ma_write_byte(401,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__phase_error_read(o) (o.read(401) & 0x01)>>0
#define get_MA_core__clk_sys__phase_error_read() ( ma_read_byte(401) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__loopfilter_read---
// 
#define MA_core__clk_sys__loopfilter_read__a 0x0191
#define MA_core__clk_sys__loopfilter_read__len 1
#define MA_core__clk_sys__loopfilter_read__mask 0x02
#define MA_core__clk_sys__loopfilter_read__shift 0x01
#define MA_core__clk_sys__loopfilter_read__reset 0x00
#define MA_core__clk_sys__loopfilter_read__inputonly 0
#define set_obj_MA_core__clk_sys__loopfilter_read(o,y) ({ uint8_t __ret = o.read(401); o.write(401,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__loopfilter_read(y) ({ uint8_t __ret = ma_read_byte(401); ma_write_byte(401,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__loopfilter_read(o) (o.read(401) & 0x02)>>1
#define get_MA_core__clk_sys__loopfilter_read() ( ma_read_byte(401) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__sdm_read---
// 
#define MA_core__clk_sys__sdm_read__a 0x0191
#define MA_core__clk_sys__sdm_read__len 1
#define MA_core__clk_sys__sdm_read__mask 0x04
#define MA_core__clk_sys__sdm_read__shift 0x02
#define MA_core__clk_sys__sdm_read__reset 0x00
#define MA_core__clk_sys__sdm_read__inputonly 0
#define set_obj_MA_core__clk_sys__sdm_read(o,y) ({ uint8_t __ret = o.read(401); o.write(401,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__sdm_read(y) ({ uint8_t __ret = ma_read_byte(401); ma_write_byte(401,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__sdm_read(o) (o.read(401) & 0x04)>>2
#define get_MA_core__clk_sys__sdm_read() ( ma_read_byte(401) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__dco_coarse_read---
// 
#define MA_core__clk_sys__dco_coarse_read__a 0x0191
#define MA_core__clk_sys__dco_coarse_read__len 1
#define MA_core__clk_sys__dco_coarse_read__mask 0x08
#define MA_core__clk_sys__dco_coarse_read__shift 0x03
#define MA_core__clk_sys__dco_coarse_read__reset 0x00
#define MA_core__clk_sys__dco_coarse_read__inputonly 0
#define set_obj_MA_core__clk_sys__dco_coarse_read(o,y) ({ uint8_t __ret = o.read(401); o.write(401,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__dco_coarse_read(y) ({ uint8_t __ret = ma_read_byte(401); ma_write_byte(401,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__dco_coarse_read(o) (o.read(401) & 0x08)>>3
#define get_MA_core__clk_sys__dco_coarse_read() ( ma_read_byte(401) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__dco_fine_read---
// 
#define MA_core__clk_sys__dco_fine_read__a 0x0191
#define MA_core__clk_sys__dco_fine_read__len 1
#define MA_core__clk_sys__dco_fine_read__mask 0x10
#define MA_core__clk_sys__dco_fine_read__shift 0x04
#define MA_core__clk_sys__dco_fine_read__reset 0x00
#define MA_core__clk_sys__dco_fine_read__inputonly 0
#define set_obj_MA_core__clk_sys__dco_fine_read(o,y) ({ uint8_t __ret = o.read(401); o.write(401,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__dco_fine_read(y) ({ uint8_t __ret = ma_read_byte(401); ma_write_byte(401,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__dco_fine_read(o) (o.read(401) & 0x10)>>4
#define get_MA_core__clk_sys__dco_fine_read() ( ma_read_byte(401) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__status__enable_dco---
// 
#define MA_core__clk_sys__status__enable_dco__a 0x0198
#define MA_core__clk_sys__status__enable_dco__len 1
#define MA_core__clk_sys__status__enable_dco__mask 0x01
#define MA_core__clk_sys__status__enable_dco__shift 0x00
#define MA_core__clk_sys__status__enable_dco__reset 0x00
#define MA_core__clk_sys__status__enable_dco__inputonly 1
#define set_obj_MA_core__clk_sys__status__enable_dco(o,y) ({ uint8_t __ret = o.read(408); o.write(408,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__enable_dco(y) ({ uint8_t __ret = ma_read_byte(408); ma_write_byte(408,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__enable_dco(o) (o.read(408) & 0x01)>>0
#define get_MA_core__clk_sys__status__enable_dco() ( ma_read_byte(408) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__status__dco_bias_enable---
// 
#define MA_core__clk_sys__status__dco_bias_enable__a 0x0198
#define MA_core__clk_sys__status__dco_bias_enable__len 1
#define MA_core__clk_sys__status__dco_bias_enable__mask 0x02
#define MA_core__clk_sys__status__dco_bias_enable__shift 0x01
#define MA_core__clk_sys__status__dco_bias_enable__reset 0x00
#define MA_core__clk_sys__status__dco_bias_enable__inputonly 1
#define set_obj_MA_core__clk_sys__status__dco_bias_enable(o,y) ({ uint8_t __ret = o.read(408); o.write(408,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__status__dco_bias_enable(y) ({ uint8_t __ret = ma_read_byte(408); ma_write_byte(408,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__status__dco_bias_enable(o) (o.read(408) & 0x02)>>1
#define get_MA_core__clk_sys__status__dco_bias_enable() ( ma_read_byte(408) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__status__dco_core_bias_enable---
// 
#define MA_core__clk_sys__status__dco_core_bias_enable__a 0x0198
#define MA_core__clk_sys__status__dco_core_bias_enable__len 1
#define MA_core__clk_sys__status__dco_core_bias_enable__mask 0x04
#define MA_core__clk_sys__status__dco_core_bias_enable__shift 0x02
#define MA_core__clk_sys__status__dco_core_bias_enable__reset 0x00
#define MA_core__clk_sys__status__dco_core_bias_enable__inputonly 1
#define set_obj_MA_core__clk_sys__status__dco_core_bias_enable(o,y) ({ uint8_t __ret = o.read(408); o.write(408,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__status__dco_core_bias_enable(y) ({ uint8_t __ret = ma_read_byte(408); ma_write_byte(408,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__status__dco_core_bias_enable(o) (o.read(408) & 0x04)>>2
#define get_MA_core__clk_sys__status__dco_core_bias_enable() ( ma_read_byte(408) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__status__dco_core_enable---
// 
#define MA_core__clk_sys__status__dco_core_enable__a 0x0198
#define MA_core__clk_sys__status__dco_core_enable__len 1
#define MA_core__clk_sys__status__dco_core_enable__mask 0x08
#define MA_core__clk_sys__status__dco_core_enable__shift 0x03
#define MA_core__clk_sys__status__dco_core_enable__reset 0x00
#define MA_core__clk_sys__status__dco_core_enable__inputonly 1
#define set_obj_MA_core__clk_sys__status__dco_core_enable(o,y) ({ uint8_t __ret = o.read(408); o.write(408,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__status__dco_core_enable(y) ({ uint8_t __ret = ma_read_byte(408); ma_write_byte(408,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__status__dco_core_enable(o) (o.read(408) & 0x08)>>3
#define get_MA_core__clk_sys__status__dco_core_enable() ( ma_read_byte(408) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__status__dco_clk_enable---
// 
#define MA_core__clk_sys__status__dco_clk_enable__a 0x0198
#define MA_core__clk_sys__status__dco_clk_enable__len 1
#define MA_core__clk_sys__status__dco_clk_enable__mask 0x10
#define MA_core__clk_sys__status__dco_clk_enable__shift 0x04
#define MA_core__clk_sys__status__dco_clk_enable__reset 0x00
#define MA_core__clk_sys__status__dco_clk_enable__inputonly 1
#define set_obj_MA_core__clk_sys__status__dco_clk_enable(o,y) ({ uint8_t __ret = o.read(408); o.write(408,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__status__dco_clk_enable(y) ({ uint8_t __ret = ma_read_byte(408); ma_write_byte(408,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__status__dco_clk_enable(o) (o.read(408) & 0x10)>>4
#define get_MA_core__clk_sys__status__dco_clk_enable() ( ma_read_byte(408) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__status__dpll_enable---
// 
#define MA_core__clk_sys__status__dpll_enable__a 0x0198
#define MA_core__clk_sys__status__dpll_enable__len 1
#define MA_core__clk_sys__status__dpll_enable__mask 0x20
#define MA_core__clk_sys__status__dpll_enable__shift 0x05
#define MA_core__clk_sys__status__dpll_enable__reset 0x00
#define MA_core__clk_sys__status__dpll_enable__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_enable(o,y) ({ uint8_t __ret = o.read(408); o.write(408,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__clk_sys__status__dpll_enable(y) ({ uint8_t __ret = ma_read_byte(408); ma_write_byte(408,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__clk_sys__status__dpll_enable(o) (o.read(408) & 0x20)>>5
#define get_MA_core__clk_sys__status__dpll_enable() ( ma_read_byte(408) & 0x20)>>5
//------------------------------------------------------------------------------core__clk_sys__status__dpll_sleep---
// 
#define MA_core__clk_sys__status__dpll_sleep__a 0x0198
#define MA_core__clk_sys__status__dpll_sleep__len 1
#define MA_core__clk_sys__status__dpll_sleep__mask 0x40
#define MA_core__clk_sys__status__dpll_sleep__shift 0x06
#define MA_core__clk_sys__status__dpll_sleep__reset 0x00
#define MA_core__clk_sys__status__dpll_sleep__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_sleep(o,y) ({ uint8_t __ret = o.read(408); o.write(408,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__clk_sys__status__dpll_sleep(y) ({ uint8_t __ret = ma_read_byte(408); ma_write_byte(408,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__clk_sys__status__dpll_sleep(o) (o.read(408) & 0x40)>>6
#define get_MA_core__clk_sys__status__dpll_sleep() ( ma_read_byte(408) & 0x40)>>6
//------------------------------------------------------------------------------core__clk_sys__status__dpll_run_dco_free---
// 
#define MA_core__clk_sys__status__dpll_run_dco_free__a 0x0198
#define MA_core__clk_sys__status__dpll_run_dco_free__len 1
#define MA_core__clk_sys__status__dpll_run_dco_free__mask 0x80
#define MA_core__clk_sys__status__dpll_run_dco_free__shift 0x07
#define MA_core__clk_sys__status__dpll_run_dco_free__reset 0x00
#define MA_core__clk_sys__status__dpll_run_dco_free__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_run_dco_free(o,y) ({ uint8_t __ret = o.read(408); o.write(408,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__clk_sys__status__dpll_run_dco_free(y) ({ uint8_t __ret = ma_read_byte(408); ma_write_byte(408,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__clk_sys__status__dpll_run_dco_free(o) (o.read(408) & 0x80)>>7
#define get_MA_core__clk_sys__status__dpll_run_dco_free() ( ma_read_byte(408) & 0x80)>>7
//------------------------------------------------------------------------------core__clk_sys__status__mode_m_div---
// 
#define MA_core__clk_sys__status__mode_m_div__a 0x019a
#define MA_core__clk_sys__status__mode_m_div__len 6
#define MA_core__clk_sys__status__mode_m_div__mask 0x3f
#define MA_core__clk_sys__status__mode_m_div__shift 0x00
#define MA_core__clk_sys__status__mode_m_div__reset 0x00
#define MA_core__clk_sys__status__mode_m_div__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_m_div(o,y) ({ uint8_t __ret = o.read(410); o.write(410,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__status__mode_m_div(y) ({ uint8_t __ret = ma_read_byte(410); ma_write_byte(410,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__status__mode_m_div(o) (o.read(410) & 0x3f)>>0
#define get_MA_core__clk_sys__status__mode_m_div() ( ma_read_byte(410) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__status__mode_ref_div---
// 
#define MA_core__clk_sys__status__mode_ref_div__a 0x019a
#define MA_core__clk_sys__status__mode_ref_div__len 1
#define MA_core__clk_sys__status__mode_ref_div__mask 0x40
#define MA_core__clk_sys__status__mode_ref_div__shift 0x06
#define MA_core__clk_sys__status__mode_ref_div__reset 0x00
#define MA_core__clk_sys__status__mode_ref_div__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_ref_div(o,y) ({ uint8_t __ret = o.read(410); o.write(410,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__clk_sys__status__mode_ref_div(y) ({ uint8_t __ret = ma_read_byte(410); ma_write_byte(410,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__clk_sys__status__mode_ref_div(o) (o.read(410) & 0x40)>>6
#define get_MA_core__clk_sys__status__mode_ref_div() ( ma_read_byte(410) & 0x40)>>6
//------------------------------------------------------------------------------core__clk_sys__status__mode_fb_div---
// 
#define MA_core__clk_sys__status__mode_fb_div__a 0x019a
#define MA_core__clk_sys__status__mode_fb_div__len 1
#define MA_core__clk_sys__status__mode_fb_div__mask 0x80
#define MA_core__clk_sys__status__mode_fb_div__shift 0x07
#define MA_core__clk_sys__status__mode_fb_div__reset 0x00
#define MA_core__clk_sys__status__mode_fb_div__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_fb_div(o,y) ({ uint8_t __ret = o.read(410); o.write(410,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__clk_sys__status__mode_fb_div(y) ({ uint8_t __ret = ma_read_byte(410); ma_write_byte(410,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__clk_sys__status__mode_fb_div(o) (o.read(410) & 0x80)>>7
#define get_MA_core__clk_sys__status__mode_fb_div() ( ma_read_byte(410) & 0x80)>>7
//------------------------------------------------------------------------------core__clk_sys__status__enable_auto_detect---
// 
#define MA_core__clk_sys__status__enable_auto_detect__a 0x019b
#define MA_core__clk_sys__status__enable_auto_detect__len 1
#define MA_core__clk_sys__status__enable_auto_detect__mask 0x01
#define MA_core__clk_sys__status__enable_auto_detect__shift 0x00
#define MA_core__clk_sys__status__enable_auto_detect__reset 0x00
#define MA_core__clk_sys__status__enable_auto_detect__inputonly 1
#define set_obj_MA_core__clk_sys__status__enable_auto_detect(o,y) ({ uint8_t __ret = o.read(411); o.write(411,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__enable_auto_detect(y) ({ uint8_t __ret = ma_read_byte(411); ma_write_byte(411,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__enable_auto_detect(o) (o.read(411) & 0x01)>>0
#define get_MA_core__clk_sys__status__enable_auto_detect() ( ma_read_byte(411) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__status__framesize---
// 
#define MA_core__clk_sys__status__framesize__a 0x019b
#define MA_core__clk_sys__status__framesize__len 2
#define MA_core__clk_sys__status__framesize__mask 0x06
#define MA_core__clk_sys__status__framesize__shift 0x01
#define MA_core__clk_sys__status__framesize__reset 0x00
#define MA_core__clk_sys__status__framesize__inputonly 1
#define set_obj_MA_core__clk_sys__status__framesize(o,y) ({ uint8_t __ret = o.read(411); o.write(411,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__clk_sys__status__framesize(y) ({ uint8_t __ret = ma_read_byte(411); ma_write_byte(411,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__clk_sys__status__framesize(o) (o.read(411) & 0x06)>>1
#define get_MA_core__clk_sys__status__framesize() ( ma_read_byte(411) & 0x06)>>1
//------------------------------------------------------------------------------core__clk_sys__status__i2s_sck_Fs_base---
// 
#define MA_core__clk_sys__status__i2s_sck_Fs_base__a 0x019b
#define MA_core__clk_sys__status__i2s_sck_Fs_base__len 2
#define MA_core__clk_sys__status__i2s_sck_Fs_base__mask 0x18
#define MA_core__clk_sys__status__i2s_sck_Fs_base__shift 0x03
#define MA_core__clk_sys__status__i2s_sck_Fs_base__reset 0x00
#define MA_core__clk_sys__status__i2s_sck_Fs_base__inputonly 1
#define set_obj_MA_core__clk_sys__status__i2s_sck_Fs_base(o,y) ({ uint8_t __ret = o.read(411); o.write(411,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__clk_sys__status__i2s_sck_Fs_base(y) ({ uint8_t __ret = ma_read_byte(411); ma_write_byte(411,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__clk_sys__status__i2s_sck_Fs_base(o) (o.read(411) & 0x18)>>3
#define get_MA_core__clk_sys__status__i2s_sck_Fs_base() ( ma_read_byte(411) & 0x18)>>3
//------------------------------------------------------------------------------core__clk_sys__status__bit_clk---
// 
#define MA_core__clk_sys__status__bit_clk__a 0x019d
#define MA_core__clk_sys__status__bit_clk__len 5
#define MA_core__clk_sys__status__bit_clk__mask 0x1f
#define MA_core__clk_sys__status__bit_clk__shift 0x00
#define MA_core__clk_sys__status__bit_clk__reset 0x00
#define MA_core__clk_sys__status__bit_clk__inputonly 1
#define set_obj_MA_core__clk_sys__status__bit_clk(o,y) ({ uint8_t __ret = o.read(413); o.write(413,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__status__bit_clk(y) ({ uint8_t __ret = ma_read_byte(413); ma_write_byte(413,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__status__bit_clk(o) (o.read(413) & 0x1f)>>0
#define get_MA_core__clk_sys__status__bit_clk() ( ma_read_byte(413) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__status__i2s_sck_ok---
// 
#define MA_core__clk_sys__status__i2s_sck_ok__a 0x019e
#define MA_core__clk_sys__status__i2s_sck_ok__len 1
#define MA_core__clk_sys__status__i2s_sck_ok__mask 0x01
#define MA_core__clk_sys__status__i2s_sck_ok__shift 0x00
#define MA_core__clk_sys__status__i2s_sck_ok__reset 0x00
#define MA_core__clk_sys__status__i2s_sck_ok__inputonly 1
#define set_obj_MA_core__clk_sys__status__i2s_sck_ok(o,y) ({ uint8_t __ret = o.read(414); o.write(414,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__i2s_sck_ok(y) ({ uint8_t __ret = ma_read_byte(414); ma_write_byte(414,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__i2s_sck_ok(o) (o.read(414) & 0x01)>>0
#define get_MA_core__clk_sys__status__i2s_sck_ok() ( ma_read_byte(414) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__status__dco_clk_ok---
// 
#define MA_core__clk_sys__status__dco_clk_ok__a 0x019e
#define MA_core__clk_sys__status__dco_clk_ok__len 1
#define MA_core__clk_sys__status__dco_clk_ok__mask 0x02
#define MA_core__clk_sys__status__dco_clk_ok__shift 0x01
#define MA_core__clk_sys__status__dco_clk_ok__reset 0x00
#define MA_core__clk_sys__status__dco_clk_ok__inputonly 1
#define set_obj_MA_core__clk_sys__status__dco_clk_ok(o,y) ({ uint8_t __ret = o.read(414); o.write(414,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__status__dco_clk_ok(y) ({ uint8_t __ret = ma_read_byte(414); ma_write_byte(414,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__status__dco_clk_ok(o) (o.read(414) & 0x02)>>1
#define get_MA_core__clk_sys__status__dco_clk_ok() ( ma_read_byte(414) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__status__pll_locked---
// 
#define MA_core__clk_sys__status__pll_locked__a 0x019e
#define MA_core__clk_sys__status__pll_locked__len 1
#define MA_core__clk_sys__status__pll_locked__mask 0x04
#define MA_core__clk_sys__status__pll_locked__shift 0x02
#define MA_core__clk_sys__status__pll_locked__reset 0x00
#define MA_core__clk_sys__status__pll_locked__inputonly 1
#define set_obj_MA_core__clk_sys__status__pll_locked(o,y) ({ uint8_t __ret = o.read(414); o.write(414,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__status__pll_locked(y) ({ uint8_t __ret = ma_read_byte(414); ma_write_byte(414,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__status__pll_locked(o) (o.read(414) & 0x04)>>2
#define get_MA_core__clk_sys__status__pll_locked() ( ma_read_byte(414) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__status__counters_syncronized---
// 
#define MA_core__clk_sys__status__counters_syncronized__a 0x019e
#define MA_core__clk_sys__status__counters_syncronized__len 1
#define MA_core__clk_sys__status__counters_syncronized__mask 0x08
#define MA_core__clk_sys__status__counters_syncronized__shift 0x03
#define MA_core__clk_sys__status__counters_syncronized__reset 0x00
#define MA_core__clk_sys__status__counters_syncronized__inputonly 1
#define set_obj_MA_core__clk_sys__status__counters_syncronized(o,y) ({ uint8_t __ret = o.read(414); o.write(414,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__status__counters_syncronized(y) ({ uint8_t __ret = ma_read_byte(414); ma_write_byte(414,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__status__counters_syncronized(o) (o.read(414) & 0x08)>>3
#define get_MA_core__clk_sys__status__counters_syncronized() ( ma_read_byte(414) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__status__phase_max---
// 
#define MA_core__clk_sys__status__phase_max__a 0x019e
#define MA_core__clk_sys__status__phase_max__len 1
#define MA_core__clk_sys__status__phase_max__mask 0x10
#define MA_core__clk_sys__status__phase_max__shift 0x04
#define MA_core__clk_sys__status__phase_max__reset 0x00
#define MA_core__clk_sys__status__phase_max__inputonly 1
#define set_obj_MA_core__clk_sys__status__phase_max(o,y) ({ uint8_t __ret = o.read(414); o.write(414,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__status__phase_max(y) ({ uint8_t __ret = ma_read_byte(414); ma_write_byte(414,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__status__phase_max(o) (o.read(414) & 0x10)>>4
#define get_MA_core__clk_sys__status__phase_max() ( ma_read_byte(414) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__status__dpll_test_done---
// 
#define MA_core__clk_sys__status__dpll_test_done__a 0x019f
#define MA_core__clk_sys__status__dpll_test_done__len 1
#define MA_core__clk_sys__status__dpll_test_done__mask 0x01
#define MA_core__clk_sys__status__dpll_test_done__shift 0x00
#define MA_core__clk_sys__status__dpll_test_done__reset 0x00
#define MA_core__clk_sys__status__dpll_test_done__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_test_done(o,y) ({ uint8_t __ret = o.read(415); o.write(415,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__dpll_test_done(y) ({ uint8_t __ret = ma_read_byte(415); ma_write_byte(415,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__dpll_test_done(o) (o.read(415) & 0x01)>>0
#define get_MA_core__clk_sys__status__dpll_test_done() ( ma_read_byte(415) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__status__dpll_test_ok---
// 
#define MA_core__clk_sys__status__dpll_test_ok__a 0x019f
#define MA_core__clk_sys__status__dpll_test_ok__len 1
#define MA_core__clk_sys__status__dpll_test_ok__mask 0x10
#define MA_core__clk_sys__status__dpll_test_ok__shift 0x04
#define MA_core__clk_sys__status__dpll_test_ok__reset 0x00
#define MA_core__clk_sys__status__dpll_test_ok__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_test_ok(o,y) ({ uint8_t __ret = o.read(415); o.write(415,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__status__dpll_test_ok(y) ({ uint8_t __ret = ma_read_byte(415); ma_write_byte(415,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__status__dpll_test_ok(o) (o.read(415) & 0x10)>>4
#define get_MA_core__clk_sys__status__dpll_test_ok() ( ma_read_byte(415) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__outputs__phase_error__0---
// 
#define MA_core__clk_sys__outputs__phase_error__0__a 0x01a4
#define MA_core__clk_sys__outputs__phase_error__0__len 8
#define MA_core__clk_sys__outputs__phase_error__0__mask 0xff
#define MA_core__clk_sys__outputs__phase_error__0__shift 0x00
#define MA_core__clk_sys__outputs__phase_error__0__reset 0x00
#define MA_core__clk_sys__outputs__phase_error__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__phase_error__0(o,y) o.write(420,y);
#define set_MA_core__clk_sys__outputs__phase_error__0(y) ma_write_byte(420,y);
#define get_obj_MA_core__clk_sys__outputs__phase_error__0(o) (o.read(420) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__phase_error__0() ( ma_read_byte(420) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__phase_error__1---
// 
#define MA_core__clk_sys__outputs__phase_error__1__a 0x01a5
#define MA_core__clk_sys__outputs__phase_error__1__len 2
#define MA_core__clk_sys__outputs__phase_error__1__mask 0x03
#define MA_core__clk_sys__outputs__phase_error__1__shift 0x00
#define MA_core__clk_sys__outputs__phase_error__1__reset 0x00
#define MA_core__clk_sys__outputs__phase_error__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__phase_error__1(o,y) ({ uint8_t __ret = o.read(421); o.write(421,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__clk_sys__outputs__phase_error__1(y) ({ uint8_t __ret = ma_read_byte(421); ma_write_byte(421,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__clk_sys__outputs__phase_error__1(o) (o.read(421) & 0x03)>>0
#define get_MA_core__clk_sys__outputs__phase_error__1() ( ma_read_byte(421) & 0x03)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__loopfilter__0---
// 
#define MA_core__clk_sys__outputs__loopfilter__0__a 0x01a6
#define MA_core__clk_sys__outputs__loopfilter__0__len 8
#define MA_core__clk_sys__outputs__loopfilter__0__mask 0xff
#define MA_core__clk_sys__outputs__loopfilter__0__shift 0x00
#define MA_core__clk_sys__outputs__loopfilter__0__reset 0x00
#define MA_core__clk_sys__outputs__loopfilter__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__loopfilter__0(o,y) o.write(422,y);
#define set_MA_core__clk_sys__outputs__loopfilter__0(y) ma_write_byte(422,y);
#define get_obj_MA_core__clk_sys__outputs__loopfilter__0(o) (o.read(422) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__loopfilter__0() ( ma_read_byte(422) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__loopfilter__1---
// 
#define MA_core__clk_sys__outputs__loopfilter__1__a 0x01a7
#define MA_core__clk_sys__outputs__loopfilter__1__len 8
#define MA_core__clk_sys__outputs__loopfilter__1__mask 0xff
#define MA_core__clk_sys__outputs__loopfilter__1__shift 0x00
#define MA_core__clk_sys__outputs__loopfilter__1__reset 0x00
#define MA_core__clk_sys__outputs__loopfilter__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__loopfilter__1(o,y) o.write(423,y);
#define set_MA_core__clk_sys__outputs__loopfilter__1(y) ma_write_byte(423,y);
#define get_obj_MA_core__clk_sys__outputs__loopfilter__1(o) (o.read(423) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__loopfilter__1() ( ma_read_byte(423) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__loopfilter__2---
// 
#define MA_core__clk_sys__outputs__loopfilter__2__a 0x01a8
#define MA_core__clk_sys__outputs__loopfilter__2__len 5
#define MA_core__clk_sys__outputs__loopfilter__2__mask 0x1f
#define MA_core__clk_sys__outputs__loopfilter__2__shift 0x00
#define MA_core__clk_sys__outputs__loopfilter__2__reset 0x00
#define MA_core__clk_sys__outputs__loopfilter__2__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__loopfilter__2(o,y) ({ uint8_t __ret = o.read(424); o.write(424,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__outputs__loopfilter__2(y) ({ uint8_t __ret = ma_read_byte(424); ma_write_byte(424,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__outputs__loopfilter__2(o) (o.read(424) & 0x1f)>>0
#define get_MA_core__clk_sys__outputs__loopfilter__2() ( ma_read_byte(424) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__sdm__0---
// 
#define MA_core__clk_sys__outputs__sdm__0__a 0x01a9
#define MA_core__clk_sys__outputs__sdm__0__len 8
#define MA_core__clk_sys__outputs__sdm__0__mask 0xff
#define MA_core__clk_sys__outputs__sdm__0__shift 0x00
#define MA_core__clk_sys__outputs__sdm__0__reset 0x00
#define MA_core__clk_sys__outputs__sdm__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__sdm__0(o,y) o.write(425,y);
#define set_MA_core__clk_sys__outputs__sdm__0(y) ma_write_byte(425,y);
#define get_obj_MA_core__clk_sys__outputs__sdm__0(o) (o.read(425) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__sdm__0() ( ma_read_byte(425) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__sdm__1---
// 
#define MA_core__clk_sys__outputs__sdm__1__a 0x01aa
#define MA_core__clk_sys__outputs__sdm__1__len 1
#define MA_core__clk_sys__outputs__sdm__1__mask 0x01
#define MA_core__clk_sys__outputs__sdm__1__shift 0x00
#define MA_core__clk_sys__outputs__sdm__1__reset 0x00
#define MA_core__clk_sys__outputs__sdm__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__sdm__1(o,y) ({ uint8_t __ret = o.read(426); o.write(426,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__outputs__sdm__1(y) ({ uint8_t __ret = ma_read_byte(426); ma_write_byte(426,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__outputs__sdm__1(o) (o.read(426) & 0x01)>>0
#define get_MA_core__clk_sys__outputs__sdm__1() ( ma_read_byte(426) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_coarse---
// 
#define MA_core__clk_sys__outputs__dco_coarse__a 0x01ab
#define MA_core__clk_sys__outputs__dco_coarse__len 5
#define MA_core__clk_sys__outputs__dco_coarse__mask 0x1f
#define MA_core__clk_sys__outputs__dco_coarse__shift 0x00
#define MA_core__clk_sys__outputs__dco_coarse__reset 0x00
#define MA_core__clk_sys__outputs__dco_coarse__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_coarse(o,y) ({ uint8_t __ret = o.read(427); o.write(427,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__outputs__dco_coarse(y) ({ uint8_t __ret = ma_read_byte(427); ma_write_byte(427,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_coarse(o) (o.read(427) & 0x1f)>>0
#define get_MA_core__clk_sys__outputs__dco_coarse() ( ma_read_byte(427) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_fine---
// 
#define MA_core__clk_sys__outputs__dco_fine__a 0x01ac
#define MA_core__clk_sys__outputs__dco_fine__len 6
#define MA_core__clk_sys__outputs__dco_fine__mask 0x3f
#define MA_core__clk_sys__outputs__dco_fine__shift 0x00
#define MA_core__clk_sys__outputs__dco_fine__reset 0x00
#define MA_core__clk_sys__outputs__dco_fine__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_fine(o,y) ({ uint8_t __ret = o.read(428); o.write(428,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_fine(y) ({ uint8_t __ret = ma_read_byte(428); ma_write_byte(428,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_fine(o) (o.read(428) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_fine() ( ma_read_byte(428) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_locked__0---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__0__a 0x01ad
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__0__len 8
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__0__mask 0xff
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__0__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__0__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_locked__0(o,y) o.write(429,y);
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_locked__0(y) ma_write_byte(429,y);
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_locked__0(o) (o.read(429) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_locked__0() ( ma_read_byte(429) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_locked__1---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__1__a 0x01ae
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__1__len 6
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__1__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__1__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__1__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_locked__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_locked__1(o,y) ({ uint8_t __ret = o.read(430); o.write(430,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_locked__1(y) ({ uint8_t __ret = ma_read_byte(430); ma_write_byte(430,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_locked__1(o) (o.read(430) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_locked__1() ( ma_read_byte(430) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_coarse_locked---
// 
#define MA_core__clk_sys__outputs__dco_test_coarse_locked__a 0x01af
#define MA_core__clk_sys__outputs__dco_test_coarse_locked__len 5
#define MA_core__clk_sys__outputs__dco_test_coarse_locked__mask 0x1f
#define MA_core__clk_sys__outputs__dco_test_coarse_locked__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_locked__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_locked__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_coarse_locked(o,y) ({ uint8_t __ret = o.read(431); o.write(431,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__outputs__dco_test_coarse_locked(y) ({ uint8_t __ret = ma_read_byte(431); ma_write_byte(431,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_coarse_locked(o) (o.read(431) & 0x1f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_coarse_locked() ( ma_read_byte(431) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_fine_locked---
// 
#define MA_core__clk_sys__outputs__dco_test_fine_locked__a 0x01b0
#define MA_core__clk_sys__outputs__dco_test_fine_locked__len 6
#define MA_core__clk_sys__outputs__dco_test_fine_locked__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_fine_locked__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_fine_locked__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_fine_locked__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_fine_locked(o,y) ({ uint8_t __ret = o.read(432); o.write(432,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_fine_locked(y) ({ uint8_t __ret = ma_read_byte(432); ma_write_byte(432,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_fine_locked(o) (o.read(432) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_fine_locked() ( ma_read_byte(432) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_coarse_max__0---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0__a 0x01b1
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0__len 8
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0__mask 0xff
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0(o,y) o.write(433,y);
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0(y) ma_write_byte(433,y);
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0(o) (o.read(433) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__0() ( ma_read_byte(433) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_coarse_max__1---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1__a 0x01b2
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1__len 6
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1(o,y) ({ uint8_t __ret = o.read(434); o.write(434,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1(y) ({ uint8_t __ret = ma_read_byte(434); ma_write_byte(434,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1(o) (o.read(434) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_max__1() ( ma_read_byte(434) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_coarse_min__0---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0__a 0x01b3
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0__len 8
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0__mask 0xff
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0(o,y) o.write(435,y);
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0(y) ma_write_byte(435,y);
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0(o) (o.read(435) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__0() ( ma_read_byte(435) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_coarse_min__1---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1__a 0x01b4
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1__len 6
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1(o,y) ({ uint8_t __ret = o.read(436); o.write(436,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1(y) ({ uint8_t __ret = ma_read_byte(436); ma_write_byte(436,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1(o) (o.read(436) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_coarse_min__1() ( ma_read_byte(436) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_coarse_start---
// 
#define MA_core__clk_sys__outputs__dco_test_coarse_start__a 0x01b5
#define MA_core__clk_sys__outputs__dco_test_coarse_start__len 5
#define MA_core__clk_sys__outputs__dco_test_coarse_start__mask 0x1f
#define MA_core__clk_sys__outputs__dco_test_coarse_start__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_start__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_start__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_coarse_start(o,y) ({ uint8_t __ret = o.read(437); o.write(437,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__outputs__dco_test_coarse_start(y) ({ uint8_t __ret = ma_read_byte(437); ma_write_byte(437,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_coarse_start(o) (o.read(437) & 0x1f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_coarse_start() ( ma_read_byte(437) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_coarse_max---
// 
#define MA_core__clk_sys__outputs__dco_test_coarse_max__a 0x01b6
#define MA_core__clk_sys__outputs__dco_test_coarse_max__len 5
#define MA_core__clk_sys__outputs__dco_test_coarse_max__mask 0x1f
#define MA_core__clk_sys__outputs__dco_test_coarse_max__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_max__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_max__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_coarse_max(o,y) ({ uint8_t __ret = o.read(438); o.write(438,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__outputs__dco_test_coarse_max(y) ({ uint8_t __ret = ma_read_byte(438); ma_write_byte(438,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_coarse_max(o) (o.read(438) & 0x1f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_coarse_max() ( ma_read_byte(438) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_coarse_min---
// 
#define MA_core__clk_sys__outputs__dco_test_coarse_min__a 0x01b7
#define MA_core__clk_sys__outputs__dco_test_coarse_min__len 5
#define MA_core__clk_sys__outputs__dco_test_coarse_min__mask 0x1f
#define MA_core__clk_sys__outputs__dco_test_coarse_min__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_min__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_min__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_coarse_min(o,y) ({ uint8_t __ret = o.read(439); o.write(439,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__outputs__dco_test_coarse_min(y) ({ uint8_t __ret = ma_read_byte(439); ma_write_byte(439,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_coarse_min(o) (o.read(439) & 0x1f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_coarse_min() ( ma_read_byte(439) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_fine_max__0---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0__a 0x01b8
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0__len 8
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0__mask 0xff
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0(o,y) o.write(440,y);
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0(y) ma_write_byte(440,y);
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0(o) (o.read(440) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__0() ( ma_read_byte(440) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_fine_max__1---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1__a 0x01b9
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1__len 6
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1(o,y) ({ uint8_t __ret = o.read(441); o.write(441,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1(y) ({ uint8_t __ret = ma_read_byte(441); ma_write_byte(441,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1(o) (o.read(441) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_fine_max__1() ( ma_read_byte(441) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_fine_min__0---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0__a 0x01ba
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0__len 8
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0__mask 0xff
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0(o,y) o.write(442,y);
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0(y) ma_write_byte(442,y);
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0(o) (o.read(442) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__0() ( ma_read_byte(442) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count_fine_min__1---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1__a 0x01bb
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1__len 6
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1(o,y) ({ uint8_t __ret = o.read(443); o.write(443,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1(y) ({ uint8_t __ret = ma_read_byte(443); ma_write_byte(443,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1(o) (o.read(443) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count_fine_min__1() ( ma_read_byte(443) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_fine_max---
// 
#define MA_core__clk_sys__outputs__dco_test_fine_max__a 0x01bc
#define MA_core__clk_sys__outputs__dco_test_fine_max__len 6
#define MA_core__clk_sys__outputs__dco_test_fine_max__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_fine_max__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_fine_max__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_fine_max__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_fine_max(o,y) ({ uint8_t __ret = o.read(444); o.write(444,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_fine_max(y) ({ uint8_t __ret = ma_read_byte(444); ma_write_byte(444,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_fine_max(o) (o.read(444) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_fine_max() ( ma_read_byte(444) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_fine_min---
// 
#define MA_core__clk_sys__outputs__dco_test_fine_min__a 0x01bd
#define MA_core__clk_sys__outputs__dco_test_fine_min__len 6
#define MA_core__clk_sys__outputs__dco_test_fine_min__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_fine_min__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_fine_min__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_fine_min__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_fine_min(o,y) ({ uint8_t __ret = o.read(445); o.write(445,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_fine_min(y) ({ uint8_t __ret = ma_read_byte(445); ma_write_byte(445,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_fine_min(o) (o.read(445) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_fine_min() ( ma_read_byte(445) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count__0---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count__0__a 0x01be
#define MA_core__clk_sys__outputs__dco_test_freq_count__0__len 8
#define MA_core__clk_sys__outputs__dco_test_freq_count__0__mask 0xff
#define MA_core__clk_sys__outputs__dco_test_freq_count__0__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count__0__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count__0(o,y) o.write(446,y);
#define set_MA_core__clk_sys__outputs__dco_test_freq_count__0(y) ma_write_byte(446,y);
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count__0(o) (o.read(446) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count__0() ( ma_read_byte(446) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_freq_count__1---
// 
#define MA_core__clk_sys__outputs__dco_test_freq_count__1__a 0x01bf
#define MA_core__clk_sys__outputs__dco_test_freq_count__1__len 6
#define MA_core__clk_sys__outputs__dco_test_freq_count__1__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_freq_count__1__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count__1__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_freq_count__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_freq_count__1(o,y) ({ uint8_t __ret = o.read(447); o.write(447,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_freq_count__1(y) ({ uint8_t __ret = ma_read_byte(447); ma_write_byte(447,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_freq_count__1(o) (o.read(447) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_freq_count__1() ( ma_read_byte(447) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_coarse---
// 
#define MA_core__clk_sys__outputs__dco_test_coarse__a 0x01c0
#define MA_core__clk_sys__outputs__dco_test_coarse__len 5
#define MA_core__clk_sys__outputs__dco_test_coarse__mask 0x1f
#define MA_core__clk_sys__outputs__dco_test_coarse__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_coarse(o,y) ({ uint8_t __ret = o.read(448); o.write(448,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__outputs__dco_test_coarse(y) ({ uint8_t __ret = ma_read_byte(448); ma_write_byte(448,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_coarse(o) (o.read(448) & 0x1f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_coarse() ( ma_read_byte(448) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_fine---
// 
#define MA_core__clk_sys__outputs__dco_test_fine__a 0x01c1
#define MA_core__clk_sys__outputs__dco_test_fine__len 6
#define MA_core__clk_sys__outputs__dco_test_fine__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_fine__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_fine__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_fine__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_fine(o,y) ({ uint8_t __ret = o.read(449); o.write(449,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_fine(y) ({ uint8_t __ret = ma_read_byte(449); ma_write_byte(449,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_fine(o) (o.read(449) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_fine() ( ma_read_byte(449) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_coarse_gray---
// 
#define MA_core__clk_sys__outputs__dco_test_coarse_gray__a 0x01c2
#define MA_core__clk_sys__outputs__dco_test_coarse_gray__len 5
#define MA_core__clk_sys__outputs__dco_test_coarse_gray__mask 0x1f
#define MA_core__clk_sys__outputs__dco_test_coarse_gray__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_gray__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_coarse_gray__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_coarse_gray(o,y) ({ uint8_t __ret = o.read(450); o.write(450,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__outputs__dco_test_coarse_gray(y) ({ uint8_t __ret = ma_read_byte(450); ma_write_byte(450,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_coarse_gray(o) (o.read(450) & 0x1f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_coarse_gray() ( ma_read_byte(450) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__dco_test_fine_gray---
// 
#define MA_core__clk_sys__outputs__dco_test_fine_gray__a 0x01c3
#define MA_core__clk_sys__outputs__dco_test_fine_gray__len 6
#define MA_core__clk_sys__outputs__dco_test_fine_gray__mask 0x3f
#define MA_core__clk_sys__outputs__dco_test_fine_gray__shift 0x00
#define MA_core__clk_sys__outputs__dco_test_fine_gray__reset 0x00
#define MA_core__clk_sys__outputs__dco_test_fine_gray__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__dco_test_fine_gray(o,y) ({ uint8_t __ret = o.read(451); o.write(451,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__dco_test_fine_gray(y) ({ uint8_t __ret = ma_read_byte(451); ma_write_byte(451,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__dco_test_fine_gray(o) (o.read(451) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__dco_test_fine_gray() ( ma_read_byte(451) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__dco_bias_trim---
// 
#define MA_core__clk_sys__dco_bias_trim__a 0x0192
#define MA_core__clk_sys__dco_bias_trim__len 3
#define MA_core__clk_sys__dco_bias_trim__mask 0x07
#define MA_core__clk_sys__dco_bias_trim__shift 0x00
#define MA_core__clk_sys__dco_bias_trim__reset 0x00
#define MA_core__clk_sys__dco_bias_trim__inputonly 0
#define set_obj_MA_core__clk_sys__dco_bias_trim(o,y) ({ uint8_t __ret = o.read(402); o.write(402,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__clk_sys__dco_bias_trim(y) ({ uint8_t __ret = ma_read_byte(402); ma_write_byte(402,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__clk_sys__dco_bias_trim(o) (o.read(402) & 0x07)>>0
#define get_MA_core__clk_sys__dco_bias_trim() ( ma_read_byte(402) & 0x07)>>0
//------------------------------------------------------------------------------core__clk_sys__dpll_run_dco_free_allowed_ow---
// 
#define MA_core__clk_sys__dpll_run_dco_free_allowed_ow__a 0x0181
#define MA_core__clk_sys__dpll_run_dco_free_allowed_ow__len 1
#define MA_core__clk_sys__dpll_run_dco_free_allowed_ow__mask 0x40
#define MA_core__clk_sys__dpll_run_dco_free_allowed_ow__shift 0x06
#define MA_core__clk_sys__dpll_run_dco_free_allowed_ow__reset 0x00
#define MA_core__clk_sys__dpll_run_dco_free_allowed_ow__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_run_dco_free_allowed_ow(o,y) ({ uint8_t __ret = o.read(385); o.write(385,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__clk_sys__dpll_run_dco_free_allowed_ow(y) ({ uint8_t __ret = ma_read_byte(385); ma_write_byte(385,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__clk_sys__dpll_run_dco_free_allowed_ow(o) (o.read(385) & 0x40)>>6
#define get_MA_core__clk_sys__dpll_run_dco_free_allowed_ow() ( ma_read_byte(385) & 0x40)>>6
//------------------------------------------------------------------------------core__clk_sys__dpll_run_dco_free_allowed---
// 
#define MA_core__clk_sys__dpll_run_dco_free_allowed__a 0x0181
#define MA_core__clk_sys__dpll_run_dco_free_allowed__len 1
#define MA_core__clk_sys__dpll_run_dco_free_allowed__mask 0x80
#define MA_core__clk_sys__dpll_run_dco_free_allowed__shift 0x07
#define MA_core__clk_sys__dpll_run_dco_free_allowed__reset 0x00
#define MA_core__clk_sys__dpll_run_dco_free_allowed__inputonly 0
#define set_obj_MA_core__clk_sys__dpll_run_dco_free_allowed(o,y) ({ uint8_t __ret = o.read(385); o.write(385,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__clk_sys__dpll_run_dco_free_allowed(y) ({ uint8_t __ret = ma_read_byte(385); ma_write_byte(385,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__clk_sys__dpll_run_dco_free_allowed(o) (o.read(385) & 0x80)>>7
#define get_MA_core__clk_sys__dpll_run_dco_free_allowed() ( ma_read_byte(385) & 0x80)>>7
//------------------------------------------------------------------------------core__clk_sys__Gp---
// 
#define MA_core__clk_sys__Gp__a 0x018c
#define MA_core__clk_sys__Gp__len 5
#define MA_core__clk_sys__Gp__mask 0x1f
#define MA_core__clk_sys__Gp__shift 0x00
#define MA_core__clk_sys__Gp__reset 0x08
#define MA_core__clk_sys__Gp__inputonly 0
#define set_obj_MA_core__clk_sys__Gp(o,y) ({ uint8_t __ret = o.read(396); o.write(396,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__Gp(y) ({ uint8_t __ret = ma_read_byte(396); ma_write_byte(396,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__Gp(o) (o.read(396) & 0x1f)>>0
#define get_MA_core__clk_sys__Gp() ( ma_read_byte(396) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__Gi---
// 
#define MA_core__clk_sys__Gi__a 0x018d
#define MA_core__clk_sys__Gi__len 5
#define MA_core__clk_sys__Gi__mask 0x1f
#define MA_core__clk_sys__Gi__shift 0x00
#define MA_core__clk_sys__Gi__reset 0x06
#define MA_core__clk_sys__Gi__inputonly 0
#define set_obj_MA_core__clk_sys__Gi(o,y) ({ uint8_t __ret = o.read(397); o.write(397,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_core__clk_sys__Gi(y) ({ uint8_t __ret = ma_read_byte(397); ma_write_byte(397,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_core__clk_sys__Gi(o) (o.read(397) & 0x1f)>>0
#define get_MA_core__clk_sys__Gi() ( ma_read_byte(397) & 0x1f)>>0
//------------------------------------------------------------------------------core__clk_sys__status__dpll_run_dco_free_allowed---
// 
#define MA_core__clk_sys__status__dpll_run_dco_free_allowed__a 0x0199
#define MA_core__clk_sys__status__dpll_run_dco_free_allowed__len 1
#define MA_core__clk_sys__status__dpll_run_dco_free_allowed__mask 0x01
#define MA_core__clk_sys__status__dpll_run_dco_free_allowed__shift 0x00
#define MA_core__clk_sys__status__dpll_run_dco_free_allowed__reset 0x00
#define MA_core__clk_sys__status__dpll_run_dco_free_allowed__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_run_dco_free_allowed(o,y) ({ uint8_t __ret = o.read(409); o.write(409,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__dpll_run_dco_free_allowed(y) ({ uint8_t __ret = ma_read_byte(409); ma_write_byte(409,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__dpll_run_dco_free_allowed(o) (o.read(409) & 0x01)>>0
#define get_MA_core__clk_sys__status__dpll_run_dco_free_allowed() ( ma_read_byte(409) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__data_rate_ow---
// 
#define MA_core__clk_sys__data_rate_ow__a 0x0187
#define MA_core__clk_sys__data_rate_ow__len 1
#define MA_core__clk_sys__data_rate_ow__mask 0x10
#define MA_core__clk_sys__data_rate_ow__shift 0x04
#define MA_core__clk_sys__data_rate_ow__reset 0x00
#define MA_core__clk_sys__data_rate_ow__inputonly 0
#define set_obj_MA_core__clk_sys__data_rate_ow(o,y) ({ uint8_t __ret = o.read(391); o.write(391,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__data_rate_ow(y) ({ uint8_t __ret = ma_read_byte(391); ma_write_byte(391,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__data_rate_ow(o) (o.read(391) & 0x10)>>4
#define get_MA_core__clk_sys__data_rate_ow() ( ma_read_byte(391) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__data_rate---
// 
#define MA_core__clk_sys__data_rate__a 0x0187
#define MA_core__clk_sys__data_rate__len 4
#define MA_core__clk_sys__data_rate__mask 0x0f
#define MA_core__clk_sys__data_rate__shift 0x00
#define MA_core__clk_sys__data_rate__reset 0x00
#define MA_core__clk_sys__data_rate__inputonly 0
#define set_obj_MA_core__clk_sys__data_rate(o,y) ({ uint8_t __ret = o.read(391); o.write(391,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__clk_sys__data_rate(y) ({ uint8_t __ret = ma_read_byte(391); ma_write_byte(391,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__clk_sys__data_rate(o) (o.read(391) & 0x0f)>>0
#define get_MA_core__clk_sys__data_rate() ( ma_read_byte(391) & 0x0f)>>0
//------------------------------------------------------------------------------core__clk_sys__status__data_rate---
// 
#define MA_core__clk_sys__status__data_rate__a 0x019c
#define MA_core__clk_sys__status__data_rate__len 4
#define MA_core__clk_sys__status__data_rate__mask 0x0f
#define MA_core__clk_sys__status__data_rate__shift 0x00
#define MA_core__clk_sys__status__data_rate__reset 0x00
#define MA_core__clk_sys__status__data_rate__inputonly 1
#define set_obj_MA_core__clk_sys__status__data_rate(o,y) ({ uint8_t __ret = o.read(412); o.write(412,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__clk_sys__status__data_rate(y) ({ uint8_t __ret = ma_read_byte(412); ma_write_byte(412,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__clk_sys__status__data_rate(o) (o.read(412) & 0x0f)>>0
#define get_MA_core__clk_sys__status__data_rate() ( ma_read_byte(412) & 0x0f)>>0
//------------------------------------------------------------------------------core__clk_sys__calib_test_enable---
// 
#define MA_core__clk_sys__calib_test_enable__a 0x0193
#define MA_core__clk_sys__calib_test_enable__len 1
#define MA_core__clk_sys__calib_test_enable__mask 0x01
#define MA_core__clk_sys__calib_test_enable__shift 0x00
#define MA_core__clk_sys__calib_test_enable__reset 0x00
#define MA_core__clk_sys__calib_test_enable__inputonly 0
#define set_obj_MA_core__clk_sys__calib_test_enable(o,y) ({ uint8_t __ret = o.read(403); o.write(403,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__calib_test_enable(y) ({ uint8_t __ret = ma_read_byte(403); ma_write_byte(403,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__calib_test_enable(o) (o.read(403) & 0x01)>>0
#define get_MA_core__clk_sys__calib_test_enable() ( ma_read_byte(403) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__calib_test_mode---
// 
#define MA_core__clk_sys__calib_test_mode__a 0x0193
#define MA_core__clk_sys__calib_test_mode__len 1
#define MA_core__clk_sys__calib_test_mode__mask 0x02
#define MA_core__clk_sys__calib_test_mode__shift 0x01
#define MA_core__clk_sys__calib_test_mode__reset 0x00
#define MA_core__clk_sys__calib_test_mode__inputonly 0
#define set_obj_MA_core__clk_sys__calib_test_mode(o,y) ({ uint8_t __ret = o.read(403); o.write(403,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__calib_test_mode(y) ({ uint8_t __ret = ma_read_byte(403); ma_write_byte(403,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__calib_test_mode(o) (o.read(403) & 0x02)>>1
#define get_MA_core__clk_sys__calib_test_mode() ( ma_read_byte(403) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__calib_test_start---
// 
#define MA_core__clk_sys__calib_test_start__a 0x0193
#define MA_core__clk_sys__calib_test_start__len 1
#define MA_core__clk_sys__calib_test_start__mask 0x04
#define MA_core__clk_sys__calib_test_start__shift 0x02
#define MA_core__clk_sys__calib_test_start__reset 0x00
#define MA_core__clk_sys__calib_test_start__inputonly 0
#define set_obj_MA_core__clk_sys__calib_test_start(o,y) ({ uint8_t __ret = o.read(403); o.write(403,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__calib_test_start(y) ({ uint8_t __ret = ma_read_byte(403); ma_write_byte(403,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__calib_test_start(o) (o.read(403) & 0x04)>>2
#define get_MA_core__clk_sys__calib_test_start() ( ma_read_byte(403) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__calib_fine_trim_stop_bit---
// 
#define MA_core__clk_sys__calib_fine_trim_stop_bit__a 0x0193
#define MA_core__clk_sys__calib_fine_trim_stop_bit__len 2
#define MA_core__clk_sys__calib_fine_trim_stop_bit__mask 0x18
#define MA_core__clk_sys__calib_fine_trim_stop_bit__shift 0x03
#define MA_core__clk_sys__calib_fine_trim_stop_bit__reset 0x00
#define MA_core__clk_sys__calib_fine_trim_stop_bit__inputonly 0
#define set_obj_MA_core__clk_sys__calib_fine_trim_stop_bit(o,y) ({ uint8_t __ret = o.read(403); o.write(403,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__clk_sys__calib_fine_trim_stop_bit(y) ({ uint8_t __ret = ma_read_byte(403); ma_write_byte(403,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__clk_sys__calib_fine_trim_stop_bit(o) (o.read(403) & 0x18)>>3
#define get_MA_core__clk_sys__calib_fine_trim_stop_bit() ( ma_read_byte(403) & 0x18)>>3
//------------------------------------------------------------------------------core__clk_sys__status__calib_test_done---
// 
#define MA_core__clk_sys__status__calib_test_done__a 0x019f
#define MA_core__clk_sys__status__calib_test_done__len 1
#define MA_core__clk_sys__status__calib_test_done__mask 0x20
#define MA_core__clk_sys__status__calib_test_done__shift 0x05
#define MA_core__clk_sys__status__calib_test_done__reset 0x00
#define MA_core__clk_sys__status__calib_test_done__inputonly 1
#define set_obj_MA_core__clk_sys__status__calib_test_done(o,y) ({ uint8_t __ret = o.read(415); o.write(415,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__clk_sys__status__calib_test_done(y) ({ uint8_t __ret = ma_read_byte(415); ma_write_byte(415,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__clk_sys__status__calib_test_done(o) (o.read(415) & 0x20)>>5
#define get_MA_core__clk_sys__status__calib_test_done() ( ma_read_byte(415) & 0x20)>>5
//------------------------------------------------------------------------------core__clk_sys__status__calib_test_ok---
// 
#define MA_core__clk_sys__status__calib_test_ok__a 0x019f
#define MA_core__clk_sys__status__calib_test_ok__len 1
#define MA_core__clk_sys__status__calib_test_ok__mask 0x40
#define MA_core__clk_sys__status__calib_test_ok__shift 0x06
#define MA_core__clk_sys__status__calib_test_ok__reset 0x00
#define MA_core__clk_sys__status__calib_test_ok__inputonly 1
#define set_obj_MA_core__clk_sys__status__calib_test_ok(o,y) ({ uint8_t __ret = o.read(415); o.write(415,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__clk_sys__status__calib_test_ok(y) ({ uint8_t __ret = ma_read_byte(415); ma_write_byte(415,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__clk_sys__status__calib_test_ok(o) (o.read(415) & 0x40)>>6
#define get_MA_core__clk_sys__status__calib_test_ok() ( ma_read_byte(415) & 0x40)>>6
//------------------------------------------------------------------------------core__clk_sys__outputs__calib_test_freq_count_high__0---
// 
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__0__a 0x01c4
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__0__len 8
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__0__mask 0xff
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__0__shift 0x00
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__0__reset 0x00
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__calib_test_freq_count_high__0(o,y) o.write(452,y);
#define set_MA_core__clk_sys__outputs__calib_test_freq_count_high__0(y) ma_write_byte(452,y);
#define get_obj_MA_core__clk_sys__outputs__calib_test_freq_count_high__0(o) (o.read(452) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__calib_test_freq_count_high__0() ( ma_read_byte(452) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__calib_test_freq_count_high__1---
// 
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__1__a 0x01c5
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__1__len 6
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__1__mask 0x3f
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__1__shift 0x00
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__1__reset 0x00
#define MA_core__clk_sys__outputs__calib_test_freq_count_high__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__calib_test_freq_count_high__1(o,y) ({ uint8_t __ret = o.read(453); o.write(453,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__calib_test_freq_count_high__1(y) ({ uint8_t __ret = ma_read_byte(453); ma_write_byte(453,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__calib_test_freq_count_high__1(o) (o.read(453) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__calib_test_freq_count_high__1() ( ma_read_byte(453) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__calib_test_freq_count_low__0---
// 
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__0__a 0x01c6
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__0__len 8
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__0__mask 0xff
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__0__shift 0x00
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__0__reset 0x00
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__0__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__calib_test_freq_count_low__0(o,y) o.write(454,y);
#define set_MA_core__clk_sys__outputs__calib_test_freq_count_low__0(y) ma_write_byte(454,y);
#define get_obj_MA_core__clk_sys__outputs__calib_test_freq_count_low__0(o) (o.read(454) & 0xff)>>0
#define get_MA_core__clk_sys__outputs__calib_test_freq_count_low__0() ( ma_read_byte(454) & 0xff)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__calib_test_freq_count_low__1---
// 
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__1__a 0x01c7
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__1__len 6
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__1__mask 0x3f
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__1__shift 0x00
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__1__reset 0x00
#define MA_core__clk_sys__outputs__calib_test_freq_count_low__1__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__calib_test_freq_count_low__1(o,y) ({ uint8_t __ret = o.read(455); o.write(455,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__calib_test_freq_count_low__1(y) ({ uint8_t __ret = ma_read_byte(455); ma_write_byte(455,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__calib_test_freq_count_low__1(o) (o.read(455) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__calib_test_freq_count_low__1() ( ma_read_byte(455) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__calib_test_coarse---
// 
#define MA_core__clk_sys__outputs__calib_test_coarse__a 0x01c8
#define MA_core__clk_sys__outputs__calib_test_coarse__len 6
#define MA_core__clk_sys__outputs__calib_test_coarse__mask 0x3f
#define MA_core__clk_sys__outputs__calib_test_coarse__shift 0x00
#define MA_core__clk_sys__outputs__calib_test_coarse__reset 0x00
#define MA_core__clk_sys__outputs__calib_test_coarse__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__calib_test_coarse(o,y) ({ uint8_t __ret = o.read(456); o.write(456,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__calib_test_coarse(y) ({ uint8_t __ret = ma_read_byte(456); ma_write_byte(456,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__calib_test_coarse(o) (o.read(456) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__calib_test_coarse() ( ma_read_byte(456) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__outputs__calib_test_fine---
// 
#define MA_core__clk_sys__outputs__calib_test_fine__a 0x01c9
#define MA_core__clk_sys__outputs__calib_test_fine__len 6
#define MA_core__clk_sys__outputs__calib_test_fine__mask 0x3f
#define MA_core__clk_sys__outputs__calib_test_fine__shift 0x00
#define MA_core__clk_sys__outputs__calib_test_fine__reset 0x00
#define MA_core__clk_sys__outputs__calib_test_fine__inputonly 1
#define set_obj_MA_core__clk_sys__outputs__calib_test_fine(o,y) ({ uint8_t __ret = o.read(457); o.write(457,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__clk_sys__outputs__calib_test_fine(y) ({ uint8_t __ret = ma_read_byte(457); ma_write_byte(457,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__clk_sys__outputs__calib_test_fine(o) (o.read(457) & 0x3f)>>0
#define get_MA_core__clk_sys__outputs__calib_test_fine() ( ma_read_byte(457) & 0x3f)>>0
//------------------------------------------------------------------------------core__clk_sys__clear_all_latched_bits---
// 
#define MA_core__clk_sys__clear_all_latched_bits__a 0x0194
#define MA_core__clk_sys__clear_all_latched_bits__len 1
#define MA_core__clk_sys__clear_all_latched_bits__mask 0x01
#define MA_core__clk_sys__clear_all_latched_bits__shift 0x00
#define MA_core__clk_sys__clear_all_latched_bits__reset 0x00
#define MA_core__clk_sys__clear_all_latched_bits__inputonly 0
#define set_obj_MA_core__clk_sys__clear_all_latched_bits(o,y) ({ uint8_t __ret = o.read(404); o.write(404,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__clear_all_latched_bits(y) ({ uint8_t __ret = ma_read_byte(404); ma_write_byte(404,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__clear_all_latched_bits(o) (o.read(404) & 0x01)>>0
#define get_MA_core__clk_sys__clear_all_latched_bits() ( ma_read_byte(404) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__clear_latched_div_bits---
// 
#define MA_core__clk_sys__clear_latched_div_bits__a 0x0194
#define MA_core__clk_sys__clear_latched_div_bits__len 1
#define MA_core__clk_sys__clear_latched_div_bits__mask 0x02
#define MA_core__clk_sys__clear_latched_div_bits__shift 0x01
#define MA_core__clk_sys__clear_latched_div_bits__reset 0x00
#define MA_core__clk_sys__clear_latched_div_bits__inputonly 0
#define set_obj_MA_core__clk_sys__clear_latched_div_bits(o,y) ({ uint8_t __ret = o.read(404); o.write(404,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__clear_latched_div_bits(y) ({ uint8_t __ret = ma_read_byte(404); ma_write_byte(404,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__clear_latched_div_bits(o) (o.read(404) & 0x02)>>1
#define get_MA_core__clk_sys__clear_latched_div_bits() ( ma_read_byte(404) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__clear_latched_ok_bits---
// 
#define MA_core__clk_sys__clear_latched_ok_bits__a 0x0194
#define MA_core__clk_sys__clear_latched_ok_bits__len 1
#define MA_core__clk_sys__clear_latched_ok_bits__mask 0x04
#define MA_core__clk_sys__clear_latched_ok_bits__shift 0x02
#define MA_core__clk_sys__clear_latched_ok_bits__reset 0x00
#define MA_core__clk_sys__clear_latched_ok_bits__inputonly 0
#define set_obj_MA_core__clk_sys__clear_latched_ok_bits(o,y) ({ uint8_t __ret = o.read(404); o.write(404,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__clear_latched_ok_bits(y) ({ uint8_t __ret = ma_read_byte(404); ma_write_byte(404,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__clear_latched_ok_bits(o) (o.read(404) & 0x04)>>2
#define get_MA_core__clk_sys__clear_latched_ok_bits() ( ma_read_byte(404) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__clear_latched_pll_bits---
// 
#define MA_core__clk_sys__clear_latched_pll_bits__a 0x0194
#define MA_core__clk_sys__clear_latched_pll_bits__len 1
#define MA_core__clk_sys__clear_latched_pll_bits__mask 0x08
#define MA_core__clk_sys__clear_latched_pll_bits__shift 0x03
#define MA_core__clk_sys__clear_latched_pll_bits__reset 0x00
#define MA_core__clk_sys__clear_latched_pll_bits__inputonly 0
#define set_obj_MA_core__clk_sys__clear_latched_pll_bits(o,y) ({ uint8_t __ret = o.read(404); o.write(404,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__clear_latched_pll_bits(y) ({ uint8_t __ret = ma_read_byte(404); ma_write_byte(404,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__clear_latched_pll_bits(o) (o.read(404) & 0x08)>>3
#define get_MA_core__clk_sys__clear_latched_pll_bits() ( ma_read_byte(404) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__status__dpll_test_coarse_done---
// 
#define MA_core__clk_sys__status__dpll_test_coarse_done__a 0x019f
#define MA_core__clk_sys__status__dpll_test_coarse_done__len 1
#define MA_core__clk_sys__status__dpll_test_coarse_done__mask 0x02
#define MA_core__clk_sys__status__dpll_test_coarse_done__shift 0x01
#define MA_core__clk_sys__status__dpll_test_coarse_done__reset 0x00
#define MA_core__clk_sys__status__dpll_test_coarse_done__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_test_coarse_done(o,y) ({ uint8_t __ret = o.read(415); o.write(415,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__status__dpll_test_coarse_done(y) ({ uint8_t __ret = ma_read_byte(415); ma_write_byte(415,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__status__dpll_test_coarse_done(o) (o.read(415) & 0x02)>>1
#define get_MA_core__clk_sys__status__dpll_test_coarse_done() ( ma_read_byte(415) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__status__dpll_test_fine_done---
// 
#define MA_core__clk_sys__status__dpll_test_fine_done__a 0x019f
#define MA_core__clk_sys__status__dpll_test_fine_done__len 1
#define MA_core__clk_sys__status__dpll_test_fine_done__mask 0x04
#define MA_core__clk_sys__status__dpll_test_fine_done__shift 0x02
#define MA_core__clk_sys__status__dpll_test_fine_done__reset 0x00
#define MA_core__clk_sys__status__dpll_test_fine_done__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_test_fine_done(o,y) ({ uint8_t __ret = o.read(415); o.write(415,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__status__dpll_test_fine_done(y) ({ uint8_t __ret = ma_read_byte(415); ma_write_byte(415,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__status__dpll_test_fine_done(o) (o.read(415) & 0x04)>>2
#define get_MA_core__clk_sys__status__dpll_test_fine_done() ( ma_read_byte(415) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__status__dpll_test_error---
// 
#define MA_core__clk_sys__status__dpll_test_error__a 0x019f
#define MA_core__clk_sys__status__dpll_test_error__len 1
#define MA_core__clk_sys__status__dpll_test_error__mask 0x08
#define MA_core__clk_sys__status__dpll_test_error__shift 0x03
#define MA_core__clk_sys__status__dpll_test_error__reset 0x00
#define MA_core__clk_sys__status__dpll_test_error__inputonly 1
#define set_obj_MA_core__clk_sys__status__dpll_test_error(o,y) ({ uint8_t __ret = o.read(415); o.write(415,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__status__dpll_test_error(y) ({ uint8_t __ret = ma_read_byte(415); ma_write_byte(415,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__status__dpll_test_error(o) (o.read(415) & 0x08)>>3
#define get_MA_core__clk_sys__status__dpll_test_error() ( ma_read_byte(415) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__status__mode_div_changed_at_clk_sys---
// 
#define MA_core__clk_sys__status__mode_div_changed_at_clk_sys__a 0x01a0
#define MA_core__clk_sys__status__mode_div_changed_at_clk_sys__len 1
#define MA_core__clk_sys__status__mode_div_changed_at_clk_sys__mask 0x01
#define MA_core__clk_sys__status__mode_div_changed_at_clk_sys__shift 0x00
#define MA_core__clk_sys__status__mode_div_changed_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__mode_div_changed_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_div_changed_at_clk_sys(o,y) ({ uint8_t __ret = o.read(416); o.write(416,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__mode_div_changed_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(416); ma_write_byte(416,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__mode_div_changed_at_clk_sys(o) (o.read(416) & 0x01)>>0
#define get_MA_core__clk_sys__status__mode_div_changed_at_clk_sys() ( ma_read_byte(416) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__status__mode_m_div_changed_at_clk_sys---
// 
#define MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys__a 0x01a0
#define MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys__len 1
#define MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys__mask 0x02
#define MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys__shift 0x01
#define MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys(o,y) ({ uint8_t __ret = o.read(416); o.write(416,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(416); ma_write_byte(416,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys(o) (o.read(416) & 0x02)>>1
#define get_MA_core__clk_sys__status__mode_m_div_changed_at_clk_sys() ( ma_read_byte(416) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__status__mode_ref_div_changed_at_clk_sys---
// 
#define MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys__a 0x01a0
#define MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys__len 1
#define MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys__mask 0x04
#define MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys__shift 0x02
#define MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys(o,y) ({ uint8_t __ret = o.read(416); o.write(416,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(416); ma_write_byte(416,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys(o) (o.read(416) & 0x04)>>2
#define get_MA_core__clk_sys__status__mode_ref_div_changed_at_clk_sys() ( ma_read_byte(416) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__status__mode_fb_div_changed_at_clk_sys---
// 
#define MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys__a 0x01a0
#define MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys__len 1
#define MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys__mask 0x08
#define MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys__shift 0x03
#define MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys(o,y) ({ uint8_t __ret = o.read(416); o.write(416,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(416); ma_write_byte(416,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys(o) (o.read(416) & 0x08)>>3
#define get_MA_core__clk_sys__status__mode_fb_div_changed_at_clk_sys() ( ma_read_byte(416) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__status__i2s_sck_ok_at_clk_sys---
// 
#define MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys__a 0x01a1
#define MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys__len 1
#define MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys__mask 0x01
#define MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys__shift 0x00
#define MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys(o,y) ({ uint8_t __ret = o.read(417); o.write(417,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(417); ma_write_byte(417,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys(o) (o.read(417) & 0x01)>>0
#define get_MA_core__clk_sys__status__i2s_sck_ok_at_clk_sys() ( ma_read_byte(417) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__status__dco_clk_ok_at_clk_sys---
// 
#define MA_core__clk_sys__status__dco_clk_ok_at_clk_sys__a 0x01a1
#define MA_core__clk_sys__status__dco_clk_ok_at_clk_sys__len 1
#define MA_core__clk_sys__status__dco_clk_ok_at_clk_sys__mask 0x02
#define MA_core__clk_sys__status__dco_clk_ok_at_clk_sys__shift 0x01
#define MA_core__clk_sys__status__dco_clk_ok_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__dco_clk_ok_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__dco_clk_ok_at_clk_sys(o,y) ({ uint8_t __ret = o.read(417); o.write(417,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__status__dco_clk_ok_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(417); ma_write_byte(417,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__status__dco_clk_ok_at_clk_sys(o) (o.read(417) & 0x02)>>1
#define get_MA_core__clk_sys__status__dco_clk_ok_at_clk_sys() ( ma_read_byte(417) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__status__pll_locked_at_clk_sys---
// 
#define MA_core__clk_sys__status__pll_locked_at_clk_sys__a 0x01a1
#define MA_core__clk_sys__status__pll_locked_at_clk_sys__len 1
#define MA_core__clk_sys__status__pll_locked_at_clk_sys__mask 0x04
#define MA_core__clk_sys__status__pll_locked_at_clk_sys__shift 0x02
#define MA_core__clk_sys__status__pll_locked_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__pll_locked_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__pll_locked_at_clk_sys(o,y) ({ uint8_t __ret = o.read(417); o.write(417,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__status__pll_locked_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(417); ma_write_byte(417,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__status__pll_locked_at_clk_sys(o) (o.read(417) & 0x04)>>2
#define get_MA_core__clk_sys__status__pll_locked_at_clk_sys() ( ma_read_byte(417) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__status__counters_syncronized_at_clk_sys---
// 
#define MA_core__clk_sys__status__counters_syncronized_at_clk_sys__a 0x01a1
#define MA_core__clk_sys__status__counters_syncronized_at_clk_sys__len 1
#define MA_core__clk_sys__status__counters_syncronized_at_clk_sys__mask 0x08
#define MA_core__clk_sys__status__counters_syncronized_at_clk_sys__shift 0x03
#define MA_core__clk_sys__status__counters_syncronized_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__counters_syncronized_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__counters_syncronized_at_clk_sys(o,y) ({ uint8_t __ret = o.read(417); o.write(417,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__status__counters_syncronized_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(417); ma_write_byte(417,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__status__counters_syncronized_at_clk_sys(o) (o.read(417) & 0x08)>>3
#define get_MA_core__clk_sys__status__counters_syncronized_at_clk_sys() ( ma_read_byte(417) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__status__phase_max_at_clk_sys---
// 
#define MA_core__clk_sys__status__phase_max_at_clk_sys__a 0x01a1
#define MA_core__clk_sys__status__phase_max_at_clk_sys__len 1
#define MA_core__clk_sys__status__phase_max_at_clk_sys__mask 0x10
#define MA_core__clk_sys__status__phase_max_at_clk_sys__shift 0x04
#define MA_core__clk_sys__status__phase_max_at_clk_sys__reset 0x00
#define MA_core__clk_sys__status__phase_max_at_clk_sys__inputonly 1
#define set_obj_MA_core__clk_sys__status__phase_max_at_clk_sys(o,y) ({ uint8_t __ret = o.read(417); o.write(417,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__status__phase_max_at_clk_sys(y) ({ uint8_t __ret = ma_read_byte(417); ma_write_byte(417,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__status__phase_max_at_clk_sys(o) (o.read(417) & 0x10)>>4
#define get_MA_core__clk_sys__status__phase_max_at_clk_sys() ( ma_read_byte(417) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__status__mode_div_changed_latched---
// 
#define MA_core__clk_sys__status__mode_div_changed_latched__a 0x01a2
#define MA_core__clk_sys__status__mode_div_changed_latched__len 1
#define MA_core__clk_sys__status__mode_div_changed_latched__mask 0x01
#define MA_core__clk_sys__status__mode_div_changed_latched__shift 0x00
#define MA_core__clk_sys__status__mode_div_changed_latched__reset 0x00
#define MA_core__clk_sys__status__mode_div_changed_latched__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_div_changed_latched(o,y) ({ uint8_t __ret = o.read(418); o.write(418,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__mode_div_changed_latched(y) ({ uint8_t __ret = ma_read_byte(418); ma_write_byte(418,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__mode_div_changed_latched(o) (o.read(418) & 0x01)>>0
#define get_MA_core__clk_sys__status__mode_div_changed_latched() ( ma_read_byte(418) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__status__mode_m_div_changed_latched---
// 
#define MA_core__clk_sys__status__mode_m_div_changed_latched__a 0x01a2
#define MA_core__clk_sys__status__mode_m_div_changed_latched__len 1
#define MA_core__clk_sys__status__mode_m_div_changed_latched__mask 0x02
#define MA_core__clk_sys__status__mode_m_div_changed_latched__shift 0x01
#define MA_core__clk_sys__status__mode_m_div_changed_latched__reset 0x00
#define MA_core__clk_sys__status__mode_m_div_changed_latched__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_m_div_changed_latched(o,y) ({ uint8_t __ret = o.read(418); o.write(418,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__status__mode_m_div_changed_latched(y) ({ uint8_t __ret = ma_read_byte(418); ma_write_byte(418,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__status__mode_m_div_changed_latched(o) (o.read(418) & 0x02)>>1
#define get_MA_core__clk_sys__status__mode_m_div_changed_latched() ( ma_read_byte(418) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__status__mode_ref_div_changed_latched---
// 
#define MA_core__clk_sys__status__mode_ref_div_changed_latched__a 0x01a2
#define MA_core__clk_sys__status__mode_ref_div_changed_latched__len 1
#define MA_core__clk_sys__status__mode_ref_div_changed_latched__mask 0x04
#define MA_core__clk_sys__status__mode_ref_div_changed_latched__shift 0x02
#define MA_core__clk_sys__status__mode_ref_div_changed_latched__reset 0x00
#define MA_core__clk_sys__status__mode_ref_div_changed_latched__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_ref_div_changed_latched(o,y) ({ uint8_t __ret = o.read(418); o.write(418,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__status__mode_ref_div_changed_latched(y) ({ uint8_t __ret = ma_read_byte(418); ma_write_byte(418,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__status__mode_ref_div_changed_latched(o) (o.read(418) & 0x04)>>2
#define get_MA_core__clk_sys__status__mode_ref_div_changed_latched() ( ma_read_byte(418) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__status__mode_fb_div_changed_latched---
// 
#define MA_core__clk_sys__status__mode_fb_div_changed_latched__a 0x01a2
#define MA_core__clk_sys__status__mode_fb_div_changed_latched__len 1
#define MA_core__clk_sys__status__mode_fb_div_changed_latched__mask 0x08
#define MA_core__clk_sys__status__mode_fb_div_changed_latched__shift 0x03
#define MA_core__clk_sys__status__mode_fb_div_changed_latched__reset 0x00
#define MA_core__clk_sys__status__mode_fb_div_changed_latched__inputonly 1
#define set_obj_MA_core__clk_sys__status__mode_fb_div_changed_latched(o,y) ({ uint8_t __ret = o.read(418); o.write(418,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__status__mode_fb_div_changed_latched(y) ({ uint8_t __ret = ma_read_byte(418); ma_write_byte(418,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__status__mode_fb_div_changed_latched(o) (o.read(418) & 0x08)>>3
#define get_MA_core__clk_sys__status__mode_fb_div_changed_latched() ( ma_read_byte(418) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__status__pll_locked_error---
// 
#define MA_core__clk_sys__status__pll_locked_error__a 0x01a3
#define MA_core__clk_sys__status__pll_locked_error__len 1
#define MA_core__clk_sys__status__pll_locked_error__mask 0x01
#define MA_core__clk_sys__status__pll_locked_error__shift 0x00
#define MA_core__clk_sys__status__pll_locked_error__reset 0x00
#define MA_core__clk_sys__status__pll_locked_error__inputonly 1
#define set_obj_MA_core__clk_sys__status__pll_locked_error(o,y) ({ uint8_t __ret = o.read(419); o.write(419,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__clk_sys__status__pll_locked_error(y) ({ uint8_t __ret = ma_read_byte(419); ma_write_byte(419,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__clk_sys__status__pll_locked_error(o) (o.read(419) & 0x01)>>0
#define get_MA_core__clk_sys__status__pll_locked_error() ( ma_read_byte(419) & 0x01)>>0
//------------------------------------------------------------------------------core__clk_sys__status__phase_max_error---
// 
#define MA_core__clk_sys__status__phase_max_error__a 0x01a3
#define MA_core__clk_sys__status__phase_max_error__len 1
#define MA_core__clk_sys__status__phase_max_error__mask 0x02
#define MA_core__clk_sys__status__phase_max_error__shift 0x01
#define MA_core__clk_sys__status__phase_max_error__reset 0x00
#define MA_core__clk_sys__status__phase_max_error__inputonly 1
#define set_obj_MA_core__clk_sys__status__phase_max_error(o,y) ({ uint8_t __ret = o.read(419); o.write(419,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__status__phase_max_error(y) ({ uint8_t __ret = ma_read_byte(419); ma_write_byte(419,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__status__phase_max_error(o) (o.read(419) & 0x02)>>1
#define get_MA_core__clk_sys__status__phase_max_error() ( ma_read_byte(419) & 0x02)>>1
//------------------------------------------------------------------------------core__clk_sys__status__counters_syncronized_error---
// 
#define MA_core__clk_sys__status__counters_syncronized_error__a 0x01a3
#define MA_core__clk_sys__status__counters_syncronized_error__len 1
#define MA_core__clk_sys__status__counters_syncronized_error__mask 0x04
#define MA_core__clk_sys__status__counters_syncronized_error__shift 0x02
#define MA_core__clk_sys__status__counters_syncronized_error__reset 0x00
#define MA_core__clk_sys__status__counters_syncronized_error__inputonly 1
#define set_obj_MA_core__clk_sys__status__counters_syncronized_error(o,y) ({ uint8_t __ret = o.read(419); o.write(419,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__clk_sys__status__counters_syncronized_error(y) ({ uint8_t __ret = ma_read_byte(419); ma_write_byte(419,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__clk_sys__status__counters_syncronized_error(o) (o.read(419) & 0x04)>>2
#define get_MA_core__clk_sys__status__counters_syncronized_error() ( ma_read_byte(419) & 0x04)>>2
//------------------------------------------------------------------------------core__clk_sys__status__i2s_sck_ok_error---
// 
#define MA_core__clk_sys__status__i2s_sck_ok_error__a 0x01a3
#define MA_core__clk_sys__status__i2s_sck_ok_error__len 1
#define MA_core__clk_sys__status__i2s_sck_ok_error__mask 0x08
#define MA_core__clk_sys__status__i2s_sck_ok_error__shift 0x03
#define MA_core__clk_sys__status__i2s_sck_ok_error__reset 0x00
#define MA_core__clk_sys__status__i2s_sck_ok_error__inputonly 1
#define set_obj_MA_core__clk_sys__status__i2s_sck_ok_error(o,y) ({ uint8_t __ret = o.read(419); o.write(419,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__clk_sys__status__i2s_sck_ok_error(y) ({ uint8_t __ret = ma_read_byte(419); ma_write_byte(419,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__clk_sys__status__i2s_sck_ok_error(o) (o.read(419) & 0x08)>>3
#define get_MA_core__clk_sys__status__i2s_sck_ok_error() ( ma_read_byte(419) & 0x08)>>3
//------------------------------------------------------------------------------core__clk_sys__status__dco_clk_ok_error---
// 
#define MA_core__clk_sys__status__dco_clk_ok_error__a 0x01a3
#define MA_core__clk_sys__status__dco_clk_ok_error__len 1
#define MA_core__clk_sys__status__dco_clk_ok_error__mask 0x10
#define MA_core__clk_sys__status__dco_clk_ok_error__shift 0x04
#define MA_core__clk_sys__status__dco_clk_ok_error__reset 0x00
#define MA_core__clk_sys__status__dco_clk_ok_error__inputonly 1
#define set_obj_MA_core__clk_sys__status__dco_clk_ok_error(o,y) ({ uint8_t __ret = o.read(419); o.write(419,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__clk_sys__status__dco_clk_ok_error(y) ({ uint8_t __ret = ma_read_byte(419); ma_write_byte(419,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__clk_sys__status__dco_clk_ok_error(o) (o.read(419) & 0x10)>>4
#define get_MA_core__clk_sys__status__dco_clk_ok_error() ( ma_read_byte(419) & 0x10)>>4
//------------------------------------------------------------------------------core__clk_sys__afir_clk_div---
// AFIR clock frequency select; 0: 24 MHz, 1: 12 MHz
#define MA_core__clk_sys__afir_clk_div__a 0x0186
#define MA_core__clk_sys__afir_clk_div__len 1
#define MA_core__clk_sys__afir_clk_div__mask 0x02
#define MA_core__clk_sys__afir_clk_div__shift 0x01
#define MA_core__clk_sys__afir_clk_div__reset 0x00
#define MA_core__clk_sys__afir_clk_div__inputonly 0
#define set_obj_MA_core__clk_sys__afir_clk_div(o,y) ({ uint8_t __ret = o.read(390); o.write(390,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__clk_sys__afir_clk_div(y) ({ uint8_t __ret = ma_read_byte(390); ma_write_byte(390,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__clk_sys__afir_clk_div(o) (o.read(390) & 0x02)>>1
#define get_MA_core__clk_sys__afir_clk_div() ( ma_read_byte(390) & 0x02)>>1
//------------------------------------------------------------------------------core__asense__temp_en---
// 
#define MA_core__asense__temp_en__a 0x01e0
#define MA_core__asense__temp_en__len 1
#define MA_core__asense__temp_en__mask 0x01
#define MA_core__asense__temp_en__shift 0x00
#define MA_core__asense__temp_en__reset 0x01
#define MA_core__asense__temp_en__inputonly 0
#define set_obj_MA_core__asense__temp_en(o,y) ({ uint8_t __ret = o.read(480); o.write(480,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__asense__temp_en(y) ({ uint8_t __ret = ma_read_byte(480); ma_write_byte(480,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__asense__temp_en(o) (o.read(480) & 0x01)>>0
#define get_MA_core__asense__temp_en() ( ma_read_byte(480) & 0x01)>>0
//------------------------------------------------------------------------------core__asense__pvdd_en---
// 
#define MA_core__asense__pvdd_en__a 0x01e0
#define MA_core__asense__pvdd_en__len 1
#define MA_core__asense__pvdd_en__mask 0x02
#define MA_core__asense__pvdd_en__shift 0x01
#define MA_core__asense__pvdd_en__reset 0x01
#define MA_core__asense__pvdd_en__inputonly 0
#define set_obj_MA_core__asense__pvdd_en(o,y) ({ uint8_t __ret = o.read(480); o.write(480,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__asense__pvdd_en(y) ({ uint8_t __ret = ma_read_byte(480); ma_write_byte(480,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__asense__pvdd_en(o) (o.read(480) & 0x02)>>1
#define get_MA_core__asense__pvdd_en() ( ma_read_byte(480) & 0x02)>>1
//------------------------------------------------------------------------------core__asense__pin_en---
// 
#define MA_core__asense__pin_en__a 0x01e0
#define MA_core__asense__pin_en__len 1
#define MA_core__asense__pin_en__mask 0x04
#define MA_core__asense__pin_en__shift 0x02
#define MA_core__asense__pin_en__reset 0x00
#define MA_core__asense__pin_en__inputonly 0
#define set_obj_MA_core__asense__pin_en(o,y) ({ uint8_t __ret = o.read(480); o.write(480,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__asense__pin_en(y) ({ uint8_t __ret = ma_read_byte(480); ma_write_byte(480,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__asense__pin_en(o) (o.read(480) & 0x04)>>2
#define get_MA_core__asense__pin_en() ( ma_read_byte(480) & 0x04)>>2
//------------------------------------------------------------------------------core__asense__debug0_en---
// 
#define MA_core__asense__debug0_en__a 0x01e0
#define MA_core__asense__debug0_en__len 1
#define MA_core__asense__debug0_en__mask 0x08
#define MA_core__asense__debug0_en__shift 0x03
#define MA_core__asense__debug0_en__reset 0x00
#define MA_core__asense__debug0_en__inputonly 0
#define set_obj_MA_core__asense__debug0_en(o,y) ({ uint8_t __ret = o.read(480); o.write(480,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__asense__debug0_en(y) ({ uint8_t __ret = ma_read_byte(480); ma_write_byte(480,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__asense__debug0_en(o) (o.read(480) & 0x08)>>3
#define get_MA_core__asense__debug0_en() ( ma_read_byte(480) & 0x08)>>3
//------------------------------------------------------------------------------core__asense__debug1_en---
// 
#define MA_core__asense__debug1_en__a 0x01e0
#define MA_core__asense__debug1_en__len 1
#define MA_core__asense__debug1_en__mask 0x10
#define MA_core__asense__debug1_en__shift 0x04
#define MA_core__asense__debug1_en__reset 0x00
#define MA_core__asense__debug1_en__inputonly 0
#define set_obj_MA_core__asense__debug1_en(o,y) ({ uint8_t __ret = o.read(480); o.write(480,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__asense__debug1_en(y) ({ uint8_t __ret = ma_read_byte(480); ma_write_byte(480,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__asense__debug1_en(o) (o.read(480) & 0x10)>>4
#define get_MA_core__asense__debug1_en() ( ma_read_byte(480) & 0x10)>>4
//------------------------------------------------------------------------------core__asense__current_sense_en---
// 
#define MA_core__asense__current_sense_en__a 0x01e0
#define MA_core__asense__current_sense_en__len 1
#define MA_core__asense__current_sense_en__mask 0x20
#define MA_core__asense__current_sense_en__shift 0x05
#define MA_core__asense__current_sense_en__reset 0x00
#define MA_core__asense__current_sense_en__inputonly 0
#define set_obj_MA_core__asense__current_sense_en(o,y) ({ uint8_t __ret = o.read(480); o.write(480,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__asense__current_sense_en(y) ({ uint8_t __ret = ma_read_byte(480); ma_write_byte(480,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__asense__current_sense_en(o) (o.read(480) & 0x20)>>5
#define get_MA_core__asense__current_sense_en() ( ma_read_byte(480) & 0x20)>>5
//------------------------------------------------------------------------------core__asense__voltage_sense_en---
// 
#define MA_core__asense__voltage_sense_en__a 0x01e0
#define MA_core__asense__voltage_sense_en__len 1
#define MA_core__asense__voltage_sense_en__mask 0x40
#define MA_core__asense__voltage_sense_en__shift 0x06
#define MA_core__asense__voltage_sense_en__reset 0x00
#define MA_core__asense__voltage_sense_en__inputonly 0
#define set_obj_MA_core__asense__voltage_sense_en(o,y) ({ uint8_t __ret = o.read(480); o.write(480,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__asense__voltage_sense_en(y) ({ uint8_t __ret = ma_read_byte(480); ma_write_byte(480,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__asense__voltage_sense_en(o) (o.read(480) & 0x40)>>6
#define get_MA_core__asense__voltage_sense_en() ( ma_read_byte(480) & 0x40)>>6
//------------------------------------------------------------------------------core__asense__ch0_sense_en---
// 
#define MA_core__asense__ch0_sense_en__a 0x01e0
#define MA_core__asense__ch0_sense_en__len 1
#define MA_core__asense__ch0_sense_en__mask 0x80
#define MA_core__asense__ch0_sense_en__shift 0x07
#define MA_core__asense__ch0_sense_en__reset 0x00
#define MA_core__asense__ch0_sense_en__inputonly 0
#define set_obj_MA_core__asense__ch0_sense_en(o,y) ({ uint8_t __ret = o.read(480); o.write(480,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__asense__ch0_sense_en(y) ({ uint8_t __ret = ma_read_byte(480); ma_write_byte(480,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__asense__ch0_sense_en(o) (o.read(480) & 0x80)>>7
#define get_MA_core__asense__ch0_sense_en() ( ma_read_byte(480) & 0x80)>>7
//------------------------------------------------------------------------------core__asense__ch1_sense_en---
// 
#define MA_core__asense__ch1_sense_en__a 0x01e1
#define MA_core__asense__ch1_sense_en__len 1
#define MA_core__asense__ch1_sense_en__mask 0x01
#define MA_core__asense__ch1_sense_en__shift 0x00
#define MA_core__asense__ch1_sense_en__reset 0x00
#define MA_core__asense__ch1_sense_en__inputonly 0
#define set_obj_MA_core__asense__ch1_sense_en(o,y) ({ uint8_t __ret = o.read(481); o.write(481,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__asense__ch1_sense_en(y) ({ uint8_t __ret = ma_read_byte(481); ma_write_byte(481,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__asense__ch1_sense_en(o) (o.read(481) & 0x01)>>0
#define get_MA_core__asense__ch1_sense_en() ( ma_read_byte(481) & 0x01)>>0
//------------------------------------------------------------------------------core__asense__cal_rate---
// 
#define MA_core__asense__cal_rate__a 0x01e1
#define MA_core__asense__cal_rate__len 2
#define MA_core__asense__cal_rate__mask 0x06
#define MA_core__asense__cal_rate__shift 0x01
#define MA_core__asense__cal_rate__reset 0x01
#define MA_core__asense__cal_rate__inputonly 0
#define set_obj_MA_core__asense__cal_rate(o,y) ({ uint8_t __ret = o.read(481); o.write(481,(__ret&0xf9)|((y<<1)&0x06)); })
#define set_MA_core__asense__cal_rate(y) ({ uint8_t __ret = ma_read_byte(481); ma_write_byte(481,(__ret&0xf9)|((y<<1)&0x06)); })
#define get_obj_MA_core__asense__cal_rate(o) (o.read(481) & 0x06)>>1
#define get_MA_core__asense__cal_rate() ( ma_read_byte(481) & 0x06)>>1
//------------------------------------------------------------------------------core__asense__cal_vref__0---
// 
#define MA_core__asense__cal_vref__0__a 0x01e2
#define MA_core__asense__cal_vref__0__len 8
#define MA_core__asense__cal_vref__0__mask 0xff
#define MA_core__asense__cal_vref__0__shift 0x00
#define MA_core__asense__cal_vref__0__reset 0xcd
#define MA_core__asense__cal_vref__0__inputonly 0
#define set_obj_MA_core__asense__cal_vref__0(o,y) o.write(482,y);
#define set_MA_core__asense__cal_vref__0(y) ma_write_byte(482,y);
#define get_obj_MA_core__asense__cal_vref__0(o) (o.read(482) & 0xff)>>0
#define get_MA_core__asense__cal_vref__0() ( ma_read_byte(482) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__cal_vref__1---
// 
#define MA_core__asense__cal_vref__1__a 0x01e3
#define MA_core__asense__cal_vref__1__len 8
#define MA_core__asense__cal_vref__1__mask 0xff
#define MA_core__asense__cal_vref__1__shift 0x00
#define MA_core__asense__cal_vref__1__reset 0xcc
#define MA_core__asense__cal_vref__1__inputonly 0
#define set_obj_MA_core__asense__cal_vref__1(o,y) o.write(483,y);
#define set_MA_core__asense__cal_vref__1(y) ma_write_byte(483,y);
#define get_obj_MA_core__asense__cal_vref__1(o) (o.read(483) & 0xff)>>0
#define get_MA_core__asense__cal_vref__1() ( ma_read_byte(483) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__cal_intref__0---
// 
#define MA_core__asense__cal_intref__0__a 0x01e4
#define MA_core__asense__cal_intref__0__len 8
#define MA_core__asense__cal_intref__0__mask 0xff
#define MA_core__asense__cal_intref__0__shift 0x00
#define MA_core__asense__cal_intref__0__reset 0x00
#define MA_core__asense__cal_intref__0__inputonly 0
#define set_obj_MA_core__asense__cal_intref__0(o,y) o.write(484,y);
#define set_MA_core__asense__cal_intref__0(y) ma_write_byte(484,y);
#define get_obj_MA_core__asense__cal_intref__0(o) (o.read(484) & 0xff)>>0
#define get_MA_core__asense__cal_intref__0() ( ma_read_byte(484) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__cal_intref__1---
// 
#define MA_core__asense__cal_intref__1__a 0x01e5
#define MA_core__asense__cal_intref__1__len 8
#define MA_core__asense__cal_intref__1__mask 0xff
#define MA_core__asense__cal_intref__1__shift 0x00
#define MA_core__asense__cal_intref__1__reset 0x80
#define MA_core__asense__cal_intref__1__inputonly 0
#define set_obj_MA_core__asense__cal_intref__1(o,y) o.write(485,y);
#define set_MA_core__asense__cal_intref__1(y) ma_write_byte(485,y);
#define get_obj_MA_core__asense__cal_intref__1(o) (o.read(485) & 0xff)>>0
#define get_MA_core__asense__cal_intref__1() ( ma_read_byte(485) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__cal_intdsref__0---
// 
#define MA_core__asense__cal_intdsref__0__a 0x01e6
#define MA_core__asense__cal_intdsref__0__len 8
#define MA_core__asense__cal_intdsref__0__mask 0xff
#define MA_core__asense__cal_intdsref__0__shift 0x00
#define MA_core__asense__cal_intdsref__0__reset 0x00
#define MA_core__asense__cal_intdsref__0__inputonly 0
#define set_obj_MA_core__asense__cal_intdsref__0(o,y) o.write(486,y);
#define set_MA_core__asense__cal_intdsref__0(y) ma_write_byte(486,y);
#define get_obj_MA_core__asense__cal_intdsref__0(o) (o.read(486) & 0xff)>>0
#define get_MA_core__asense__cal_intdsref__0() ( ma_read_byte(486) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__cal_intdsref__1---
// 
#define MA_core__asense__cal_intdsref__1__a 0x01e7
#define MA_core__asense__cal_intdsref__1__len 8
#define MA_core__asense__cal_intdsref__1__mask 0xff
#define MA_core__asense__cal_intdsref__1__shift 0x00
#define MA_core__asense__cal_intdsref__1__reset 0x80
#define MA_core__asense__cal_intdsref__1__inputonly 0
#define set_obj_MA_core__asense__cal_intdsref__1(o,y) o.write(487,y);
#define set_MA_core__asense__cal_intdsref__1(y) ma_write_byte(487,y);
#define get_obj_MA_core__asense__cal_intdsref__1(o) (o.read(487) & 0xff)>>0
#define get_MA_core__asense__cal_intdsref__1() ( ma_read_byte(487) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__weight_cal_en---
// 
#define MA_core__asense__weight_cal_en__a 0x01e8
#define MA_core__asense__weight_cal_en__len 1
#define MA_core__asense__weight_cal_en__mask 0x01
#define MA_core__asense__weight_cal_en__shift 0x00
#define MA_core__asense__weight_cal_en__reset 0x01
#define MA_core__asense__weight_cal_en__inputonly 0
#define set_obj_MA_core__asense__weight_cal_en(o,y) ({ uint8_t __ret = o.read(488); o.write(488,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__asense__weight_cal_en(y) ({ uint8_t __ret = ma_read_byte(488); ma_write_byte(488,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__asense__weight_cal_en(o) (o.read(488) & 0x01)>>0
#define get_MA_core__asense__weight_cal_en() ( ma_read_byte(488) & 0x01)>>0
//------------------------------------------------------------------------------core__asense__gain_cal_en---
// 
#define MA_core__asense__gain_cal_en__a 0x01e8
#define MA_core__asense__gain_cal_en__len 1
#define MA_core__asense__gain_cal_en__mask 0x02
#define MA_core__asense__gain_cal_en__shift 0x01
#define MA_core__asense__gain_cal_en__reset 0x01
#define MA_core__asense__gain_cal_en__inputonly 0
#define set_obj_MA_core__asense__gain_cal_en(o,y) ({ uint8_t __ret = o.read(488); o.write(488,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__asense__gain_cal_en(y) ({ uint8_t __ret = ma_read_byte(488); ma_write_byte(488,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__asense__gain_cal_en(o) (o.read(488) & 0x02)>>1
#define get_MA_core__asense__gain_cal_en() ( ma_read_byte(488) & 0x02)>>1
//------------------------------------------------------------------------------core__asense__int_cal_en---
// 
#define MA_core__asense__int_cal_en__a 0x01e8
#define MA_core__asense__int_cal_en__len 1
#define MA_core__asense__int_cal_en__mask 0x04
#define MA_core__asense__int_cal_en__shift 0x02
#define MA_core__asense__int_cal_en__reset 0x00
#define MA_core__asense__int_cal_en__inputonly 0
#define set_obj_MA_core__asense__int_cal_en(o,y) ({ uint8_t __ret = o.read(488); o.write(488,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__asense__int_cal_en(y) ({ uint8_t __ret = ma_read_byte(488); ma_write_byte(488,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__asense__int_cal_en(o) (o.read(488) & 0x04)>>2
#define get_MA_core__asense__int_cal_en() ( ma_read_byte(488) & 0x04)>>2
//------------------------------------------------------------------------------core__asense__intds_cal_en---
// 
#define MA_core__asense__intds_cal_en__a 0x01e8
#define MA_core__asense__intds_cal_en__len 1
#define MA_core__asense__intds_cal_en__mask 0x08
#define MA_core__asense__intds_cal_en__shift 0x03
#define MA_core__asense__intds_cal_en__reset 0x00
#define MA_core__asense__intds_cal_en__inputonly 0
#define set_obj_MA_core__asense__intds_cal_en(o,y) ({ uint8_t __ret = o.read(488); o.write(488,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__asense__intds_cal_en(y) ({ uint8_t __ret = ma_read_byte(488); ma_write_byte(488,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__asense__intds_cal_en(o) (o.read(488) & 0x08)>>3
#define get_MA_core__asense__intds_cal_en() ( ma_read_byte(488) & 0x08)>>3
//------------------------------------------------------------------------------core__asense__perma_en---
// 
#define MA_core__asense__perma_en__a 0x01e8
#define MA_core__asense__perma_en__len 1
#define MA_core__asense__perma_en__mask 0x10
#define MA_core__asense__perma_en__shift 0x04
#define MA_core__asense__perma_en__reset 0x00
#define MA_core__asense__perma_en__inputonly 0
#define set_obj_MA_core__asense__perma_en(o,y) ({ uint8_t __ret = o.read(488); o.write(488,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__asense__perma_en(y) ({ uint8_t __ret = ma_read_byte(488); ma_write_byte(488,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__asense__perma_en(o) (o.read(488) & 0x10)>>4
#define get_MA_core__asense__perma_en() ( ma_read_byte(488) & 0x10)>>4
//------------------------------------------------------------------------------core__asense__adc_iv_rate---
// 
#define MA_core__asense__adc_iv_rate__a 0x01e8
#define MA_core__asense__adc_iv_rate__len 2
#define MA_core__asense__adc_iv_rate__mask 0x60
#define MA_core__asense__adc_iv_rate__shift 0x05
#define MA_core__asense__adc_iv_rate__reset 0x01
#define MA_core__asense__adc_iv_rate__inputonly 0
#define set_obj_MA_core__asense__adc_iv_rate(o,y) ({ uint8_t __ret = o.read(488); o.write(488,(__ret&0x9f)|((y<<5)&0x60)); })
#define set_MA_core__asense__adc_iv_rate(y) ({ uint8_t __ret = ma_read_byte(488); ma_write_byte(488,(__ret&0x9f)|((y<<5)&0x60)); })
#define get_obj_MA_core__asense__adc_iv_rate(o) (o.read(488) & 0x60)>>5
#define get_MA_core__asense__adc_iv_rate() ( ma_read_byte(488) & 0x60)>>5
//------------------------------------------------------------------------------core__asense__adc_aux_rate---
// 
#define MA_core__asense__adc_aux_rate__a 0x01e9
#define MA_core__asense__adc_aux_rate__len 3
#define MA_core__asense__adc_aux_rate__mask 0x07
#define MA_core__asense__adc_aux_rate__shift 0x00
#define MA_core__asense__adc_aux_rate__reset 0x02
#define MA_core__asense__adc_aux_rate__inputonly 0
#define set_obj_MA_core__asense__adc_aux_rate(o,y) ({ uint8_t __ret = o.read(489); o.write(489,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__asense__adc_aux_rate(y) ({ uint8_t __ret = ma_read_byte(489); ma_write_byte(489,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__asense__adc_aux_rate(o) (o.read(489) & 0x07)>>0
#define get_MA_core__asense__adc_aux_rate() ( ma_read_byte(489) & 0x07)>>0
//------------------------------------------------------------------------------core__asense__adc_phase---
// 
#define MA_core__asense__adc_phase__a 0x01e9
#define MA_core__asense__adc_phase__len 4
#define MA_core__asense__adc_phase__mask 0x78
#define MA_core__asense__adc_phase__shift 0x03
#define MA_core__asense__adc_phase__reset 0x03
#define MA_core__asense__adc_phase__inputonly 0
#define set_obj_MA_core__asense__adc_phase(o,y) ({ uint8_t __ret = o.read(489); o.write(489,(__ret&0x87)|((y<<3)&0x78)); })
#define set_MA_core__asense__adc_phase(y) ({ uint8_t __ret = ma_read_byte(489); ma_write_byte(489,(__ret&0x87)|((y<<3)&0x78)); })
#define get_obj_MA_core__asense__adc_phase(o) (o.read(489) & 0x78)>>3
#define get_MA_core__asense__adc_phase() ( ma_read_byte(489) & 0x78)>>3
//------------------------------------------------------------------------------core__asense__adc_in_phase---
// 
#define MA_core__asense__adc_in_phase__a 0x01ea
#define MA_core__asense__adc_in_phase__len 4
#define MA_core__asense__adc_in_phase__mask 0xf0
#define MA_core__asense__adc_in_phase__shift 0x04
#define MA_core__asense__adc_in_phase__reset 0x07
#define MA_core__asense__adc_in_phase__inputonly 0
#define set_obj_MA_core__asense__adc_in_phase(o,y) ({ uint8_t __ret = o.read(490); o.write(490,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__asense__adc_in_phase(y) ({ uint8_t __ret = ma_read_byte(490); ma_write_byte(490,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__asense__adc_in_phase(o) (o.read(490) & 0xf0)>>4
#define get_MA_core__asense__adc_in_phase() ( ma_read_byte(490) & 0xf0)>>4
//------------------------------------------------------------------------------core__asense__int_cscale---
// 
#define MA_core__asense__int_cscale__a 0x01eb
#define MA_core__asense__int_cscale__len 2
#define MA_core__asense__int_cscale__mask 0x03
#define MA_core__asense__int_cscale__shift 0x00
#define MA_core__asense__int_cscale__reset 0x03
#define MA_core__asense__int_cscale__inputonly 0
#define set_obj_MA_core__asense__int_cscale(o,y) ({ uint8_t __ret = o.read(491); o.write(491,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__asense__int_cscale(y) ({ uint8_t __ret = ma_read_byte(491); ma_write_byte(491,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__asense__int_cscale(o) (o.read(491) & 0x03)>>0
#define get_MA_core__asense__int_cscale() ( ma_read_byte(491) & 0x03)>>0
//------------------------------------------------------------------------------core__asense__buf_start---
// 
#define MA_core__asense__buf_start__a 0x01ec
#define MA_core__asense__buf_start__len 8
#define MA_core__asense__buf_start__mask 0xff
#define MA_core__asense__buf_start__shift 0x00
#define MA_core__asense__buf_start__reset 0x2f
#define MA_core__asense__buf_start__inputonly 0
#define set_obj_MA_core__asense__buf_start(o,y) o.write(492,y);
#define set_MA_core__asense__buf_start(y) ma_write_byte(492,y);
#define get_obj_MA_core__asense__buf_start(o) (o.read(492) & 0xff)>>0
#define get_MA_core__asense__buf_start() ( ma_read_byte(492) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__buf_prech_dur---
// 
#define MA_core__asense__buf_prech_dur__a 0x01ed
#define MA_core__asense__buf_prech_dur__len 4
#define MA_core__asense__buf_prech_dur__mask 0x0f
#define MA_core__asense__buf_prech_dur__shift 0x00
#define MA_core__asense__buf_prech_dur__reset 0x04
#define MA_core__asense__buf_prech_dur__inputonly 0
#define set_obj_MA_core__asense__buf_prech_dur(o,y) ({ uint8_t __ret = o.read(493); o.write(493,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__asense__buf_prech_dur(y) ({ uint8_t __ret = ma_read_byte(493); ma_write_byte(493,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__asense__buf_prech_dur(o) (o.read(493) & 0x0f)>>0
#define get_MA_core__asense__buf_prech_dur() ( ma_read_byte(493) & 0x0f)>>0
//------------------------------------------------------------------------------core__asense__buf_zero_dur---
// 
#define MA_core__asense__buf_zero_dur__a 0x01ed
#define MA_core__asense__buf_zero_dur__len 4
#define MA_core__asense__buf_zero_dur__mask 0xf0
#define MA_core__asense__buf_zero_dur__shift 0x04
#define MA_core__asense__buf_zero_dur__reset 0x05
#define MA_core__asense__buf_zero_dur__inputonly 0
#define set_obj_MA_core__asense__buf_zero_dur(o,y) ({ uint8_t __ret = o.read(493); o.write(493,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__asense__buf_zero_dur(y) ({ uint8_t __ret = ma_read_byte(493); ma_write_byte(493,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__asense__buf_zero_dur(o) (o.read(493) & 0xf0)>>4
#define get_MA_core__asense__buf_zero_dur() ( ma_read_byte(493) & 0xf0)>>4
//------------------------------------------------------------------------------core__asense__buf_set_dur---
// 
#define MA_core__asense__buf_set_dur__a 0x01ee
#define MA_core__asense__buf_set_dur__len 4
#define MA_core__asense__buf_set_dur__mask 0x0f
#define MA_core__asense__buf_set_dur__shift 0x00
#define MA_core__asense__buf_set_dur__reset 0x02
#define MA_core__asense__buf_set_dur__inputonly 0
#define set_obj_MA_core__asense__buf_set_dur(o,y) ({ uint8_t __ret = o.read(494); o.write(494,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__asense__buf_set_dur(y) ({ uint8_t __ret = ma_read_byte(494); ma_write_byte(494,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__asense__buf_set_dur(o) (o.read(494) & 0x0f)>>0
#define get_MA_core__asense__buf_set_dur() ( ma_read_byte(494) & 0x0f)>>0
//------------------------------------------------------------------------------core__asense__buf_adc_ready1---
// 
#define MA_core__asense__buf_adc_ready1__a 0x01ee
#define MA_core__asense__buf_adc_ready1__len 4
#define MA_core__asense__buf_adc_ready1__mask 0xf0
#define MA_core__asense__buf_adc_ready1__shift 0x04
#define MA_core__asense__buf_adc_ready1__reset 0x05
#define MA_core__asense__buf_adc_ready1__inputonly 0
#define set_obj_MA_core__asense__buf_adc_ready1(o,y) ({ uint8_t __ret = o.read(494); o.write(494,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__asense__buf_adc_ready1(y) ({ uint8_t __ret = ma_read_byte(494); ma_write_byte(494,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__asense__buf_adc_ready1(o) (o.read(494) & 0xf0)>>4
#define get_MA_core__asense__buf_adc_ready1() ( ma_read_byte(494) & 0xf0)>>4
//------------------------------------------------------------------------------core__asense__buf_adc_ready2---
// 
#define MA_core__asense__buf_adc_ready2__a 0x01ef
#define MA_core__asense__buf_adc_ready2__len 4
#define MA_core__asense__buf_adc_ready2__mask 0x0f
#define MA_core__asense__buf_adc_ready2__shift 0x00
#define MA_core__asense__buf_adc_ready2__reset 0x09
#define MA_core__asense__buf_adc_ready2__inputonly 0
#define set_obj_MA_core__asense__buf_adc_ready2(o,y) ({ uint8_t __ret = o.read(495); o.write(495,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__asense__buf_adc_ready2(y) ({ uint8_t __ret = ma_read_byte(495); ma_write_byte(495,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__asense__buf_adc_ready2(o) (o.read(495) & 0x0f)>>0
#define get_MA_core__asense__buf_adc_ready2() ( ma_read_byte(495) & 0x0f)>>0
//------------------------------------------------------------------------------core__asense__ref_int_dur---
// 
#define MA_core__asense__ref_int_dur__a 0x01ef
#define MA_core__asense__ref_int_dur__len 4
#define MA_core__asense__ref_int_dur__mask 0xf0
#define MA_core__asense__ref_int_dur__shift 0x04
#define MA_core__asense__ref_int_dur__reset 0x06
#define MA_core__asense__ref_int_dur__inputonly 0
#define set_obj_MA_core__asense__ref_int_dur(o,y) ({ uint8_t __ret = o.read(495); o.write(495,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__asense__ref_int_dur(y) ({ uint8_t __ret = ma_read_byte(495); ma_write_byte(495,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__asense__ref_int_dur(o) (o.read(495) & 0xf0)>>4
#define get_MA_core__asense__ref_int_dur() ( ma_read_byte(495) & 0xf0)>>4
//------------------------------------------------------------------------------core__asense__int0_start---
// 
#define MA_core__asense__int0_start__a 0x01f0
#define MA_core__asense__int0_start__len 8
#define MA_core__asense__int0_start__mask 0xff
#define MA_core__asense__int0_start__shift 0x00
#define MA_core__asense__int0_start__reset 0x0c
#define MA_core__asense__int0_start__inputonly 0
#define set_obj_MA_core__asense__int0_start(o,y) o.write(496,y);
#define set_MA_core__asense__int0_start(y) ma_write_byte(496,y);
#define get_obj_MA_core__asense__int0_start(o) (o.read(496) & 0xff)>>0
#define get_MA_core__asense__int0_start() ( ma_read_byte(496) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__int1_start---
// 
#define MA_core__asense__int1_start__a 0x01f1
#define MA_core__asense__int1_start__len 8
#define MA_core__asense__int1_start__mask 0xff
#define MA_core__asense__int1_start__shift 0x00
#define MA_core__asense__int1_start__reset 0x1f
#define MA_core__asense__int1_start__inputonly 0
#define set_obj_MA_core__asense__int1_start(o,y) o.write(497,y);
#define set_MA_core__asense__int1_start(y) ma_write_byte(497,y);
#define get_obj_MA_core__asense__int1_start(o) (o.read(497) & 0xff)>>0
#define get_MA_core__asense__int1_start() ( ma_read_byte(497) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__int_zero_dur---
// 
#define MA_core__asense__int_zero_dur__a 0x01f3
#define MA_core__asense__int_zero_dur__len 4
#define MA_core__asense__int_zero_dur__mask 0x0f
#define MA_core__asense__int_zero_dur__shift 0x00
#define MA_core__asense__int_zero_dur__reset 0x05
#define MA_core__asense__int_zero_dur__inputonly 0
#define set_obj_MA_core__asense__int_zero_dur(o,y) ({ uint8_t __ret = o.read(499); o.write(499,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__asense__int_zero_dur(y) ({ uint8_t __ret = ma_read_byte(499); ma_write_byte(499,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__asense__int_zero_dur(o) (o.read(499) & 0x0f)>>0
#define get_MA_core__asense__int_zero_dur() ( ma_read_byte(499) & 0x0f)>>0
//------------------------------------------------------------------------------core__asense__int_run_dur---
// 
#define MA_core__asense__int_run_dur__a 0x01f3
#define MA_core__asense__int_run_dur__len 4
#define MA_core__asense__int_run_dur__mask 0xf0
#define MA_core__asense__int_run_dur__shift 0x04
#define MA_core__asense__int_run_dur__reset 0x07
#define MA_core__asense__int_run_dur__inputonly 0
#define set_obj_MA_core__asense__int_run_dur(o,y) ({ uint8_t __ret = o.read(499); o.write(499,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__asense__int_run_dur(y) ({ uint8_t __ret = ma_read_byte(499); ma_write_byte(499,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__asense__int_run_dur(o) (o.read(499) & 0xf0)>>4
#define get_MA_core__asense__int_run_dur() ( ma_read_byte(499) & 0xf0)>>4
//------------------------------------------------------------------------------core__asense__int_adc_ready1---
// 
#define MA_core__asense__int_adc_ready1__a 0x01f4
#define MA_core__asense__int_adc_ready1__len 4
#define MA_core__asense__int_adc_ready1__mask 0x0f
#define MA_core__asense__int_adc_ready1__shift 0x00
#define MA_core__asense__int_adc_ready1__reset 0x05
#define MA_core__asense__int_adc_ready1__inputonly 0
#define set_obj_MA_core__asense__int_adc_ready1(o,y) ({ uint8_t __ret = o.read(500); o.write(500,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__asense__int_adc_ready1(y) ({ uint8_t __ret = ma_read_byte(500); ma_write_byte(500,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__asense__int_adc_ready1(o) (o.read(500) & 0x0f)>>0
#define get_MA_core__asense__int_adc_ready1() ( ma_read_byte(500) & 0x0f)>>0
//------------------------------------------------------------------------------core__asense__int_adc_ready2---
// 
#define MA_core__asense__int_adc_ready2__a 0x01f4
#define MA_core__asense__int_adc_ready2__len 4
#define MA_core__asense__int_adc_ready2__mask 0xf0
#define MA_core__asense__int_adc_ready2__shift 0x04
#define MA_core__asense__int_adc_ready2__reset 0x0a
#define MA_core__asense__int_adc_ready2__inputonly 0
#define set_obj_MA_core__asense__int_adc_ready2(o,y) ({ uint8_t __ret = o.read(500); o.write(500,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__asense__int_adc_ready2(y) ({ uint8_t __ret = ma_read_byte(500); ma_write_byte(500,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__asense__int_adc_ready2(o) (o.read(500) & 0xf0)>>4
#define get_MA_core__asense__int_adc_ready2() ( ma_read_byte(500) & 0xf0)>>4
//------------------------------------------------------------------------------core__asense__pwm_clk_div_base---
// 
#define MA_core__asense__pwm_clk_div_base__a 0x01f5
#define MA_core__asense__pwm_clk_div_base__len 3
#define MA_core__asense__pwm_clk_div_base__mask 0x07
#define MA_core__asense__pwm_clk_div_base__shift 0x00
#define MA_core__asense__pwm_clk_div_base__reset 0x02
#define MA_core__asense__pwm_clk_div_base__inputonly 0
#define set_obj_MA_core__asense__pwm_clk_div_base(o,y) ({ uint8_t __ret = o.read(501); o.write(501,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__asense__pwm_clk_div_base(y) ({ uint8_t __ret = ma_read_byte(501); ma_write_byte(501,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__asense__pwm_clk_div_base(o) (o.read(501) & 0x07)>>0
#define get_MA_core__asense__pwm_clk_div_base() ( ma_read_byte(501) & 0x07)>>0
//------------------------------------------------------------------------------core__asense__adc_debug_pcm__0---
// 
#define MA_core__asense__adc_debug_pcm__0__a 0x01f6
#define MA_core__asense__adc_debug_pcm__0__len 8
#define MA_core__asense__adc_debug_pcm__0__mask 0xff
#define MA_core__asense__adc_debug_pcm__0__shift 0x00
#define MA_core__asense__adc_debug_pcm__0__reset 0x00
#define MA_core__asense__adc_debug_pcm__0__inputonly 1
#define set_obj_MA_core__asense__adc_debug_pcm__0(o,y) o.write(502,y);
#define set_MA_core__asense__adc_debug_pcm__0(y) ma_write_byte(502,y);
#define get_obj_MA_core__asense__adc_debug_pcm__0(o) (o.read(502) & 0xff)>>0
#define get_MA_core__asense__adc_debug_pcm__0() ( ma_read_byte(502) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__adc_debug_pcm__1---
// 
#define MA_core__asense__adc_debug_pcm__1__a 0x01f7
#define MA_core__asense__adc_debug_pcm__1__len 8
#define MA_core__asense__adc_debug_pcm__1__mask 0xff
#define MA_core__asense__adc_debug_pcm__1__shift 0x00
#define MA_core__asense__adc_debug_pcm__1__reset 0x00
#define MA_core__asense__adc_debug_pcm__1__inputonly 1
#define set_obj_MA_core__asense__adc_debug_pcm__1(o,y) o.write(503,y);
#define set_MA_core__asense__adc_debug_pcm__1(y) ma_write_byte(503,y);
#define get_obj_MA_core__asense__adc_debug_pcm__1(o) (o.read(503) & 0xff)>>0
#define get_MA_core__asense__adc_debug_pcm__1() ( ma_read_byte(503) & 0xff)>>0
//------------------------------------------------------------------------------core__asense__adc_c_clamp_en---
// 
#define MA_core__asense__adc_c_clamp_en__a 0x01e9
#define MA_core__asense__adc_c_clamp_en__len 1
#define MA_core__asense__adc_c_clamp_en__mask 0x80
#define MA_core__asense__adc_c_clamp_en__shift 0x07
#define MA_core__asense__adc_c_clamp_en__reset 0x00
#define MA_core__asense__adc_c_clamp_en__inputonly 0
#define set_obj_MA_core__asense__adc_c_clamp_en(o,y) ({ uint8_t __ret = o.read(489); o.write(489,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__asense__adc_c_clamp_en(y) ({ uint8_t __ret = ma_read_byte(489); ma_write_byte(489,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__asense__adc_c_clamp_en(o) (o.read(489) & 0x80)>>7
#define get_MA_core__asense__adc_c_clamp_en() ( ma_read_byte(489) & 0x80)>>7
//------------------------------------------------------------------------------core__asense__int_zero_clamp_disable---
// 
#define MA_core__asense__int_zero_clamp_disable__a 0x01f2
#define MA_core__asense__int_zero_clamp_disable__len 1
#define MA_core__asense__int_zero_clamp_disable__mask 0x01
#define MA_core__asense__int_zero_clamp_disable__shift 0x00
#define MA_core__asense__int_zero_clamp_disable__reset 0x01
#define MA_core__asense__int_zero_clamp_disable__inputonly 0
#define set_obj_MA_core__asense__int_zero_clamp_disable(o,y) ({ uint8_t __ret = o.read(498); o.write(498,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__asense__int_zero_clamp_disable(y) ({ uint8_t __ret = ma_read_byte(498); ma_write_byte(498,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__asense__int_zero_clamp_disable(o) (o.read(498) & 0x01)>>0
#define get_MA_core__asense__int_zero_clamp_disable() ( ma_read_byte(498) & 0x01)>>0
//------------------------------------------------------------------------------core__asense__int_zero_clamp_perma---
// 
#define MA_core__asense__int_zero_clamp_perma__a 0x01f2
#define MA_core__asense__int_zero_clamp_perma__len 1
#define MA_core__asense__int_zero_clamp_perma__mask 0x02
#define MA_core__asense__int_zero_clamp_perma__shift 0x01
#define MA_core__asense__int_zero_clamp_perma__reset 0x00
#define MA_core__asense__int_zero_clamp_perma__inputonly 0
#define set_obj_MA_core__asense__int_zero_clamp_perma(o,y) ({ uint8_t __ret = o.read(498); o.write(498,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__asense__int_zero_clamp_perma(y) ({ uint8_t __ret = ma_read_byte(498); ma_write_byte(498,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__asense__int_zero_clamp_perma(o) (o.read(498) & 0x02)>>1
#define get_MA_core__asense__int_zero_clamp_perma() ( ma_read_byte(498) & 0x02)>>1
//------------------------------------------------------------------------------core__asense__int_zero_clamp_dur---
// 
#define MA_core__asense__int_zero_clamp_dur__a 0x01f2
#define MA_core__asense__int_zero_clamp_dur__len 4
#define MA_core__asense__int_zero_clamp_dur__mask 0x3c
#define MA_core__asense__int_zero_clamp_dur__shift 0x02
#define MA_core__asense__int_zero_clamp_dur__reset 0x03
#define MA_core__asense__int_zero_clamp_dur__inputonly 0
#define set_obj_MA_core__asense__int_zero_clamp_dur(o,y) ({ uint8_t __ret = o.read(498); o.write(498,(__ret&0xc3)|((y<<2)&0x3c)); })
#define set_MA_core__asense__int_zero_clamp_dur(y) ({ uint8_t __ret = ma_read_byte(498); ma_write_byte(498,(__ret&0xc3)|((y<<2)&0x3c)); })
#define get_obj_MA_core__asense__int_zero_clamp_dur(o) (o.read(498) & 0x3c)>>2
#define get_MA_core__asense__int_zero_clamp_dur() ( ma_read_byte(498) & 0x3c)>>2
//------------------------------------------------------------------------------core__asense__adc_c_clamp_dur---
// 
#define MA_core__asense__adc_c_clamp_dur__a 0x01ea
#define MA_core__asense__adc_c_clamp_dur__len 4
#define MA_core__asense__adc_c_clamp_dur__mask 0x0f
#define MA_core__asense__adc_c_clamp_dur__shift 0x00
#define MA_core__asense__adc_c_clamp_dur__reset 0x03
#define MA_core__asense__adc_c_clamp_dur__inputonly 0
#define set_obj_MA_core__asense__adc_c_clamp_dur(o,y) ({ uint8_t __ret = o.read(490); o.write(490,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__asense__adc_c_clamp_dur(y) ({ uint8_t __ret = ma_read_byte(490); ma_write_byte(490,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__asense__adc_c_clamp_dur(o) (o.read(490) & 0x0f)>>0
#define get_MA_core__asense__adc_c_clamp_dur() ( ma_read_byte(490) & 0x0f)>>0
//------------------------------------------------------------------------------core__spare__spare_d_n_bits---
// 
#define MA_core__spare__spare_d_n_bits__a 0x0222
#define MA_core__spare__spare_d_n_bits__len 4
#define MA_core__spare__spare_d_n_bits__mask 0x0f
#define MA_core__spare__spare_d_n_bits__shift 0x00
#define MA_core__spare__spare_d_n_bits__reset 0x00
#define MA_core__spare__spare_d_n_bits__inputonly 0
#define set_obj_MA_core__spare__spare_d_n_bits(o,y) ({ uint8_t __ret = o.read(546); o.write(546,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__spare__spare_d_n_bits(y) ({ uint8_t __ret = ma_read_byte(546); ma_write_byte(546,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__spare__spare_d_n_bits(o) (o.read(546) & 0x0f)>>0
#define get_MA_core__spare__spare_d_n_bits() ( ma_read_byte(546) & 0x0f)>>0
//------------------------------------------------------------------------------core__spare__spare_a_n_bits---
// 
#define MA_core__spare__spare_a_n_bits__a 0x0220
#define MA_core__spare__spare_a_n_bits__len 3
#define MA_core__spare__spare_a_n_bits__mask 0x07
#define MA_core__spare__spare_a_n_bits__shift 0x00
#define MA_core__spare__spare_a_n_bits__reset 0x00
#define MA_core__spare__spare_a_n_bits__inputonly 0
#define set_obj_MA_core__spare__spare_a_n_bits(o,y) ({ uint8_t __ret = o.read(544); o.write(544,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__spare__spare_a_n_bits(y) ({ uint8_t __ret = ma_read_byte(544); ma_write_byte(544,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__spare__spare_a_n_bits(o) (o.read(544) & 0x07)>>0
#define get_MA_core__spare__spare_a_n_bits() ( ma_read_byte(544) & 0x07)>>0
//------------------------------------------------------------------------------core__spare__spare_a_s_bits---
// 
#define MA_core__spare__spare_a_s_bits__a 0x0224
#define MA_core__spare__spare_a_s_bits__len 4
#define MA_core__spare__spare_a_s_bits__mask 0x0f
#define MA_core__spare__spare_a_s_bits__shift 0x00
#define MA_core__spare__spare_a_s_bits__reset 0x00
#define MA_core__spare__spare_a_s_bits__inputonly 0
#define set_obj_MA_core__spare__spare_a_s_bits(o,y) ({ uint8_t __ret = o.read(548); o.write(548,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__spare__spare_a_s_bits(y) ({ uint8_t __ret = ma_read_byte(548); ma_write_byte(548,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__spare__spare_a_s_bits(o) (o.read(548) & 0x0f)>>0
#define get_MA_core__spare__spare_a_s_bits() ( ma_read_byte(548) & 0x0f)>>0
//------------------------------------------------------------------------------core__spare__spare_d_s_bits---
// 
#define MA_core__spare__spare_d_s_bits__a 0x0226
#define MA_core__spare__spare_d_s_bits__len 6
#define MA_core__spare__spare_d_s_bits__mask 0x3f
#define MA_core__spare__spare_d_s_bits__shift 0x00
#define MA_core__spare__spare_d_s_bits__reset 0x00
#define MA_core__spare__spare_d_s_bits__inputonly 0
#define set_obj_MA_core__spare__spare_d_s_bits(o,y) ({ uint8_t __ret = o.read(550); o.write(550,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_core__spare__spare_d_s_bits(y) ({ uint8_t __ret = ma_read_byte(550); ma_write_byte(550,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_core__spare__spare_d_s_bits(o) (o.read(550) & 0x3f)>>0
#define get_MA_core__spare__spare_d_s_bits() ( ma_read_byte(550) & 0x3f)>>0
//------------------------------------------------------------------------------core__spare__spare_d_n_mon---
// 
#define MA_core__spare__spare_d_n_mon__a 0x0223
#define MA_core__spare__spare_d_n_mon__len 4
#define MA_core__spare__spare_d_n_mon__mask 0x0f
#define MA_core__spare__spare_d_n_mon__shift 0x00
#define MA_core__spare__spare_d_n_mon__reset 0x00
#define MA_core__spare__spare_d_n_mon__inputonly 1
#define set_obj_MA_core__spare__spare_d_n_mon(o,y) ({ uint8_t __ret = o.read(547); o.write(547,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__spare__spare_d_n_mon(y) ({ uint8_t __ret = ma_read_byte(547); ma_write_byte(547,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__spare__spare_d_n_mon(o) (o.read(547) & 0x0f)>>0
#define get_MA_core__spare__spare_d_n_mon() ( ma_read_byte(547) & 0x0f)>>0
//------------------------------------------------------------------------------core__spare__spare_a_n_mon---
// 
#define MA_core__spare__spare_a_n_mon__a 0x0221
#define MA_core__spare__spare_a_n_mon__len 2
#define MA_core__spare__spare_a_n_mon__mask 0x03
#define MA_core__spare__spare_a_n_mon__shift 0x00
#define MA_core__spare__spare_a_n_mon__reset 0x00
#define MA_core__spare__spare_a_n_mon__inputonly 1
#define set_obj_MA_core__spare__spare_a_n_mon(o,y) ({ uint8_t __ret = o.read(545); o.write(545,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__spare__spare_a_n_mon(y) ({ uint8_t __ret = ma_read_byte(545); ma_write_byte(545,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__spare__spare_a_n_mon(o) (o.read(545) & 0x03)>>0
#define get_MA_core__spare__spare_a_n_mon() ( ma_read_byte(545) & 0x03)>>0
//------------------------------------------------------------------------------core__spare__spare_a_s_mon---
// 
#define MA_core__spare__spare_a_s_mon__a 0x0225
#define MA_core__spare__spare_a_s_mon__len 4
#define MA_core__spare__spare_a_s_mon__mask 0x0f
#define MA_core__spare__spare_a_s_mon__shift 0x00
#define MA_core__spare__spare_a_s_mon__reset 0x00
#define MA_core__spare__spare_a_s_mon__inputonly 1
#define set_obj_MA_core__spare__spare_a_s_mon(o,y) ({ uint8_t __ret = o.read(549); o.write(549,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__spare__spare_a_s_mon(y) ({ uint8_t __ret = ma_read_byte(549); ma_write_byte(549,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__spare__spare_a_s_mon(o) (o.read(549) & 0x0f)>>0
#define get_MA_core__spare__spare_a_s_mon() ( ma_read_byte(549) & 0x0f)>>0
//------------------------------------------------------------------------------core__spare__spare_d_s_mon---
// 
#define MA_core__spare__spare_d_s_mon__a 0x0227
#define MA_core__spare__spare_d_s_mon__len 8
#define MA_core__spare__spare_d_s_mon__mask 0xff
#define MA_core__spare__spare_d_s_mon__shift 0x00
#define MA_core__spare__spare_d_s_mon__reset 0x00
#define MA_core__spare__spare_d_s_mon__inputonly 1
#define set_obj_MA_core__spare__spare_d_s_mon(o,y) o.write(551,y);
#define set_MA_core__spare__spare_d_s_mon(y) ma_write_byte(551,y);
#define get_obj_MA_core__spare__spare_d_s_mon(o) (o.read(551) & 0xff)>>0
#define get_MA_core__spare__spare_d_s_mon() ( ma_read_byte(551) & 0xff)>>0
//------------------------------------------------------------------------------core__spare__spare_bits_0---
// 
#define MA_core__spare__spare_bits_0__a 0x0228
#define MA_core__spare__spare_bits_0__len 7
#define MA_core__spare__spare_bits_0__mask 0xfe
#define MA_core__spare__spare_bits_0__shift 0x01
#define MA_core__spare__spare_bits_0__reset 0x00
#define MA_core__spare__spare_bits_0__inputonly 0
#define set_obj_MA_core__spare__spare_bits_0(o,y) ({ uint8_t __ret = o.read(552); o.write(552,(__ret&0x01)|((y<<1)&0xfe)); })
#define set_MA_core__spare__spare_bits_0(y) ({ uint8_t __ret = ma_read_byte(552); ma_write_byte(552,(__ret&0x01)|((y<<1)&0xfe)); })
#define get_obj_MA_core__spare__spare_bits_0(o) (o.read(552) & 0xfe)>>1
#define get_MA_core__spare__spare_bits_0() ( ma_read_byte(552) & 0xfe)>>1
//------------------------------------------------------------------------------core__spare__spare_bits_1---
// 
#define MA_core__spare__spare_bits_1__a 0x0229
#define MA_core__spare__spare_bits_1__len 8
#define MA_core__spare__spare_bits_1__mask 0xff
#define MA_core__spare__spare_bits_1__shift 0x00
#define MA_core__spare__spare_bits_1__reset 0x00
#define MA_core__spare__spare_bits_1__inputonly 0
#define set_obj_MA_core__spare__spare_bits_1(o,y) o.write(553,y);
#define set_MA_core__spare__spare_bits_1(y) ma_write_byte(553,y);
#define get_obj_MA_core__spare__spare_bits_1(o) (o.read(553) & 0xff)>>0
#define get_MA_core__spare__spare_bits_1() ( ma_read_byte(553) & 0xff)>>0
//------------------------------------------------------------------------------core__spare__spare_bits_0_0---
// [rev1_1] Fly-cap balancing enable. 0: Force disable balancing, 1: Enable regular fly-cap balancing. 
#define MA_core__spare__spare_bits_0_0__a 0x0228
#define MA_core__spare__spare_bits_0_0__len 1
#define MA_core__spare__spare_bits_0_0__mask 0x01
#define MA_core__spare__spare_bits_0_0__shift 0x00
#define MA_core__spare__spare_bits_0_0__reset 0x00
#define MA_core__spare__spare_bits_0_0__inputonly 0
#define set_obj_MA_core__spare__spare_bits_0_0(o,y) ({ uint8_t __ret = o.read(552); o.write(552,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__spare__spare_bits_0_0(y) ({ uint8_t __ret = ma_read_byte(552); ma_write_byte(552,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__spare__spare_bits_0_0(o) (o.read(552) & 0x01)>>0
#define get_MA_core__spare__spare_bits_0_0() ( ma_read_byte(552) & 0x01)>>0
//------------------------------------------------------------------------------core__test__i2c_in_en---
// 
#define MA_core__test__i2c_in_en__a 0x0200
#define MA_core__test__i2c_in_en__len 1
#define MA_core__test__i2c_in_en__mask 0x01
#define MA_core__test__i2c_in_en__shift 0x00
#define MA_core__test__i2c_in_en__reset 0x01
#define MA_core__test__i2c_in_en__inputonly 0
#define set_obj_MA_core__test__i2c_in_en(o,y) ({ uint8_t __ret = o.read(512); o.write(512,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__test__i2c_in_en(y) ({ uint8_t __ret = ma_read_byte(512); ma_write_byte(512,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__test__i2c_in_en(o) (o.read(512) & 0x01)>>0
#define get_MA_core__test__i2c_in_en() ( ma_read_byte(512) & 0x01)>>0
//------------------------------------------------------------------------------core__test__i2c_scl_out_en---
// 
#define MA_core__test__i2c_scl_out_en__a 0x0200
#define MA_core__test__i2c_scl_out_en__len 1
#define MA_core__test__i2c_scl_out_en__mask 0x02
#define MA_core__test__i2c_scl_out_en__shift 0x01
#define MA_core__test__i2c_scl_out_en__reset 0x01
#define MA_core__test__i2c_scl_out_en__inputonly 0
#define set_obj_MA_core__test__i2c_scl_out_en(o,y) ({ uint8_t __ret = o.read(512); o.write(512,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__test__i2c_scl_out_en(y) ({ uint8_t __ret = ma_read_byte(512); ma_write_byte(512,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__test__i2c_scl_out_en(o) (o.read(512) & 0x02)>>1
#define get_MA_core__test__i2c_scl_out_en() ( ma_read_byte(512) & 0x02)>>1
//------------------------------------------------------------------------------core__test__i2c_sda_out_en---
// 
#define MA_core__test__i2c_sda_out_en__a 0x0200
#define MA_core__test__i2c_sda_out_en__len 1
#define MA_core__test__i2c_sda_out_en__mask 0x04
#define MA_core__test__i2c_sda_out_en__shift 0x02
#define MA_core__test__i2c_sda_out_en__reset 0x01
#define MA_core__test__i2c_sda_out_en__inputonly 0
#define set_obj_MA_core__test__i2c_sda_out_en(o,y) ({ uint8_t __ret = o.read(512); o.write(512,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__test__i2c_sda_out_en(y) ({ uint8_t __ret = ma_read_byte(512); ma_write_byte(512,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__test__i2c_sda_out_en(o) (o.read(512) & 0x04)>>2
#define get_MA_core__test__i2c_sda_out_en() ( ma_read_byte(512) & 0x04)>>2
//------------------------------------------------------------------------------core__test__sif_mode_i2c---
// 
#define MA_core__test__sif_mode_i2c__a 0x0200
#define MA_core__test__sif_mode_i2c__len 1
#define MA_core__test__sif_mode_i2c__mask 0x08
#define MA_core__test__sif_mode_i2c__shift 0x03
#define MA_core__test__sif_mode_i2c__reset 0x01
#define MA_core__test__sif_mode_i2c__inputonly 0
#define set_obj_MA_core__test__sif_mode_i2c(o,y) ({ uint8_t __ret = o.read(512); o.write(512,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__test__sif_mode_i2c(y) ({ uint8_t __ret = ma_read_byte(512); ma_write_byte(512,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__test__sif_mode_i2c(o) (o.read(512) & 0x08)>>3
#define get_MA_core__test__sif_mode_i2c() ( ma_read_byte(512) & 0x08)>>3
//------------------------------------------------------------------------------core__test__xpin_mode---
// 0=>default opendrain, 1=>digital, 2=>power, 3=>Analog unbuf, 4=>Analog Cur, 5=>Analog buffer
#define MA_core__test__xpin_mode__a 0x0201
#define MA_core__test__xpin_mode__len 3
#define MA_core__test__xpin_mode__mask 0x07
#define MA_core__test__xpin_mode__shift 0x00
#define MA_core__test__xpin_mode__reset 0x00
#define MA_core__test__xpin_mode__inputonly 0
#define set_obj_MA_core__test__xpin_mode(o,y) ({ uint8_t __ret = o.read(513); o.write(513,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__test__xpin_mode(y) ({ uint8_t __ret = ma_read_byte(513); ma_write_byte(513,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__test__xpin_mode(o) (o.read(513) & 0x07)>>0
#define get_MA_core__test__xpin_mode() ( ma_read_byte(513) & 0x07)>>0
//------------------------------------------------------------------------------core__test__xpin_cfg---
// 
#define MA_core__test__xpin_cfg__a 0x0201
#define MA_core__test__xpin_cfg__len 3
#define MA_core__test__xpin_cfg__mask 0x70
#define MA_core__test__xpin_cfg__shift 0x04
#define MA_core__test__xpin_cfg__reset 0x01
#define MA_core__test__xpin_cfg__inputonly 0
#define set_obj_MA_core__test__xpin_cfg(o,y) ({ uint8_t __ret = o.read(513); o.write(513,(__ret&0x8f)|((y<<4)&0x70)); })
#define set_MA_core__test__xpin_cfg(y) ({ uint8_t __ret = ma_read_byte(513); ma_write_byte(513,(__ret&0x8f)|((y<<4)&0x70)); })
#define get_obj_MA_core__test__xpin_cfg(o) (o.read(513) & 0x70)>>4
#define get_MA_core__test__xpin_cfg() ( ma_read_byte(513) & 0x70)>>4
//------------------------------------------------------------------------------core__test__xpin_cfg_force---
// 
#define MA_core__test__xpin_cfg_force__a 0x0201
#define MA_core__test__xpin_cfg_force__len 1
#define MA_core__test__xpin_cfg_force__mask 0x80
#define MA_core__test__xpin_cfg_force__shift 0x07
#define MA_core__test__xpin_cfg_force__reset 0x00
#define MA_core__test__xpin_cfg_force__inputonly 0
#define set_obj_MA_core__test__xpin_cfg_force(o,y) ({ uint8_t __ret = o.read(513); o.write(513,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__test__xpin_cfg_force(y) ({ uint8_t __ret = ma_read_byte(513); ma_write_byte(513,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__test__xpin_cfg_force(o) (o.read(513) & 0x80)>>7
#define get_MA_core__test__xpin_cfg_force() ( ma_read_byte(513) & 0x80)>>7
//------------------------------------------------------------------------------core__test__afir_bist_en---
// Start afir bist test
#define MA_core__test__afir_bist_en__a 0x0212
#define MA_core__test__afir_bist_en__len 1
#define MA_core__test__afir_bist_en__mask 0x01
#define MA_core__test__afir_bist_en__shift 0x00
#define MA_core__test__afir_bist_en__reset 0x00
#define MA_core__test__afir_bist_en__inputonly 0
#define set_obj_MA_core__test__afir_bist_en(o,y) ({ uint8_t __ret = o.read(530); o.write(530,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__test__afir_bist_en(y) ({ uint8_t __ret = ma_read_byte(530); ma_write_byte(530,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__test__afir_bist_en(o) (o.read(530) & 0x01)>>0
#define get_MA_core__test__afir_bist_en() ( ma_read_byte(530) & 0x01)>>0
//------------------------------------------------------------------------------core__test__afir_bist_results_0---
// afir_bist_results_0
#define MA_core__test__afir_bist_results_0__a 0x0212
#define MA_core__test__afir_bist_results_0__len 1
#define MA_core__test__afir_bist_results_0__mask 0x20
#define MA_core__test__afir_bist_results_0__shift 0x05
#define MA_core__test__afir_bist_results_0__reset 0x00
#define MA_core__test__afir_bist_results_0__inputonly 1
#define set_obj_MA_core__test__afir_bist_results_0(o,y) ({ uint8_t __ret = o.read(530); o.write(530,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__test__afir_bist_results_0(y) ({ uint8_t __ret = ma_read_byte(530); ma_write_byte(530,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__test__afir_bist_results_0(o) (o.read(530) & 0x20)>>5
#define get_MA_core__test__afir_bist_results_0() ( ma_read_byte(530) & 0x20)>>5
//------------------------------------------------------------------------------core__test__afir_bist_cfg---
// Afir bist mode
#define MA_core__test__afir_bist_cfg__a 0x0212
#define MA_core__test__afir_bist_cfg__len 2
#define MA_core__test__afir_bist_cfg__mask 0x18
#define MA_core__test__afir_bist_cfg__shift 0x03
#define MA_core__test__afir_bist_cfg__reset 0x00
#define MA_core__test__afir_bist_cfg__inputonly 0
#define set_obj_MA_core__test__afir_bist_cfg(o,y) ({ uint8_t __ret = o.read(530); o.write(530,(__ret&0xe7)|((y<<3)&0x18)); })
#define set_MA_core__test__afir_bist_cfg(y) ({ uint8_t __ret = ma_read_byte(530); ma_write_byte(530,(__ret&0xe7)|((y<<3)&0x18)); })
#define get_obj_MA_core__test__afir_bist_cfg(o) (o.read(530) & 0x18)>>3
#define get_MA_core__test__afir_bist_cfg() ( ma_read_byte(530) & 0x18)>>3
//------------------------------------------------------------------------------core__test__afir_bist_results_1---
// afir_bist_results_1
#define MA_core__test__afir_bist_results_1__a 0x0212
#define MA_core__test__afir_bist_results_1__len 1
#define MA_core__test__afir_bist_results_1__mask 0x40
#define MA_core__test__afir_bist_results_1__shift 0x06
#define MA_core__test__afir_bist_results_1__reset 0x00
#define MA_core__test__afir_bist_results_1__inputonly 1
#define set_obj_MA_core__test__afir_bist_results_1(o,y) ({ uint8_t __ret = o.read(530); o.write(530,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__test__afir_bist_results_1(y) ({ uint8_t __ret = ma_read_byte(530); ma_write_byte(530,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__test__afir_bist_results_1(o) (o.read(530) & 0x40)>>6
#define get_MA_core__test__afir_bist_results_1() ( ma_read_byte(530) & 0x40)>>6
//------------------------------------------------------------------------------core__test__en_clk_pad---
// High to enable DCO clock probe pad
#define MA_core__test__en_clk_pad__a 0x0206
#define MA_core__test__en_clk_pad__len 1
#define MA_core__test__en_clk_pad__mask 0x10
#define MA_core__test__en_clk_pad__shift 0x04
#define MA_core__test__en_clk_pad__reset 0x00
#define MA_core__test__en_clk_pad__inputonly 0
#define set_obj_MA_core__test__en_clk_pad(o,y) ({ uint8_t __ret = o.read(518); o.write(518,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__test__en_clk_pad(y) ({ uint8_t __ret = ma_read_byte(518); ma_write_byte(518,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__test__en_clk_pad(o) (o.read(518) & 0x10)>>4
#define get_MA_core__test__en_clk_pad() ( ma_read_byte(518) & 0x10)>>4
//------------------------------------------------------------------------------core__test__nreset_lock---
// High to lock device in non-reset state
#define MA_core__test__nreset_lock__a 0x0206
#define MA_core__test__nreset_lock__len 1
#define MA_core__test__nreset_lock__mask 0x20
#define MA_core__test__nreset_lock__shift 0x05
#define MA_core__test__nreset_lock__reset 0x00
#define MA_core__test__nreset_lock__inputonly 0
#define set_obj_MA_core__test__nreset_lock(o,y) ({ uint8_t __ret = o.read(518); o.write(518,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__test__nreset_lock(y) ({ uint8_t __ret = ma_read_byte(518); ma_write_byte(518,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__test__nreset_lock(o) (o.read(518) & 0x20)>>5
#define get_MA_core__test__nreset_lock() ( ma_read_byte(518) & 0x20)>>5
//------------------------------------------------------------------------------core__test__d0_mux_sel---
// Debug 0 (nclip) mux select
#define MA_core__test__d0_mux_sel__a 0x0202
#define MA_core__test__d0_mux_sel__len 8
#define MA_core__test__d0_mux_sel__mask 0xff
#define MA_core__test__d0_mux_sel__shift 0x00
#define MA_core__test__d0_mux_sel__reset 0x00
#define MA_core__test__d0_mux_sel__inputonly 0
#define set_obj_MA_core__test__d0_mux_sel(o,y) o.write(514,y);
#define set_MA_core__test__d0_mux_sel(y) ma_write_byte(514,y);
#define get_obj_MA_core__test__d0_mux_sel(o) (o.read(514) & 0xff)>>0
#define get_MA_core__test__d0_mux_sel() ( ma_read_byte(514) & 0xff)>>0
//------------------------------------------------------------------------------core__test__d1_mux_sel---
// Debug 1 (nerr) mux select
#define MA_core__test__d1_mux_sel__a 0x0203
#define MA_core__test__d1_mux_sel__len 8
#define MA_core__test__d1_mux_sel__mask 0xff
#define MA_core__test__d1_mux_sel__shift 0x00
#define MA_core__test__d1_mux_sel__reset 0x00
#define MA_core__test__d1_mux_sel__inputonly 0
#define set_obj_MA_core__test__d1_mux_sel(o,y) o.write(515,y);
#define set_MA_core__test__d1_mux_sel(y) ma_write_byte(515,y);
#define get_obj_MA_core__test__d1_mux_sel(o) (o.read(515) & 0xff)>>0
#define get_MA_core__test__d1_mux_sel() ( ma_read_byte(515) & 0xff)>>0
//------------------------------------------------------------------------------core__test__revision0---
// Subversion revision of the register bank
#define MA_core__test__revision0__a 0x0209
#define MA_core__test__revision0__len 8
#define MA_core__test__revision0__mask 0xff
#define MA_core__test__revision0__shift 0x00
#define MA_core__test__revision0__reset 0x00
#define MA_core__test__revision0__inputonly 1
#define set_obj_MA_core__test__revision0(o,y) o.write(521,y);
#define set_MA_core__test__revision0(y) ma_write_byte(521,y);
#define get_obj_MA_core__test__revision0(o) (o.read(521) & 0xff)>>0
#define get_MA_core__test__revision0() ( ma_read_byte(521) & 0xff)>>0
//------------------------------------------------------------------------------core__test__revision1---
// Subversion revision of the register bank
#define MA_core__test__revision1__a 0x020a
#define MA_core__test__revision1__len 8
#define MA_core__test__revision1__mask 0xff
#define MA_core__test__revision1__shift 0x00
#define MA_core__test__revision1__reset 0x00
#define MA_core__test__revision1__inputonly 1
#define set_obj_MA_core__test__revision1(o,y) o.write(522,y);
#define set_MA_core__test__revision1(y) ma_write_byte(522,y);
#define get_obj_MA_core__test__revision1(o) (o.read(522) & 0xff)>>0
#define get_MA_core__test__revision1() ( ma_read_byte(522) & 0xff)>>0
//------------------------------------------------------------------------------core__test__dsp_ram_pm_bist---
// DSP program memory bist config
#define MA_core__test__dsp_ram_pm_bist__a 0x020b
#define MA_core__test__dsp_ram_pm_bist__len 4
#define MA_core__test__dsp_ram_pm_bist__mask 0xf0
#define MA_core__test__dsp_ram_pm_bist__shift 0x04
#define MA_core__test__dsp_ram_pm_bist__reset 0x00
#define MA_core__test__dsp_ram_pm_bist__inputonly 0
#define set_obj_MA_core__test__dsp_ram_pm_bist(o,y) ({ uint8_t __ret = o.read(523); o.write(523,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_core__test__dsp_ram_pm_bist(y) ({ uint8_t __ret = ma_read_byte(523); ma_write_byte(523,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_core__test__dsp_ram_pm_bist(o) (o.read(523) & 0xf0)>>4
#define get_MA_core__test__dsp_ram_pm_bist() ( ma_read_byte(523) & 0xf0)>>4
//------------------------------------------------------------------------------core__test__dsp_ram_dm_bist---
// DSP data memory bist config
#define MA_core__test__dsp_ram_dm_bist__a 0x020b
#define MA_core__test__dsp_ram_dm_bist__len 4
#define MA_core__test__dsp_ram_dm_bist__mask 0x0f
#define MA_core__test__dsp_ram_dm_bist__shift 0x00
#define MA_core__test__dsp_ram_dm_bist__reset 0x00
#define MA_core__test__dsp_ram_dm_bist__inputonly 0
#define set_obj_MA_core__test__dsp_ram_dm_bist(o,y) ({ uint8_t __ret = o.read(523); o.write(523,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_core__test__dsp_ram_dm_bist(y) ({ uint8_t __ret = ma_read_byte(523); ma_write_byte(523,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_core__test__dsp_ram_dm_bist(o) (o.read(523) & 0x0f)>>0
#define get_MA_core__test__dsp_ram_dm_bist() ( ma_read_byte(523) & 0x0f)>>0
//------------------------------------------------------------------------------core__test__dsp_ram_pm_status---
// DSP program memory bist status
#define MA_core__test__dsp_ram_pm_status__a 0x020c
#define MA_core__test__dsp_ram_pm_status__len 8
#define MA_core__test__dsp_ram_pm_status__mask 0xff
#define MA_core__test__dsp_ram_pm_status__shift 0x00
#define MA_core__test__dsp_ram_pm_status__reset 0x00
#define MA_core__test__dsp_ram_pm_status__inputonly 1
#define set_obj_MA_core__test__dsp_ram_pm_status(o,y) o.write(524,y);
#define set_MA_core__test__dsp_ram_pm_status(y) ma_write_byte(524,y);
#define get_obj_MA_core__test__dsp_ram_pm_status(o) (o.read(524) & 0xff)>>0
#define get_MA_core__test__dsp_ram_pm_status() ( ma_read_byte(524) & 0xff)>>0
//------------------------------------------------------------------------------core__test__dsp_ram_dm_status---
// DSP data memory bist status
#define MA_core__test__dsp_ram_dm_status__a 0x020d
#define MA_core__test__dsp_ram_dm_status__len 8
#define MA_core__test__dsp_ram_dm_status__mask 0xff
#define MA_core__test__dsp_ram_dm_status__shift 0x00
#define MA_core__test__dsp_ram_dm_status__reset 0x00
#define MA_core__test__dsp_ram_dm_status__inputonly 1
#define set_obj_MA_core__test__dsp_ram_dm_status(o,y) o.write(525,y);
#define set_MA_core__test__dsp_ram_dm_status(y) ma_write_byte(525,y);
#define get_obj_MA_core__test__dsp_ram_dm_status(o) (o.read(525) & 0xff)>>0
#define get_MA_core__test__dsp_ram_dm_status() ( ma_read_byte(525) & 0xff)>>0
//------------------------------------------------------------------------------core__test__dsp_ram_pm_addr_lo---
// DSP program memory bist address ptr low bits
#define MA_core__test__dsp_ram_pm_addr_lo__a 0x020e
#define MA_core__test__dsp_ram_pm_addr_lo__len 8
#define MA_core__test__dsp_ram_pm_addr_lo__mask 0xff
#define MA_core__test__dsp_ram_pm_addr_lo__shift 0x00
#define MA_core__test__dsp_ram_pm_addr_lo__reset 0x00
#define MA_core__test__dsp_ram_pm_addr_lo__inputonly 1
#define set_obj_MA_core__test__dsp_ram_pm_addr_lo(o,y) o.write(526,y);
#define set_MA_core__test__dsp_ram_pm_addr_lo(y) ma_write_byte(526,y);
#define get_obj_MA_core__test__dsp_ram_pm_addr_lo(o) (o.read(526) & 0xff)>>0
#define get_MA_core__test__dsp_ram_pm_addr_lo() ( ma_read_byte(526) & 0xff)>>0
//------------------------------------------------------------------------------core__test__dsp_ram_dm_addr_lo---
// DSP data memory bist address ptr low bits
#define MA_core__test__dsp_ram_dm_addr_lo__a 0x0210
#define MA_core__test__dsp_ram_dm_addr_lo__len 8
#define MA_core__test__dsp_ram_dm_addr_lo__mask 0xff
#define MA_core__test__dsp_ram_dm_addr_lo__shift 0x00
#define MA_core__test__dsp_ram_dm_addr_lo__reset 0x00
#define MA_core__test__dsp_ram_dm_addr_lo__inputonly 1
#define set_obj_MA_core__test__dsp_ram_dm_addr_lo(o,y) o.write(528,y);
#define set_MA_core__test__dsp_ram_dm_addr_lo(y) ma_write_byte(528,y);
#define get_obj_MA_core__test__dsp_ram_dm_addr_lo(o) (o.read(528) & 0xff)>>0
#define get_MA_core__test__dsp_ram_dm_addr_lo() ( ma_read_byte(528) & 0xff)>>0
//------------------------------------------------------------------------------core__test__dsp_ram_pm_addr_hi---
// DSP program memory bist address ptr high bits
#define MA_core__test__dsp_ram_pm_addr_hi__a 0x020f
#define MA_core__test__dsp_ram_pm_addr_hi__len 2
#define MA_core__test__dsp_ram_pm_addr_hi__mask 0x03
#define MA_core__test__dsp_ram_pm_addr_hi__shift 0x00
#define MA_core__test__dsp_ram_pm_addr_hi__reset 0x00
#define MA_core__test__dsp_ram_pm_addr_hi__inputonly 1
#define set_obj_MA_core__test__dsp_ram_pm_addr_hi(o,y) ({ uint8_t __ret = o.read(527); o.write(527,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__test__dsp_ram_pm_addr_hi(y) ({ uint8_t __ret = ma_read_byte(527); ma_write_byte(527,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__test__dsp_ram_pm_addr_hi(o) (o.read(527) & 0x03)>>0
#define get_MA_core__test__dsp_ram_pm_addr_hi() ( ma_read_byte(527) & 0x03)>>0
//------------------------------------------------------------------------------core__test__dsp_ram_dm_addr_hi---
// DSP data memory bist address ptr high bits
#define MA_core__test__dsp_ram_dm_addr_hi__a 0x0211
#define MA_core__test__dsp_ram_dm_addr_hi__len 2
#define MA_core__test__dsp_ram_dm_addr_hi__mask 0x03
#define MA_core__test__dsp_ram_dm_addr_hi__shift 0x00
#define MA_core__test__dsp_ram_dm_addr_hi__reset 0x00
#define MA_core__test__dsp_ram_dm_addr_hi__inputonly 1
#define set_obj_MA_core__test__dsp_ram_dm_addr_hi(o,y) ({ uint8_t __ret = o.read(529); o.write(529,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__test__dsp_ram_dm_addr_hi(y) ({ uint8_t __ret = ma_read_byte(529); ma_write_byte(529,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__test__dsp_ram_dm_addr_hi(o) (o.read(529) & 0x03)>>0
#define get_MA_core__test__dsp_ram_dm_addr_hi() ( ma_read_byte(529) & 0x03)>>0
//------------------------------------------------------------------------------core__test__d2_mux_sel---
// Debug 2 (i2s_sdo) mux select
#define MA_core__test__d2_mux_sel__a 0x0204
#define MA_core__test__d2_mux_sel__len 8
#define MA_core__test__d2_mux_sel__mask 0xff
#define MA_core__test__d2_mux_sel__shift 0x00
#define MA_core__test__d2_mux_sel__reset 0x00
#define MA_core__test__d2_mux_sel__inputonly 0
#define set_obj_MA_core__test__d2_mux_sel(o,y) o.write(516,y);
#define set_MA_core__test__d2_mux_sel(y) ma_write_byte(516,y);
#define get_obj_MA_core__test__d2_mux_sel(o) (o.read(516) & 0xff)>>0
#define get_MA_core__test__d2_mux_sel() ( ma_read_byte(516) & 0xff)>>0
//------------------------------------------------------------------------------core__test__i2s_sdo_debug_out---
// High to enable debug 2 output on i2s_sdo
#define MA_core__test__i2s_sdo_debug_out__a 0x0206
#define MA_core__test__i2s_sdo_debug_out__len 1
#define MA_core__test__i2s_sdo_debug_out__mask 0x40
#define MA_core__test__i2s_sdo_debug_out__shift 0x06
#define MA_core__test__i2s_sdo_debug_out__reset 0x00
#define MA_core__test__i2s_sdo_debug_out__inputonly 0
#define set_obj_MA_core__test__i2s_sdo_debug_out(o,y) ({ uint8_t __ret = o.read(518); o.write(518,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_core__test__i2s_sdo_debug_out(y) ({ uint8_t __ret = ma_read_byte(518); ma_write_byte(518,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_core__test__i2s_sdo_debug_out(o) (o.read(518) & 0x40)>>6
#define get_MA_core__test__i2s_sdo_debug_out() ( ma_read_byte(518) & 0x40)>>6
//------------------------------------------------------------------------------core__test__i2s_sdo_reclk_bypass---
// High to enable bypass of the output register on i2s_sdo located in the south pad segment.
#define MA_core__test__i2s_sdo_reclk_bypass__a 0x0206
#define MA_core__test__i2s_sdo_reclk_bypass__len 1
#define MA_core__test__i2s_sdo_reclk_bypass__mask 0x80
#define MA_core__test__i2s_sdo_reclk_bypass__shift 0x07
#define MA_core__test__i2s_sdo_reclk_bypass__reset 0x00
#define MA_core__test__i2s_sdo_reclk_bypass__inputonly 0
#define set_obj_MA_core__test__i2s_sdo_reclk_bypass(o,y) ({ uint8_t __ret = o.read(518); o.write(518,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__test__i2s_sdo_reclk_bypass(y) ({ uint8_t __ret = ma_read_byte(518); ma_write_byte(518,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__test__i2s_sdo_reclk_bypass(o) (o.read(518) & 0x80)>>7
#define get_MA_core__test__i2s_sdo_reclk_bypass() ( ma_read_byte(518) & 0x80)>>7
//------------------------------------------------------------------------------core__test__afir_bist_start---
// Start afir bist test
#define MA_core__test__afir_bist_start__a 0x0212
#define MA_core__test__afir_bist_start__len 1
#define MA_core__test__afir_bist_start__mask 0x02
#define MA_core__test__afir_bist_start__shift 0x01
#define MA_core__test__afir_bist_start__reset 0x00
#define MA_core__test__afir_bist_start__inputonly 0
#define set_obj_MA_core__test__afir_bist_start(o,y) ({ uint8_t __ret = o.read(530); o.write(530,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__test__afir_bist_start(y) ({ uint8_t __ret = ma_read_byte(530); ma_write_byte(530,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__test__afir_bist_start(o) (o.read(530) & 0x02)>>1
#define get_MA_core__test__afir_bist_start() ( ma_read_byte(530) & 0x02)>>1
//------------------------------------------------------------------------------core__test__afir_bist_cont---
// afir bist continuous test
#define MA_core__test__afir_bist_cont__a 0x0212
#define MA_core__test__afir_bist_cont__len 1
#define MA_core__test__afir_bist_cont__mask 0x04
#define MA_core__test__afir_bist_cont__shift 0x02
#define MA_core__test__afir_bist_cont__reset 0x00
#define MA_core__test__afir_bist_cont__inputonly 0
#define set_obj_MA_core__test__afir_bist_cont(o,y) ({ uint8_t __ret = o.read(530); o.write(530,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__test__afir_bist_cont(y) ({ uint8_t __ret = ma_read_byte(530); ma_write_byte(530,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__test__afir_bist_cont(o) (o.read(530) & 0x04)>>2
#define get_MA_core__test__afir_bist_cont() ( ma_read_byte(530) & 0x04)>>2
//------------------------------------------------------------------------------core__test__afir_bist_prbg_seed_0---
// Pseudo random bit generator seed - 10 bits
#define MA_core__test__afir_bist_prbg_seed_0__a 0x0213
#define MA_core__test__afir_bist_prbg_seed_0__len 8
#define MA_core__test__afir_bist_prbg_seed_0__mask 0xff
#define MA_core__test__afir_bist_prbg_seed_0__shift 0x00
#define MA_core__test__afir_bist_prbg_seed_0__reset 0x00
#define MA_core__test__afir_bist_prbg_seed_0__inputonly 0
#define set_obj_MA_core__test__afir_bist_prbg_seed_0(o,y) o.write(531,y);
#define set_MA_core__test__afir_bist_prbg_seed_0(y) ma_write_byte(531,y);
#define get_obj_MA_core__test__afir_bist_prbg_seed_0(o) (o.read(531) & 0xff)>>0
#define get_MA_core__test__afir_bist_prbg_seed_0() ( ma_read_byte(531) & 0xff)>>0
//------------------------------------------------------------------------------core__test__afir_bist_prbg_seed_1---
// Pseudo random bit generator seed - 10 bits
#define MA_core__test__afir_bist_prbg_seed_1__a 0x0214
#define MA_core__test__afir_bist_prbg_seed_1__len 2
#define MA_core__test__afir_bist_prbg_seed_1__mask 0x03
#define MA_core__test__afir_bist_prbg_seed_1__shift 0x00
#define MA_core__test__afir_bist_prbg_seed_1__reset 0x00
#define MA_core__test__afir_bist_prbg_seed_1__inputonly 0
#define set_obj_MA_core__test__afir_bist_prbg_seed_1(o,y) ({ uint8_t __ret = o.read(532); o.write(532,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__test__afir_bist_prbg_seed_1(y) ({ uint8_t __ret = ma_read_byte(532); ma_write_byte(532,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__test__afir_bist_prbg_seed_1(o) (o.read(532) & 0x03)>>0
#define get_MA_core__test__afir_bist_prbg_seed_1() ( ma_read_byte(532) & 0x03)>>0
//------------------------------------------------------------------------------core__test__afir_bist_error_prbg_seed_0---
// Pseudo random bit generator seed - 10 bits, latched when error
#define MA_core__test__afir_bist_error_prbg_seed_0__a 0x0215
#define MA_core__test__afir_bist_error_prbg_seed_0__len 8
#define MA_core__test__afir_bist_error_prbg_seed_0__mask 0xff
#define MA_core__test__afir_bist_error_prbg_seed_0__shift 0x00
#define MA_core__test__afir_bist_error_prbg_seed_0__reset 0x00
#define MA_core__test__afir_bist_error_prbg_seed_0__inputonly 1
#define set_obj_MA_core__test__afir_bist_error_prbg_seed_0(o,y) o.write(533,y);
#define set_MA_core__test__afir_bist_error_prbg_seed_0(y) ma_write_byte(533,y);
#define get_obj_MA_core__test__afir_bist_error_prbg_seed_0(o) (o.read(533) & 0xff)>>0
#define get_MA_core__test__afir_bist_error_prbg_seed_0() ( ma_read_byte(533) & 0xff)>>0
//------------------------------------------------------------------------------core__test__afir_bist_error_cnt---
// Afir element counter - latched counter value when error
#define MA_core__test__afir_bist_error_cnt__a 0x0217
#define MA_core__test__afir_bist_error_cnt__len 8
#define MA_core__test__afir_bist_error_cnt__mask 0xff
#define MA_core__test__afir_bist_error_cnt__shift 0x00
#define MA_core__test__afir_bist_error_cnt__reset 0x00
#define MA_core__test__afir_bist_error_cnt__inputonly 1
#define set_obj_MA_core__test__afir_bist_error_cnt(o,y) o.write(535,y);
#define set_MA_core__test__afir_bist_error_cnt(y) ma_write_byte(535,y);
#define get_obj_MA_core__test__afir_bist_error_cnt(o) (o.read(535) & 0xff)>>0
#define get_MA_core__test__afir_bist_error_cnt() ( ma_read_byte(535) & 0xff)>>0
//------------------------------------------------------------------------------core__test__afir_bist_error_prbg_seed_1---
// Pseudo random bit generator seed - 10 bits, latched when error
#define MA_core__test__afir_bist_error_prbg_seed_1__a 0x0216
#define MA_core__test__afir_bist_error_prbg_seed_1__len 2
#define MA_core__test__afir_bist_error_prbg_seed_1__mask 0x03
#define MA_core__test__afir_bist_error_prbg_seed_1__shift 0x00
#define MA_core__test__afir_bist_error_prbg_seed_1__reset 0x00
#define MA_core__test__afir_bist_error_prbg_seed_1__inputonly 1
#define set_obj_MA_core__test__afir_bist_error_prbg_seed_1(o,y) ({ uint8_t __ret = o.read(534); o.write(534,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__test__afir_bist_error_prbg_seed_1(y) ({ uint8_t __ret = ma_read_byte(534); ma_write_byte(534,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__test__afir_bist_error_prbg_seed_1(o) (o.read(534) & 0x03)>>0
#define get_MA_core__test__afir_bist_error_prbg_seed_1() ( ma_read_byte(534) & 0x03)>>0
//------------------------------------------------------------------------------core__test__afir_bist_results_2---
// afir_bist_results_2
#define MA_core__test__afir_bist_results_2__a 0x0212
#define MA_core__test__afir_bist_results_2__len 1
#define MA_core__test__afir_bist_results_2__mask 0x80
#define MA_core__test__afir_bist_results_2__shift 0x07
#define MA_core__test__afir_bist_results_2__reset 0x00
#define MA_core__test__afir_bist_results_2__inputonly 1
#define set_obj_MA_core__test__afir_bist_results_2(o,y) ({ uint8_t __ret = o.read(530); o.write(530,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_core__test__afir_bist_results_2(y) ({ uint8_t __ret = ma_read_byte(530); ma_write_byte(530,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_core__test__afir_bist_results_2(o) (o.read(530) & 0x80)>>7
#define get_MA_core__test__afir_bist_results_2() ( ma_read_byte(530) & 0x80)>>7
//------------------------------------------------------------------------------core__system__otp_boot_done---
// Indicate that trim values has been loaded
#define MA_core__system__otp_boot_done__a 0x0258
#define MA_core__system__otp_boot_done__len 1
#define MA_core__system__otp_boot_done__mask 0x01
#define MA_core__system__otp_boot_done__shift 0x00
#define MA_core__system__otp_boot_done__reset 0x00
#define MA_core__system__otp_boot_done__inputonly 0
#define set_obj_MA_core__system__otp_boot_done(o,y) ({ uint8_t __ret = o.read(600); o.write(600,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__system__otp_boot_done(y) ({ uint8_t __ret = ma_read_byte(600); ma_write_byte(600,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__system__otp_boot_done(o) (o.read(600) & 0x01)>>0
#define get_MA_core__system__otp_boot_done() ( ma_read_byte(600) & 0x01)>>0
//------------------------------------------------------------------------------core__system__dac_dither_level---
// DAC dither level: 00: Off, 01: Small, 10: Medium, 11: Large
#define MA_core__system__dac_dither_level__a 0x0259
#define MA_core__system__dac_dither_level__len 2
#define MA_core__system__dac_dither_level__mask 0x03
#define MA_core__system__dac_dither_level__shift 0x00
#define MA_core__system__dac_dither_level__reset 0x01
#define MA_core__system__dac_dither_level__inputonly 0
#define set_obj_MA_core__system__dac_dither_level(o,y) ({ uint8_t __ret = o.read(601); o.write(601,(__ret&0xfc)|((y<<0)&0x03)); })
#define set_MA_core__system__dac_dither_level(y) ({ uint8_t __ret = ma_read_byte(601); ma_write_byte(601,(__ret&0xfc)|((y<<0)&0x03)); })
#define get_obj_MA_core__system__dac_dither_level(o) (o.read(601) & 0x03)>>0
#define get_MA_core__system__dac_dither_level() ( ma_read_byte(601) & 0x03)>>0
//------------------------------------------------------------------------------core__system__afir_clk_invert---
// Invert clock to afir
#define MA_core__system__afir_clk_invert__a 0x025a
#define MA_core__system__afir_clk_invert__len 1
#define MA_core__system__afir_clk_invert__mask 0x04
#define MA_core__system__afir_clk_invert__shift 0x02
#define MA_core__system__afir_clk_invert__reset 0x00
#define MA_core__system__afir_clk_invert__inputonly 0
#define set_obj_MA_core__system__afir_clk_invert(o,y) ({ uint8_t __ret = o.read(602); o.write(602,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__system__afir_clk_invert(y) ({ uint8_t __ret = ma_read_byte(602); ma_write_byte(602,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__system__afir_clk_invert(o) (o.read(602) & 0x04)>>2
#define get_MA_core__system__afir_clk_invert() ( ma_read_byte(602) & 0x04)>>2
//------------------------------------------------------------------------------core__system__acfg_dcu_upd_block---
// High to block DCU update
#define MA_core__system__acfg_dcu_upd_block__a 0x025a
#define MA_core__system__acfg_dcu_upd_block__len 1
#define MA_core__system__acfg_dcu_upd_block__mask 0x08
#define MA_core__system__acfg_dcu_upd_block__shift 0x03
#define MA_core__system__acfg_dcu_upd_block__reset 0x00
#define MA_core__system__acfg_dcu_upd_block__inputonly 0
#define set_obj_MA_core__system__acfg_dcu_upd_block(o,y) ({ uint8_t __ret = o.read(602); o.write(602,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__system__acfg_dcu_upd_block(y) ({ uint8_t __ret = ma_read_byte(602); ma_write_byte(602,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__system__acfg_dcu_upd_block(o) (o.read(602) & 0x08)>>3
#define get_MA_core__system__acfg_dcu_upd_block() ( ma_read_byte(602) & 0x08)>>3
//------------------------------------------------------------------------------core__system__otp_reg_start_time---
// Number of 3 MHz cycles to wait for regulators to settle before accessing OTP
#define MA_core__system__otp_reg_start_time__a 0x025d
#define MA_core__system__otp_reg_start_time__len 8
#define MA_core__system__otp_reg_start_time__mask 0xff
#define MA_core__system__otp_reg_start_time__shift 0x00
#define MA_core__system__otp_reg_start_time__reset 0x32
#define MA_core__system__otp_reg_start_time__inputonly 0
#define set_obj_MA_core__system__otp_reg_start_time(o,y) o.write(605,y);
#define set_MA_core__system__otp_reg_start_time(y) ma_write_byte(605,y);
#define get_obj_MA_core__system__otp_reg_start_time(o) (o.read(605) & 0xff)>>0
#define get_MA_core__system__otp_reg_start_time() ( ma_read_byte(605) & 0xff)>>0
//------------------------------------------------------------------------------core__system__otp_write_time---
// Number of 10 us cycles to keep the OTP program pin asserted
#define MA_core__system__otp_write_time__a 0x025e
#define MA_core__system__otp_write_time__len 8
#define MA_core__system__otp_write_time__mask 0xff
#define MA_core__system__otp_write_time__shift 0x00
#define MA_core__system__otp_write_time__reset 0x64
#define MA_core__system__otp_write_time__inputonly 0
#define set_obj_MA_core__system__otp_write_time(o,y) o.write(606,y);
#define set_MA_core__system__otp_write_time(y) ma_write_byte(606,y);
#define get_obj_MA_core__system__otp_write_time(o) (o.read(606) & 0xff)>>0
#define get_MA_core__system__otp_write_time() ( ma_read_byte(606) & 0xff)>>0
//------------------------------------------------------------------------------core__system__force_play---
// Debug: Force sub blocks to play audio
#define MA_core__system__force_play__a 0x025a
#define MA_core__system__force_play__len 1
#define MA_core__system__force_play__mask 0x10
#define MA_core__system__force_play__shift 0x04
#define MA_core__system__force_play__reset 0x00
#define MA_core__system__force_play__inputonly 0
#define set_obj_MA_core__system__force_play(o,y) ({ uint8_t __ret = o.read(602); o.write(602,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_core__system__force_play(y) ({ uint8_t __ret = ma_read_byte(602); ma_write_byte(602,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_core__system__force_play(o) (o.read(602) & 0x10)>>4
#define get_MA_core__system__force_play() ( ma_read_byte(602) & 0x10)>>4
//------------------------------------------------------------------------------core__system__force_pll---
// Debug: Force pll enable
#define MA_core__system__force_pll__a 0x025a
#define MA_core__system__force_pll__len 1
#define MA_core__system__force_pll__mask 0x20
#define MA_core__system__force_pll__shift 0x05
#define MA_core__system__force_pll__reset 0x00
#define MA_core__system__force_pll__inputonly 0
#define set_obj_MA_core__system__force_pll(o,y) ({ uint8_t __ret = o.read(602); o.write(602,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_core__system__force_pll(y) ({ uint8_t __ret = ma_read_byte(602); ma_write_byte(602,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_core__system__force_pll(o) (o.read(602) & 0x20)>>5
#define get_MA_core__system__force_pll() ( ma_read_byte(602) & 0x20)>>5
//------------------------------------------------------------------------------core__system__rb_protect---
// Register bank protection level; 0: public, 1: read only, 2: hidden
#define MA_core__system__rb_protect__a 0x0260
#define MA_core__system__rb_protect__len 3
#define MA_core__system__rb_protect__mask 0x07
#define MA_core__system__rb_protect__shift 0x00
#define MA_core__system__rb_protect__reset 0x00
#define MA_core__system__rb_protect__inputonly 0
#define set_obj_MA_core__system__rb_protect(o,y) ({ uint8_t __ret = o.read(608); o.write(608,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__system__rb_protect(y) ({ uint8_t __ret = ma_read_byte(608); ma_write_byte(608,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__system__rb_protect(o) (o.read(608) & 0x07)>>0
#define get_MA_core__system__rb_protect() ( ma_read_byte(608) & 0x07)>>0
//------------------------------------------------------------------------------core__system__rb_protect_override---
// Register bank protection override
#define MA_core__system__rb_protect_override__a 0x0261
#define MA_core__system__rb_protect_override__len 8
#define MA_core__system__rb_protect_override__mask 0xff
#define MA_core__system__rb_protect_override__shift 0x00
#define MA_core__system__rb_protect_override__reset 0x00
#define MA_core__system__rb_protect_override__inputonly 0
#define set_obj_MA_core__system__rb_protect_override(o,y) o.write(609,y);
#define set_MA_core__system__rb_protect_override(y) ma_write_byte(609,y);
#define get_obj_MA_core__system__rb_protect_override(o) (o.read(609) & 0xff)>>0
#define get_MA_core__system__rb_protect_override() ( ma_read_byte(609) & 0xff)>>0
//------------------------------------------------------------------------------core__system__otp_write_enable---
// Magic value to enable OTP writes
#define MA_core__system__otp_write_enable__a 0x025f
#define MA_core__system__otp_write_enable__len 8
#define MA_core__system__otp_write_enable__mask 0xff
#define MA_core__system__otp_write_enable__shift 0x00
#define MA_core__system__otp_write_enable__reset 0x00
#define MA_core__system__otp_write_enable__inputonly 0
#define set_obj_MA_core__system__otp_write_enable(o,y) o.write(607,y);
#define set_MA_core__system__otp_write_enable(y) ma_write_byte(607,y);
#define get_obj_MA_core__system__otp_write_enable(o) (o.read(607) & 0xff)>>0
#define get_MA_core__system__otp_write_enable() ( ma_read_byte(607) & 0xff)>>0
//------------------------------------------------------------------------------core__system__temp_chip_shift---
// Number of MSBs to discard on the ADC temperature measurement avail in pa.temp_chip
#define MA_core__system__temp_chip_shift__a 0x0263
#define MA_core__system__temp_chip_shift__len 3
#define MA_core__system__temp_chip_shift__mask 0x07
#define MA_core__system__temp_chip_shift__shift 0x00
#define MA_core__system__temp_chip_shift__reset 0x00
#define MA_core__system__temp_chip_shift__inputonly 0
#define set_obj_MA_core__system__temp_chip_shift(o,y) ({ uint8_t __ret = o.read(611); o.write(611,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_core__system__temp_chip_shift(y) ({ uint8_t __ret = ma_read_byte(611); ma_write_byte(611,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_core__system__temp_chip_shift(o) (o.read(611) & 0x07)>>0
#define get_MA_core__system__temp_chip_shift() ( ma_read_byte(611) & 0x07)>>0
//------------------------------------------------------------------------------core__system__bgr_filt_div_1_not_3---
// Increase the frequency of the bandgap filter to 64 KHz instead of 192 KHz
#define MA_core__system__bgr_filt_div_1_not_3__a 0x025a
#define MA_core__system__bgr_filt_div_1_not_3__len 1
#define MA_core__system__bgr_filt_div_1_not_3__mask 0x01
#define MA_core__system__bgr_filt_div_1_not_3__shift 0x00
#define MA_core__system__bgr_filt_div_1_not_3__reset 0x00
#define MA_core__system__bgr_filt_div_1_not_3__inputonly 0
#define set_obj_MA_core__system__bgr_filt_div_1_not_3(o,y) ({ uint8_t __ret = o.read(602); o.write(602,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__system__bgr_filt_div_1_not_3(y) ({ uint8_t __ret = ma_read_byte(602); ma_write_byte(602,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__system__bgr_filt_div_1_not_3(o) (o.read(602) & 0x01)>>0
#define get_MA_core__system__bgr_filt_div_1_not_3() ( ma_read_byte(602) & 0x01)>>0
//------------------------------------------------------------------------------core__system__dmem_protect---
// Write protect DSP data memory
#define MA_core__system__dmem_protect__a 0x0262
#define MA_core__system__dmem_protect__len 1
#define MA_core__system__dmem_protect__mask 0x08
#define MA_core__system__dmem_protect__shift 0x03
#define MA_core__system__dmem_protect__reset 0x00
#define MA_core__system__dmem_protect__inputonly 0
#define set_obj_MA_core__system__dmem_protect(o,y) ({ uint8_t __ret = o.read(610); o.write(610,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_core__system__dmem_protect(y) ({ uint8_t __ret = ma_read_byte(610); ma_write_byte(610,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_core__system__dmem_protect(o) (o.read(610) & 0x08)>>3
#define get_MA_core__system__dmem_protect() ( ma_read_byte(610) & 0x08)>>3
//------------------------------------------------------------------------------core__system__pmem_protect---
// Write protect DSP program memory
#define MA_core__system__pmem_protect__a 0x0262
#define MA_core__system__pmem_protect__len 1
#define MA_core__system__pmem_protect__mask 0x04
#define MA_core__system__pmem_protect__shift 0x02
#define MA_core__system__pmem_protect__reset 0x00
#define MA_core__system__pmem_protect__inputonly 0
#define set_obj_MA_core__system__pmem_protect(o,y) ({ uint8_t __ret = o.read(610); o.write(610,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_core__system__pmem_protect(y) ({ uint8_t __ret = ma_read_byte(610); ma_write_byte(610,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_core__system__pmem_protect(o) (o.read(610) & 0x04)>>2
#define get_MA_core__system__pmem_protect() ( ma_read_byte(610) & 0x04)>>2
//------------------------------------------------------------------------------core__system__mlp_protect---
// Write protect multi-level pin segment
#define MA_core__system__mlp_protect__a 0x0262
#define MA_core__system__mlp_protect__len 1
#define MA_core__system__mlp_protect__mask 0x01
#define MA_core__system__mlp_protect__shift 0x00
#define MA_core__system__mlp_protect__reset 0x00
#define MA_core__system__mlp_protect__inputonly 0
#define set_obj_MA_core__system__mlp_protect(o,y) ({ uint8_t __ret = o.read(610); o.write(610,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_core__system__mlp_protect(y) ({ uint8_t __ret = ma_read_byte(610); ma_write_byte(610,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_core__system__mlp_protect(o) (o.read(610) & 0x01)>>0
#define get_MA_core__system__mlp_protect() ( ma_read_byte(610) & 0x01)>>0
//------------------------------------------------------------------------------core__system__acfg_protect---
// Write protect analog configuration segment
#define MA_core__system__acfg_protect__a 0x0262
#define MA_core__system__acfg_protect__len 1
#define MA_core__system__acfg_protect__mask 0x02
#define MA_core__system__acfg_protect__shift 0x01
#define MA_core__system__acfg_protect__reset 0x00
#define MA_core__system__acfg_protect__inputonly 0
#define set_obj_MA_core__system__acfg_protect(o,y) ({ uint8_t __ret = o.read(610); o.write(610,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_core__system__acfg_protect(y) ({ uint8_t __ret = ma_read_byte(610); ma_write_byte(610,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_core__system__acfg_protect(o) (o.read(610) & 0x02)>>1
#define get_MA_core__system__acfg_protect() ( ma_read_byte(610) & 0x02)>>1
//------------------------------------------------------------------------------mlpin__mlp__limit0---
// 120 KOhm upper limit
#define MA_mlpin__mlp__limit0__a 0x0500
#define MA_mlpin__mlp__limit0__len 6
#define MA_mlpin__mlp__limit0__mask 0x3f
#define MA_mlpin__mlp__limit0__shift 0x00
#define MA_mlpin__mlp__limit0__reset 0x01
#define MA_mlpin__mlp__limit0__inputonly 0
#define set_obj_MA_mlpin__mlp__limit0(o,y) ({ uint8_t __ret = o.read(1280); o.write(1280,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit0(y) ({ uint8_t __ret = ma_read_byte(1280); ma_write_byte(1280,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit0(o) (o.read(1280) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit0() ( ma_read_byte(1280) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__limit1---
// 62 KOhm upper limit
#define MA_mlpin__mlp__limit1__a 0x0501
#define MA_mlpin__mlp__limit1__len 6
#define MA_mlpin__mlp__limit1__mask 0x3f
#define MA_mlpin__mlp__limit1__shift 0x00
#define MA_mlpin__mlp__limit1__reset 0x05
#define MA_mlpin__mlp__limit1__inputonly 0
#define set_obj_MA_mlpin__mlp__limit1(o,y) ({ uint8_t __ret = o.read(1281); o.write(1281,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit1(y) ({ uint8_t __ret = ma_read_byte(1281); ma_write_byte(1281,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit1(o) (o.read(1281) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit1() ( ma_read_byte(1281) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__limit2---
// 39 KOhm upper limit
#define MA_mlpin__mlp__limit2__a 0x0502
#define MA_mlpin__mlp__limit2__len 6
#define MA_mlpin__mlp__limit2__mask 0x3f
#define MA_mlpin__mlp__limit2__shift 0x00
#define MA_mlpin__mlp__limit2__reset 0x09
#define MA_mlpin__mlp__limit2__inputonly 0
#define set_obj_MA_mlpin__mlp__limit2(o,y) ({ uint8_t __ret = o.read(1282); o.write(1282,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit2(y) ({ uint8_t __ret = ma_read_byte(1282); ma_write_byte(1282,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit2(o) (o.read(1282) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit2() ( ma_read_byte(1282) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__limit3---
// 30 KOhm upper limit
#define MA_mlpin__mlp__limit3__a 0x0503
#define MA_mlpin__mlp__limit3__len 6
#define MA_mlpin__mlp__limit3__mask 0x3f
#define MA_mlpin__mlp__limit3__shift 0x00
#define MA_mlpin__mlp__limit3__reset 0x0e
#define MA_mlpin__mlp__limit3__inputonly 0
#define set_obj_MA_mlpin__mlp__limit3(o,y) ({ uint8_t __ret = o.read(1283); o.write(1283,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit3(y) ({ uint8_t __ret = ma_read_byte(1283); ma_write_byte(1283,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit3(o) (o.read(1283) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit3() ( ma_read_byte(1283) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__limit4---
// 24 KOhm upper limit
#define MA_mlpin__mlp__limit4__a 0x0504
#define MA_mlpin__mlp__limit4__len 6
#define MA_mlpin__mlp__limit4__mask 0x3f
#define MA_mlpin__mlp__limit4__shift 0x00
#define MA_mlpin__mlp__limit4__reset 0x12
#define MA_mlpin__mlp__limit4__inputonly 0
#define set_obj_MA_mlpin__mlp__limit4(o,y) ({ uint8_t __ret = o.read(1284); o.write(1284,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit4(y) ({ uint8_t __ret = ma_read_byte(1284); ma_write_byte(1284,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit4(o) (o.read(1284) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit4() ( ma_read_byte(1284) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__limit5---
// 20 KOhm upper limit
#define MA_mlpin__mlp__limit5__a 0x0505
#define MA_mlpin__mlp__limit5__len 6
#define MA_mlpin__mlp__limit5__mask 0x3f
#define MA_mlpin__mlp__limit5__shift 0x00
#define MA_mlpin__mlp__limit5__reset 0x16
#define MA_mlpin__mlp__limit5__inputonly 0
#define set_obj_MA_mlpin__mlp__limit5(o,y) ({ uint8_t __ret = o.read(1285); o.write(1285,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit5(y) ({ uint8_t __ret = ma_read_byte(1285); ma_write_byte(1285,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit5(o) (o.read(1285) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit5() ( ma_read_byte(1285) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__limit6---
// 15 KOhm upper limit
#define MA_mlpin__mlp__limit6__a 0x0506
#define MA_mlpin__mlp__limit6__len 6
#define MA_mlpin__mlp__limit6__mask 0x3f
#define MA_mlpin__mlp__limit6__shift 0x00
#define MA_mlpin__mlp__limit6__reset 0x1c
#define MA_mlpin__mlp__limit6__inputonly 0
#define set_obj_MA_mlpin__mlp__limit6(o,y) ({ uint8_t __ret = o.read(1286); o.write(1286,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit6(y) ({ uint8_t __ret = ma_read_byte(1286); ma_write_byte(1286,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit6(o) (o.read(1286) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit6() ( ma_read_byte(1286) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__limit7---
// 10 KOhm upper limit
#define MA_mlpin__mlp__limit7__a 0x0507
#define MA_mlpin__mlp__limit7__len 6
#define MA_mlpin__mlp__limit7__mask 0x3f
#define MA_mlpin__mlp__limit7__shift 0x00
#define MA_mlpin__mlp__limit7__reset 0x28
#define MA_mlpin__mlp__limit7__inputonly 0
#define set_obj_MA_mlpin__mlp__limit7(o,y) ({ uint8_t __ret = o.read(1287); o.write(1287,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit7(y) ({ uint8_t __ret = ma_read_byte(1287); ma_write_byte(1287,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit7(o) (o.read(1287) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit7() ( ma_read_byte(1287) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__limit8---
// 10 KOhm lower limit
#define MA_mlpin__mlp__limit8__a 0x0508
#define MA_mlpin__mlp__limit8__len 6
#define MA_mlpin__mlp__limit8__mask 0x3f
#define MA_mlpin__mlp__limit8__shift 0x00
#define MA_mlpin__mlp__limit8__reset 0x36
#define MA_mlpin__mlp__limit8__inputonly 0
#define set_obj_MA_mlpin__mlp__limit8(o,y) ({ uint8_t __ret = o.read(1288); o.write(1288,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__limit8(y) ({ uint8_t __ret = ma_read_byte(1288); ma_write_byte(1288,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__limit8(o) (o.read(1288) & 0x3f)>>0
#define get_MA_mlpin__mlp__limit8() ( ma_read_byte(1288) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__decrement---
// Enable auto-decrement of the select register allowing you to do sequential messurements of several pins
#define MA_mlpin__mlp__decrement__a 0x0509
#define MA_mlpin__mlp__decrement__len 1
#define MA_mlpin__mlp__decrement__mask 0x08
#define MA_mlpin__mlp__decrement__shift 0x03
#define MA_mlpin__mlp__decrement__reset 0x01
#define MA_mlpin__mlp__decrement__inputonly 0
#define set_obj_MA_mlpin__mlp__decrement(o,y) ({ uint8_t __ret = o.read(1289); o.write(1289,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_mlpin__mlp__decrement(y) ({ uint8_t __ret = ma_read_byte(1289); ma_write_byte(1289,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_mlpin__mlp__decrement(o) (o.read(1289) & 0x08)>>3
#define get_MA_mlpin__mlp__decrement() ( ma_read_byte(1289) & 0x08)>>3
//------------------------------------------------------------------------------mlpin__mlp__sel---
// Start decode of the given pin (see coding on the config registers) or apply test mode load (sel=6)
#define MA_mlpin__mlp__sel__a 0x0509
#define MA_mlpin__mlp__sel__len 3
#define MA_mlpin__mlp__sel__mask 0x07
#define MA_mlpin__mlp__sel__shift 0x00
#define MA_mlpin__mlp__sel__reset 0x05
#define MA_mlpin__mlp__sel__inputonly 0
#define set_obj_MA_mlpin__mlp__sel(o,y) ({ uint8_t __ret = o.read(1289); o.write(1289,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_mlpin__mlp__sel(y) ({ uint8_t __ret = ma_read_byte(1289); ma_write_byte(1289,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_mlpin__mlp__sel(o) (o.read(1289) & 0x07)>>0
#define get_MA_mlpin__mlp__sel() ( ma_read_byte(1289) & 0x07)>>0
//------------------------------------------------------------------------------mlpin__mlp__msel_cfg---
// msel pin configuration (sel=1); 0: tie high, 1: 120 KOhm
#define MA_mlpin__mlp__msel_cfg__a 0x050c
#define MA_mlpin__mlp__msel_cfg__len 4
#define MA_mlpin__mlp__msel_cfg__mask 0x0f
#define MA_mlpin__mlp__msel_cfg__shift 0x00
#define MA_mlpin__mlp__msel_cfg__reset 0x00
#define MA_mlpin__mlp__msel_cfg__inputonly 1
#define set_obj_MA_mlpin__mlp__msel_cfg(o,y) ({ uint8_t __ret = o.read(1292); o.write(1292,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_mlpin__mlp__msel_cfg(y) ({ uint8_t __ret = ma_read_byte(1292); ma_write_byte(1292,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_mlpin__mlp__msel_cfg(o) (o.read(1292) & 0x0f)>>0
#define get_MA_mlpin__mlp__msel_cfg() ( ma_read_byte(1292) & 0x0f)>>0
//------------------------------------------------------------------------------mlpin__mlp__i2c_ad0_cfg---
// i2c_ad0 pin configuration (sel=3); 2: 62 KOhm, 3: 39 KOhm
#define MA_mlpin__mlp__i2c_ad0_cfg__a 0x050e
#define MA_mlpin__mlp__i2c_ad0_cfg__len 4
#define MA_mlpin__mlp__i2c_ad0_cfg__mask 0x0f
#define MA_mlpin__mlp__i2c_ad0_cfg__shift 0x00
#define MA_mlpin__mlp__i2c_ad0_cfg__reset 0x00
#define MA_mlpin__mlp__i2c_ad0_cfg__inputonly 1
#define set_obj_MA_mlpin__mlp__i2c_ad0_cfg(o,y) ({ uint8_t __ret = o.read(1294); o.write(1294,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_mlpin__mlp__i2c_ad0_cfg(y) ({ uint8_t __ret = ma_read_byte(1294); ma_write_byte(1294,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_mlpin__mlp__i2c_ad0_cfg(o) (o.read(1294) & 0x0f)>>0
#define get_MA_mlpin__mlp__i2c_ad0_cfg() ( ma_read_byte(1294) & 0x0f)>>0
//------------------------------------------------------------------------------mlpin__mlp__i2c_ad1_cfg---
// i2c_ad1 pin configuration (sel=2); 4: 30 KOhm, 5: 24 KOhm
#define MA_mlpin__mlp__i2c_ad1_cfg__a 0x050d
#define MA_mlpin__mlp__i2c_ad1_cfg__len 4
#define MA_mlpin__mlp__i2c_ad1_cfg__mask 0x0f
#define MA_mlpin__mlp__i2c_ad1_cfg__shift 0x00
#define MA_mlpin__mlp__i2c_ad1_cfg__reset 0x00
#define MA_mlpin__mlp__i2c_ad1_cfg__inputonly 1
#define set_obj_MA_mlpin__mlp__i2c_ad1_cfg(o,y) ({ uint8_t __ret = o.read(1293); o.write(1293,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_mlpin__mlp__i2c_ad1_cfg(y) ({ uint8_t __ret = ma_read_byte(1293); ma_write_byte(1293,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_mlpin__mlp__i2c_ad1_cfg(o) (o.read(1293) & 0x0f)>>0
#define get_MA_mlpin__mlp__i2c_ad1_cfg() ( ma_read_byte(1293) & 0x0f)>>0
//------------------------------------------------------------------------------mlpin__mlp__i2c_sda_cfg---
// i2c_sda pin configuration (sel=4); 6: 20 KOhm, 7: 15 KOhm
#define MA_mlpin__mlp__i2c_sda_cfg__a 0x050f
#define MA_mlpin__mlp__i2c_sda_cfg__len 4
#define MA_mlpin__mlp__i2c_sda_cfg__mask 0x0f
#define MA_mlpin__mlp__i2c_sda_cfg__shift 0x00
#define MA_mlpin__mlp__i2c_sda_cfg__reset 0x00
#define MA_mlpin__mlp__i2c_sda_cfg__inputonly 1
#define set_obj_MA_mlpin__mlp__i2c_sda_cfg(o,y) ({ uint8_t __ret = o.read(1295); o.write(1295,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_mlpin__mlp__i2c_sda_cfg(y) ({ uint8_t __ret = ma_read_byte(1295); ma_write_byte(1295,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_mlpin__mlp__i2c_sda_cfg(o) (o.read(1295) & 0x0f)>>0
#define get_MA_mlpin__mlp__i2c_sda_cfg() ( ma_read_byte(1295) & 0x0f)>>0
//------------------------------------------------------------------------------mlpin__mlp__i2c_scl_cfg---
// i2c_scl pin configuration (sel=5); 8: 10 KOhm, 9: tie low
#define MA_mlpin__mlp__i2c_scl_cfg__a 0x0510
#define MA_mlpin__mlp__i2c_scl_cfg__len 4
#define MA_mlpin__mlp__i2c_scl_cfg__mask 0x0f
#define MA_mlpin__mlp__i2c_scl_cfg__shift 0x00
#define MA_mlpin__mlp__i2c_scl_cfg__reset 0x00
#define MA_mlpin__mlp__i2c_scl_cfg__inputonly 1
#define set_obj_MA_mlpin__mlp__i2c_scl_cfg(o,y) ({ uint8_t __ret = o.read(1296); o.write(1296,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_mlpin__mlp__i2c_scl_cfg(y) ({ uint8_t __ret = ma_read_byte(1296); ma_write_byte(1296,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_mlpin__mlp__i2c_scl_cfg(o) (o.read(1296) & 0x0f)>>0
#define get_MA_mlpin__mlp__i2c_scl_cfg() ( ma_read_byte(1296) & 0x0f)>>0
//------------------------------------------------------------------------------mlpin__mlp__timeout---
// Number of calibration clock cycles to wait for ADC to settle
#define MA_mlpin__mlp__timeout__a 0x050a
#define MA_mlpin__mlp__timeout__len 8
#define MA_mlpin__mlp__timeout__mask 0xff
#define MA_mlpin__mlp__timeout__shift 0x00
#define MA_mlpin__mlp__timeout__reset 0x20
#define MA_mlpin__mlp__timeout__inputonly 0
#define set_obj_MA_mlpin__mlp__timeout(o,y) o.write(1290,y);
#define set_MA_mlpin__mlp__timeout(y) ma_write_byte(1290,y);
#define get_obj_MA_mlpin__mlp__timeout(o) (o.read(1290) & 0xff)>>0
#define get_MA_mlpin__mlp__timeout() ( ma_read_byte(1290) & 0xff)>>0
//------------------------------------------------------------------------------mlpin__mlp__iset---
// Number of enabled current sources in the last messurement
#define MA_mlpin__mlp__iset__a 0x050b
#define MA_mlpin__mlp__iset__len 6
#define MA_mlpin__mlp__iset__mask 0x3f
#define MA_mlpin__mlp__iset__shift 0x00
#define MA_mlpin__mlp__iset__reset 0x00
#define MA_mlpin__mlp__iset__inputonly 0
#define set_obj_MA_mlpin__mlp__iset(o,y) ({ uint8_t __ret = o.read(1291); o.write(1291,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_mlpin__mlp__iset(y) ({ uint8_t __ret = ma_read_byte(1291); ma_write_byte(1291,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_mlpin__mlp__iset(o) (o.read(1291) & 0x3f)>>0
#define get_MA_mlpin__mlp__iset() ( ma_read_byte(1291) & 0x3f)>>0
//------------------------------------------------------------------------------mlpin__mlp__sar_disable---
// Test mode where SAR is disabled and the current sources are enabled directly from the iset register
#define MA_mlpin__mlp__sar_disable__a 0x0509
#define MA_mlpin__mlp__sar_disable__len 1
#define MA_mlpin__mlp__sar_disable__mask 0x10
#define MA_mlpin__mlp__sar_disable__shift 0x04
#define MA_mlpin__mlp__sar_disable__reset 0x00
#define MA_mlpin__mlp__sar_disable__inputonly 0
#define set_obj_MA_mlpin__mlp__sar_disable(o,y) ({ uint8_t __ret = o.read(1289); o.write(1289,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_mlpin__mlp__sar_disable(y) ({ uint8_t __ret = ma_read_byte(1289); ma_write_byte(1289,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_mlpin__mlp__sar_disable(o) (o.read(1289) & 0x10)>>4
#define get_MA_mlpin__mlp__sar_disable() ( ma_read_byte(1289) & 0x10)>>4
//------------------------------------------------------------------------------acfg__avdd__osc_3m_ctrim---
// 3MHz RC oscillator coarse trim
#define MA_acfg__avdd__osc_3m_ctrim__a 0x0608
#define MA_acfg__avdd__osc_3m_ctrim__len 6
#define MA_acfg__avdd__osc_3m_ctrim__mask 0x3f
#define MA_acfg__avdd__osc_3m_ctrim__shift 0x00
#define MA_acfg__avdd__osc_3m_ctrim__reset 0x00
#define MA_acfg__avdd__osc_3m_ctrim__inputonly 0
#define set_obj_MA_acfg__avdd__osc_3m_ctrim(o,y) ({ uint8_t __ret = o.read(1544); o.write(1544,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_acfg__avdd__osc_3m_ctrim(y) ({ uint8_t __ret = ma_read_byte(1544); ma_write_byte(1544,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_acfg__avdd__osc_3m_ctrim(o) (o.read(1544) & 0x3f)>>0
#define get_MA_acfg__avdd__osc_3m_ctrim() ( ma_read_byte(1544) & 0x3f)>>0
//------------------------------------------------------------------------------acfg__avdd__osc_3m_ftrim---
// 3MHz RC oscillator fine trim
#define MA_acfg__avdd__osc_3m_ftrim__a 0x0609
#define MA_acfg__avdd__osc_3m_ftrim__len 6
#define MA_acfg__avdd__osc_3m_ftrim__mask 0x3f
#define MA_acfg__avdd__osc_3m_ftrim__shift 0x00
#define MA_acfg__avdd__osc_3m_ftrim__reset 0x00
#define MA_acfg__avdd__osc_3m_ftrim__inputonly 0
#define set_obj_MA_acfg__avdd__osc_3m_ftrim(o,y) ({ uint8_t __ret = o.read(1545); o.write(1545,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_acfg__avdd__osc_3m_ftrim(y) ({ uint8_t __ret = ma_read_byte(1545); ma_write_byte(1545,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_acfg__avdd__osc_3m_ftrim(o) (o.read(1545) & 0x3f)>>0
#define get_MA_acfg__avdd__osc_3m_ftrim() ( ma_read_byte(1545) & 0x3f)>>0
//------------------------------------------------------------------------------acfg__avdd__test_mode---
// Overwrite POR circuit
#define MA_acfg__avdd__test_mode__a 0x0608
#define MA_acfg__avdd__test_mode__len 1
#define MA_acfg__avdd__test_mode__mask 0x40
#define MA_acfg__avdd__test_mode__shift 0x06
#define MA_acfg__avdd__test_mode__reset 0x00
#define MA_acfg__avdd__test_mode__inputonly 0
#define set_obj_MA_acfg__avdd__test_mode(o,y) ({ uint8_t __ret = o.read(1544); o.write(1544,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_acfg__avdd__test_mode(y) ({ uint8_t __ret = ma_read_byte(1544); ma_write_byte(1544,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_acfg__avdd__test_mode(o) (o.read(1544) & 0x40)>>6
#define get_MA_acfg__avdd__test_mode() ( ma_read_byte(1544) & 0x40)>>6
//------------------------------------------------------------------------------acfg__avdd__amux_ch1b2---
// Amux ch1 bit 2
#define MA_acfg__avdd__amux_ch1b2__a 0x0608
#define MA_acfg__avdd__amux_ch1b2__len 1
#define MA_acfg__avdd__amux_ch1b2__mask 0x80
#define MA_acfg__avdd__amux_ch1b2__shift 0x07
#define MA_acfg__avdd__amux_ch1b2__reset 0x00
#define MA_acfg__avdd__amux_ch1b2__inputonly 0
#define set_obj_MA_acfg__avdd__amux_ch1b2(o,y) ({ uint8_t __ret = o.read(1544); o.write(1544,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__avdd__amux_ch1b2(y) ({ uint8_t __ret = ma_read_byte(1544); ma_write_byte(1544,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__avdd__amux_ch1b2(o) (o.read(1544) & 0x80)>>7
#define get_MA_acfg__avdd__amux_ch1b2() ( ma_read_byte(1544) & 0x80)>>7
//------------------------------------------------------------------------------acfg__avdd__amux_ch1b10---
// Amux ch1 bit 1:0
#define MA_acfg__avdd__amux_ch1b10__a 0x0609
#define MA_acfg__avdd__amux_ch1b10__len 2
#define MA_acfg__avdd__amux_ch1b10__mask 0xc0
#define MA_acfg__avdd__amux_ch1b10__shift 0x06
#define MA_acfg__avdd__amux_ch1b10__reset 0x00
#define MA_acfg__avdd__amux_ch1b10__inputonly 0
#define set_obj_MA_acfg__avdd__amux_ch1b10(o,y) ({ uint8_t __ret = o.read(1545); o.write(1545,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_acfg__avdd__amux_ch1b10(y) ({ uint8_t __ret = ma_read_byte(1545); ma_write_byte(1545,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_acfg__avdd__amux_ch1b10(o) (o.read(1545) & 0xc0)>>6
#define get_MA_acfg__avdd__amux_ch1b10() ( ma_read_byte(1545) & 0xc0)>>6
//------------------------------------------------------------------------------acfg__avdd__vcf_trim---
// vcf_trim
#define MA_acfg__avdd__vcf_trim__a 0x060b
#define MA_acfg__avdd__vcf_trim__len 4
#define MA_acfg__avdd__vcf_trim__mask 0x0f
#define MA_acfg__avdd__vcf_trim__shift 0x00
#define MA_acfg__avdd__vcf_trim__reset 0x00
#define MA_acfg__avdd__vcf_trim__inputonly 0
#define set_obj_MA_acfg__avdd__vcf_trim(o,y) ({ uint8_t __ret = o.read(1547); o.write(1547,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__avdd__vcf_trim(y) ({ uint8_t __ret = ma_read_byte(1547); ma_write_byte(1547,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__avdd__vcf_trim(o) (o.read(1547) & 0x0f)>>0
#define get_MA_acfg__avdd__vcf_trim() ( ma_read_byte(1547) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__avdd__rxtrim---
// Trim curret try 152
#define MA_acfg__avdd__rxtrim__a 0x060a
#define MA_acfg__avdd__rxtrim__len 8
#define MA_acfg__avdd__rxtrim__mask 0xff
#define MA_acfg__avdd__rxtrim__shift 0x00
#define MA_acfg__avdd__rxtrim__reset 0x00
#define MA_acfg__avdd__rxtrim__inputonly 0
#define set_obj_MA_acfg__avdd__rxtrim(o,y) o.write(1546,y);
#define set_MA_acfg__avdd__rxtrim(y) ma_write_byte(1546,y);
#define get_obj_MA_acfg__avdd__rxtrim(o) (o.read(1546) & 0xff)>>0
#define get_MA_acfg__avdd__rxtrim() ( ma_read_byte(1546) & 0xff)>>0
//------------------------------------------------------------------------------acfg__avdd__amux_ch0---
// Amux ch0
#define MA_acfg__avdd__amux_ch0__a 0x060b
#define MA_acfg__avdd__amux_ch0__len 4
#define MA_acfg__avdd__amux_ch0__mask 0xf0
#define MA_acfg__avdd__amux_ch0__shift 0x04
#define MA_acfg__avdd__amux_ch0__reset 0x00
#define MA_acfg__avdd__amux_ch0__inputonly 0
#define set_obj_MA_acfg__avdd__amux_ch0(o,y) ({ uint8_t __ret = o.read(1547); o.write(1547,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__avdd__amux_ch0(y) ({ uint8_t __ret = ma_read_byte(1547); ma_write_byte(1547,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__avdd__amux_ch0(o) (o.read(1547) & 0xf0)>>4
#define get_MA_acfg__avdd__amux_ch0() ( ma_read_byte(1547) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__avdd__hw_id---
// Hardware id
#define MA_acfg__avdd__hw_id__a 0x060c
#define MA_acfg__avdd__hw_id__len 8
#define MA_acfg__avdd__hw_id__mask 0xff
#define MA_acfg__avdd__hw_id__shift 0x00
#define MA_acfg__avdd__hw_id__reset 0x00
#define MA_acfg__avdd__hw_id__inputonly 1
#define set_obj_MA_acfg__avdd__hw_id(o,y) o.write(1548,y);
#define set_MA_acfg__avdd__hw_id(y) ma_write_byte(1548,y);
#define get_obj_MA_acfg__avdd__hw_id(o) (o.read(1548) & 0xff)>>0
#define get_MA_acfg__avdd__hw_id() ( ma_read_byte(1548) & 0xff)>>0
//------------------------------------------------------------------------------acfg__nb_trim__ldo_vtrim---
// Set ldo vtrim XXX range from to mapping
#define MA_acfg__nb_trim__ldo_vtrim__a 0x0610
#define MA_acfg__nb_trim__ldo_vtrim__len 6
#define MA_acfg__nb_trim__ldo_vtrim__mask 0x3f
#define MA_acfg__nb_trim__ldo_vtrim__shift 0x00
#define MA_acfg__nb_trim__ldo_vtrim__reset 0x00
#define MA_acfg__nb_trim__ldo_vtrim__inputonly 0
#define set_obj_MA_acfg__nb_trim__ldo_vtrim(o,y) ({ uint8_t __ret = o.read(1552); o.write(1552,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_acfg__nb_trim__ldo_vtrim(y) ({ uint8_t __ret = ma_read_byte(1552); ma_write_byte(1552,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_acfg__nb_trim__ldo_vtrim(o) (o.read(1552) & 0x3f)>>0
#define get_MA_acfg__nb_trim__ldo_vtrim() ( ma_read_byte(1552) & 0x3f)>>0
//------------------------------------------------------------------------------acfg__nb_trim__ldo_vset---
// Set the supply voltage for digital core; 101: 0.8V, 110: 0.9V, 111: 1.1V, 000: 1.1V, 001: 1.2V, 010: 1.3V, 011: 1.4V
#define MA_acfg__nb_trim__ldo_vset__a 0x0611
#define MA_acfg__nb_trim__ldo_vset__len 3
#define MA_acfg__nb_trim__ldo_vset__mask 0x07
#define MA_acfg__nb_trim__ldo_vset__shift 0x00
#define MA_acfg__nb_trim__ldo_vset__reset 0x00
#define MA_acfg__nb_trim__ldo_vset__inputonly 0
#define set_obj_MA_acfg__nb_trim__ldo_vset(o,y) ({ uint8_t __ret = o.read(1553); o.write(1553,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_acfg__nb_trim__ldo_vset(y) ({ uint8_t __ret = ma_read_byte(1553); ma_write_byte(1553,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_acfg__nb_trim__ldo_vset(o) (o.read(1553) & 0x07)>>0
#define get_MA_acfg__nb_trim__ldo_vset() ( ma_read_byte(1553) & 0x07)>>0
//------------------------------------------------------------------------------acfg__nb_trim__vdd_trim---
// Set vdd vtrim XXX range from to mapping
#define MA_acfg__nb_trim__vdd_trim__a 0x0611
#define MA_acfg__nb_trim__vdd_trim__len 5
#define MA_acfg__nb_trim__vdd_trim__mask 0xf8
#define MA_acfg__nb_trim__vdd_trim__shift 0x03
#define MA_acfg__nb_trim__vdd_trim__reset 0x00
#define MA_acfg__nb_trim__vdd_trim__inputonly 0
#define set_obj_MA_acfg__nb_trim__vdd_trim(o,y) ({ uint8_t __ret = o.read(1553); o.write(1553,(__ret&0x07)|((y<<3)&0xf8)); })
#define set_MA_acfg__nb_trim__vdd_trim(y) ({ uint8_t __ret = ma_read_byte(1553); ma_write_byte(1553,(__ret&0x07)|((y<<3)&0xf8)); })
#define get_obj_MA_acfg__nb_trim__vdd_trim(o) (o.read(1553) & 0xf8)>>3
#define get_MA_acfg__nb_trim__vdd_trim() ( ma_read_byte(1553) & 0xf8)>>3
//------------------------------------------------------------------------------acfg__nb_trim__gd_vtrim---
// gd_vtrim
#define MA_acfg__nb_trim__gd_vtrim__a 0x0612
#define MA_acfg__nb_trim__gd_vtrim__len 4
#define MA_acfg__nb_trim__gd_vtrim__mask 0x0f
#define MA_acfg__nb_trim__gd_vtrim__shift 0x00
#define MA_acfg__nb_trim__gd_vtrim__reset 0x00
#define MA_acfg__nb_trim__gd_vtrim__inputonly 0
#define set_obj_MA_acfg__nb_trim__gd_vtrim(o,y) ({ uint8_t __ret = o.read(1554); o.write(1554,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__nb_trim__gd_vtrim(y) ({ uint8_t __ret = ma_read_byte(1554); ma_write_byte(1554,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__nb_trim__gd_vtrim(o) (o.read(1554) & 0x0f)>>0
#define get_MA_acfg__nb_trim__gd_vtrim() ( ma_read_byte(1554) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__nb_trim__gd_vtrim_low---
// gd_vtrim_low XXX fill in
#define MA_acfg__nb_trim__gd_vtrim_low__a 0x0612
#define MA_acfg__nb_trim__gd_vtrim_low__len 1
#define MA_acfg__nb_trim__gd_vtrim_low__mask 0x10
#define MA_acfg__nb_trim__gd_vtrim_low__shift 0x04
#define MA_acfg__nb_trim__gd_vtrim_low__reset 0x00
#define MA_acfg__nb_trim__gd_vtrim_low__inputonly 0
#define set_obj_MA_acfg__nb_trim__gd_vtrim_low(o,y) ({ uint8_t __ret = o.read(1554); o.write(1554,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_acfg__nb_trim__gd_vtrim_low(y) ({ uint8_t __ret = ma_read_byte(1554); ma_write_byte(1554,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_acfg__nb_trim__gd_vtrim_low(o) (o.read(1554) & 0x10)>>4
#define get_MA_acfg__nb_trim__gd_vtrim_low() ( ma_read_byte(1554) & 0x10)>>4
//------------------------------------------------------------------------------acfg__nb_trim__enable_dvdd_5v0---
// Enable monitoring of dvdd_5v0 (divided by 5) on debug bus.
#define MA_acfg__nb_trim__enable_dvdd_5v0__a 0x0610
#define MA_acfg__nb_trim__enable_dvdd_5v0__len 1
#define MA_acfg__nb_trim__enable_dvdd_5v0__mask 0x80
#define MA_acfg__nb_trim__enable_dvdd_5v0__shift 0x07
#define MA_acfg__nb_trim__enable_dvdd_5v0__reset 0x00
#define MA_acfg__nb_trim__enable_dvdd_5v0__inputonly 0
#define set_obj_MA_acfg__nb_trim__enable_dvdd_5v0(o,y) ({ uint8_t __ret = o.read(1552); o.write(1552,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__nb_trim__enable_dvdd_5v0(y) ({ uint8_t __ret = ma_read_byte(1552); ma_write_byte(1552,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__nb_trim__enable_dvdd_5v0(o) (o.read(1552) & 0x80)>>7
#define get_MA_acfg__nb_trim__enable_dvdd_5v0() ( ma_read_byte(1552) & 0x80)>>7
//------------------------------------------------------------------------------acfg__nb_amux__sel_ch0_gdref---
// sel_ch0_gd_psu_ref
#define MA_acfg__nb_amux__sel_ch0_gdref__a 0x0618
#define MA_acfg__nb_amux__sel_ch0_gdref__len 4
#define MA_acfg__nb_amux__sel_ch0_gdref__mask 0x0f
#define MA_acfg__nb_amux__sel_ch0_gdref__shift 0x00
#define MA_acfg__nb_amux__sel_ch0_gdref__reset 0x00
#define MA_acfg__nb_amux__sel_ch0_gdref__inputonly 0
#define set_obj_MA_acfg__nb_amux__sel_ch0_gdref(o,y) ({ uint8_t __ret = o.read(1560); o.write(1560,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__nb_amux__sel_ch0_gdref(y) ({ uint8_t __ret = ma_read_byte(1560); ma_write_byte(1560,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__nb_amux__sel_ch0_gdref(o) (o.read(1560) & 0x0f)>>0
#define get_MA_acfg__nb_amux__sel_ch0_gdref() ( ma_read_byte(1560) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__nb_amux__sel_ch1_gdref---
// sel_ch1_gd_psu_ref
#define MA_acfg__nb_amux__sel_ch1_gdref__a 0x0618
#define MA_acfg__nb_amux__sel_ch1_gdref__len 4
#define MA_acfg__nb_amux__sel_ch1_gdref__mask 0xf0
#define MA_acfg__nb_amux__sel_ch1_gdref__shift 0x04
#define MA_acfg__nb_amux__sel_ch1_gdref__reset 0x00
#define MA_acfg__nb_amux__sel_ch1_gdref__inputonly 0
#define set_obj_MA_acfg__nb_amux__sel_ch1_gdref(o,y) ({ uint8_t __ret = o.read(1560); o.write(1560,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__nb_amux__sel_ch1_gdref(y) ({ uint8_t __ret = ma_read_byte(1560); ma_write_byte(1560,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__nb_amux__sel_ch1_gdref(o) (o.read(1560) & 0xf0)>>4
#define get_MA_acfg__nb_amux__sel_ch1_gdref() ( ma_read_byte(1560) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__nb_amux__sel_ch0_reg---
// sel_ch0_regulators
#define MA_acfg__nb_amux__sel_ch0_reg__a 0x0619
#define MA_acfg__nb_amux__sel_ch0_reg__len 4
#define MA_acfg__nb_amux__sel_ch0_reg__mask 0x0f
#define MA_acfg__nb_amux__sel_ch0_reg__shift 0x00
#define MA_acfg__nb_amux__sel_ch0_reg__reset 0x00
#define MA_acfg__nb_amux__sel_ch0_reg__inputonly 0
#define set_obj_MA_acfg__nb_amux__sel_ch0_reg(o,y) ({ uint8_t __ret = o.read(1561); o.write(1561,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__nb_amux__sel_ch0_reg(y) ({ uint8_t __ret = ma_read_byte(1561); ma_write_byte(1561,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__nb_amux__sel_ch0_reg(o) (o.read(1561) & 0x0f)>>0
#define get_MA_acfg__nb_amux__sel_ch0_reg() ( ma_read_byte(1561) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__nb_amux__sel_ch1_reg---
// sel_ch1_regulators
#define MA_acfg__nb_amux__sel_ch1_reg__a 0x0619
#define MA_acfg__nb_amux__sel_ch1_reg__len 4
#define MA_acfg__nb_amux__sel_ch1_reg__mask 0xf0
#define MA_acfg__nb_amux__sel_ch1_reg__shift 0x04
#define MA_acfg__nb_amux__sel_ch1_reg__reset 0x00
#define MA_acfg__nb_amux__sel_ch1_reg__inputonly 0
#define set_obj_MA_acfg__nb_amux__sel_ch1_reg(o,y) ({ uint8_t __ret = o.read(1561); o.write(1561,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__nb_amux__sel_ch1_reg(y) ({ uint8_t __ret = ma_read_byte(1561); ma_write_byte(1561,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__nb_amux__sel_ch1_reg(o) (o.read(1561) & 0xf0)>>4
#define get_MA_acfg__nb_amux__sel_ch1_reg() ( ma_read_byte(1561) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__afir0__rcmpu_en---
// rcmpu_en xxx filin
#define MA_acfg__afir0__rcmpu_en__a 0x0640
#define MA_acfg__afir0__rcmpu_en__len 1
#define MA_acfg__afir0__rcmpu_en__mask 0x01
#define MA_acfg__afir0__rcmpu_en__shift 0x00
#define MA_acfg__afir0__rcmpu_en__reset 0x00
#define MA_acfg__afir0__rcmpu_en__inputonly 0
#define set_obj_MA_acfg__afir0__rcmpu_en(o,y) ({ uint8_t __ret = o.read(1600); o.write(1600,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_acfg__afir0__rcmpu_en(y) ({ uint8_t __ret = ma_read_byte(1600); ma_write_byte(1600,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_acfg__afir0__rcmpu_en(o) (o.read(1600) & 0x01)>>0
#define get_MA_acfg__afir0__rcmpu_en() ( ma_read_byte(1600) & 0x01)>>0
//------------------------------------------------------------------------------acfg__afir0__rcmpu_set---
// rcmpu_set xxx filin
#define MA_acfg__afir0__rcmpu_set__a 0x0640
#define MA_acfg__afir0__rcmpu_set__len 3
#define MA_acfg__afir0__rcmpu_set__mask 0x0e
#define MA_acfg__afir0__rcmpu_set__shift 0x01
#define MA_acfg__afir0__rcmpu_set__reset 0x00
#define MA_acfg__afir0__rcmpu_set__inputonly 0
#define set_obj_MA_acfg__afir0__rcmpu_set(o,y) ({ uint8_t __ret = o.read(1600); o.write(1600,(__ret&0xf1)|((y<<1)&0x0e)); })
#define set_MA_acfg__afir0__rcmpu_set(y) ({ uint8_t __ret = ma_read_byte(1600); ma_write_byte(1600,(__ret&0xf1)|((y<<1)&0x0e)); })
#define get_obj_MA_acfg__afir0__rcmpu_set(o) (o.read(1600) & 0x0e)>>1
#define get_MA_acfg__afir0__rcmpu_set() ( ma_read_byte(1600) & 0x0e)>>1
//------------------------------------------------------------------------------acfg__afir0__rfilter_scale---
// rfilter_scale xxx filin
#define MA_acfg__afir0__rfilter_scale__a 0x0641
#define MA_acfg__afir0__rfilter_scale__len 2
#define MA_acfg__afir0__rfilter_scale__mask 0x60
#define MA_acfg__afir0__rfilter_scale__shift 0x05
#define MA_acfg__afir0__rfilter_scale__reset 0x00
#define MA_acfg__afir0__rfilter_scale__inputonly 0
#define set_obj_MA_acfg__afir0__rfilter_scale(o,y) ({ uint8_t __ret = o.read(1601); o.write(1601,(__ret&0x9f)|((y<<5)&0x60)); })
#define set_MA_acfg__afir0__rfilter_scale(y) ({ uint8_t __ret = ma_read_byte(1601); ma_write_byte(1601,(__ret&0x9f)|((y<<5)&0x60)); })
#define get_obj_MA_acfg__afir0__rfilter_scale(o) (o.read(1601) & 0x60)>>5
#define get_MA_acfg__afir0__rfilter_scale() ( ma_read_byte(1601) & 0x60)>>5
//------------------------------------------------------------------------------acfg__afir0__pvdd_scale---
// pvdd_scale xxx filin
#define MA_acfg__afir0__pvdd_scale__a 0x0640
#define MA_acfg__afir0__pvdd_scale__len 2
#define MA_acfg__afir0__pvdd_scale__mask 0xc0
#define MA_acfg__afir0__pvdd_scale__shift 0x06
#define MA_acfg__afir0__pvdd_scale__reset 0x00
#define MA_acfg__afir0__pvdd_scale__inputonly 0
#define set_obj_MA_acfg__afir0__pvdd_scale(o,y) ({ uint8_t __ret = o.read(1600); o.write(1600,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_acfg__afir0__pvdd_scale(y) ({ uint8_t __ret = ma_read_byte(1600); ma_write_byte(1600,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_acfg__afir0__pvdd_scale(o) (o.read(1600) & 0xc0)>>6
#define get_MA_acfg__afir0__pvdd_scale() ( ma_read_byte(1600) & 0xc0)>>6
//------------------------------------------------------------------------------acfg__afir0__dout_en---
// dout_enable
#define MA_acfg__afir0__dout_en__a 0x0641
#define MA_acfg__afir0__dout_en__len 1
#define MA_acfg__afir0__dout_en__mask 0x80
#define MA_acfg__afir0__dout_en__shift 0x07
#define MA_acfg__afir0__dout_en__reset 0x00
#define MA_acfg__afir0__dout_en__inputonly 0
#define set_obj_MA_acfg__afir0__dout_en(o,y) ({ uint8_t __ret = o.read(1601); o.write(1601,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__afir0__dout_en(y) ({ uint8_t __ret = ma_read_byte(1601); ma_write_byte(1601,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__afir0__dout_en(o) (o.read(1601) & 0x80)>>7
#define get_MA_acfg__afir0__dout_en() ( ma_read_byte(1601) & 0x80)>>7
//------------------------------------------------------------------------------acfg__afir0__vdsat_trim---
// vdsat trim
#define MA_acfg__afir0__vdsat_trim__a 0x0641
#define MA_acfg__afir0__vdsat_trim__len 4
#define MA_acfg__afir0__vdsat_trim__mask 0x1e
#define MA_acfg__afir0__vdsat_trim__shift 0x01
#define MA_acfg__afir0__vdsat_trim__reset 0x00
#define MA_acfg__afir0__vdsat_trim__inputonly 0
#define set_obj_MA_acfg__afir0__vdsat_trim(o,y) ({ uint8_t __ret = o.read(1601); o.write(1601,(__ret&0xe1)|((y<<1)&0x1e)); })
#define set_MA_acfg__afir0__vdsat_trim(y) ({ uint8_t __ret = ma_read_byte(1601); ma_write_byte(1601,(__ret&0xe1)|((y<<1)&0x1e)); })
#define get_obj_MA_acfg__afir0__vdsat_trim(o) (o.read(1601) & 0x1e)>>1
#define get_MA_acfg__afir0__vdsat_trim() ( ma_read_byte(1601) & 0x1e)>>1
//------------------------------------------------------------------------------acfg__afir0__icmctrl_trim_en---
// icmctrl_trim_en
#define MA_acfg__afir0__icmctrl_trim_en__a 0x0641
#define MA_acfg__afir0__icmctrl_trim_en__len 1
#define MA_acfg__afir0__icmctrl_trim_en__mask 0x01
#define MA_acfg__afir0__icmctrl_trim_en__shift 0x00
#define MA_acfg__afir0__icmctrl_trim_en__reset 0x00
#define MA_acfg__afir0__icmctrl_trim_en__inputonly 0
#define set_obj_MA_acfg__afir0__icmctrl_trim_en(o,y) ({ uint8_t __ret = o.read(1601); o.write(1601,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_acfg__afir0__icmctrl_trim_en(y) ({ uint8_t __ret = ma_read_byte(1601); ma_write_byte(1601,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_acfg__afir0__icmctrl_trim_en(o) (o.read(1601) & 0x01)>>0
#define get_MA_acfg__afir0__icmctrl_trim_en() ( ma_read_byte(1601) & 0x01)>>0
//------------------------------------------------------------------------------acfg__afir0__cmctrl_en---
// cmctrl_en
#define MA_acfg__afir0__cmctrl_en__a 0x0640
#define MA_acfg__afir0__cmctrl_en__len 1
#define MA_acfg__afir0__cmctrl_en__mask 0x10
#define MA_acfg__afir0__cmctrl_en__shift 0x04
#define MA_acfg__afir0__cmctrl_en__reset 0x00
#define MA_acfg__afir0__cmctrl_en__inputonly 0
#define set_obj_MA_acfg__afir0__cmctrl_en(o,y) ({ uint8_t __ret = o.read(1600); o.write(1600,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_acfg__afir0__cmctrl_en(y) ({ uint8_t __ret = ma_read_byte(1600); ma_write_byte(1600,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_acfg__afir0__cmctrl_en(o) (o.read(1600) & 0x10)>>4
#define get_MA_acfg__afir0__cmctrl_en() ( ma_read_byte(1600) & 0x10)>>4
//------------------------------------------------------------------------------acfg__afir0__spare_dyn---
// spare
#define MA_acfg__afir0__spare_dyn__a 0x0640
#define MA_acfg__afir0__spare_dyn__len 1
#define MA_acfg__afir0__spare_dyn__mask 0x20
#define MA_acfg__afir0__spare_dyn__shift 0x05
#define MA_acfg__afir0__spare_dyn__reset 0x00
#define MA_acfg__afir0__spare_dyn__inputonly 0
#define set_obj_MA_acfg__afir0__spare_dyn(o,y) ({ uint8_t __ret = o.read(1600); o.write(1600,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_acfg__afir0__spare_dyn(y) ({ uint8_t __ret = ma_read_byte(1600); ma_write_byte(1600,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_acfg__afir0__spare_dyn(o) (o.read(1600) & 0x20)>>5
#define get_MA_acfg__afir0__spare_dyn() ( ma_read_byte(1600) & 0x20)>>5
//------------------------------------------------------------------------------acfg__lf0l__spare_30---
// spare
#define MA_acfg__lf0l__spare_30__a 0x064b
#define MA_acfg__lf0l__spare_30__len 2
#define MA_acfg__lf0l__spare_30__mask 0xc0
#define MA_acfg__lf0l__spare_30__shift 0x06
#define MA_acfg__lf0l__spare_30__reset 0x00
#define MA_acfg__lf0l__spare_30__inputonly 0
#define set_obj_MA_acfg__lf0l__spare_30(o,y) ({ uint8_t __ret = o.read(1611); o.write(1611,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_acfg__lf0l__spare_30(y) ({ uint8_t __ret = ma_read_byte(1611); ma_write_byte(1611,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_acfg__lf0l__spare_30(o) (o.read(1611) & 0xc0)>>6
#define get_MA_acfg__lf0l__spare_30() ( ma_read_byte(1611) & 0xc0)>>6
//------------------------------------------------------------------------------acfg__lf0l__afir_rref_trim---
// afir rref trim
#define MA_acfg__lf0l__afir_rref_trim__a 0x064b
#define MA_acfg__lf0l__afir_rref_trim__len 6
#define MA_acfg__lf0l__afir_rref_trim__mask 0x3f
#define MA_acfg__lf0l__afir_rref_trim__shift 0x00
#define MA_acfg__lf0l__afir_rref_trim__reset 0x00
#define MA_acfg__lf0l__afir_rref_trim__inputonly 0
#define set_obj_MA_acfg__lf0l__afir_rref_trim(o,y) ({ uint8_t __ret = o.read(1611); o.write(1611,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_acfg__lf0l__afir_rref_trim(y) ({ uint8_t __ret = ma_read_byte(1611); ma_write_byte(1611,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_acfg__lf0l__afir_rref_trim(o) (o.read(1611) & 0x3f)>>0
#define get_MA_acfg__lf0l__afir_rref_trim() ( ma_read_byte(1611) & 0x3f)>>0
//------------------------------------------------------------------------------acfg__lf0l__chop_en---
// chop_en XXX fill in
#define MA_acfg__lf0l__chop_en__a 0x064a
#define MA_acfg__lf0l__chop_en__len 1
#define MA_acfg__lf0l__chop_en__mask 0x40
#define MA_acfg__lf0l__chop_en__shift 0x06
#define MA_acfg__lf0l__chop_en__reset 0x00
#define MA_acfg__lf0l__chop_en__inputonly 0
#define set_obj_MA_acfg__lf0l__chop_en(o,y) ({ uint8_t __ret = o.read(1610); o.write(1610,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_acfg__lf0l__chop_en(y) ({ uint8_t __ret = ma_read_byte(1610); ma_write_byte(1610,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_acfg__lf0l__chop_en(o) (o.read(1610) & 0x40)>>6
#define get_MA_acfg__lf0l__chop_en() ( ma_read_byte(1610) & 0x40)>>6
//------------------------------------------------------------------------------acfg__lf0l__chop_dis_state---
// chop_dis_state XXX fill in
#define MA_acfg__lf0l__chop_dis_state__a 0x064a
#define MA_acfg__lf0l__chop_dis_state__len 1
#define MA_acfg__lf0l__chop_dis_state__mask 0x20
#define MA_acfg__lf0l__chop_dis_state__shift 0x05
#define MA_acfg__lf0l__chop_dis_state__reset 0x00
#define MA_acfg__lf0l__chop_dis_state__inputonly 0
#define set_obj_MA_acfg__lf0l__chop_dis_state(o,y) ({ uint8_t __ret = o.read(1610); o.write(1610,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_acfg__lf0l__chop_dis_state(y) ({ uint8_t __ret = ma_read_byte(1610); ma_write_byte(1610,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_acfg__lf0l__chop_dis_state(o) (o.read(1610) & 0x20)>>5
#define get_MA_acfg__lf0l__chop_dis_state() ( ma_read_byte(1610) & 0x20)>>5
//------------------------------------------------------------------------------acfg__lf0l__fb_res_en_force---
// fb_res_en_force XXX fill in
#define MA_acfg__lf0l__fb_res_en_force__a 0x064a
#define MA_acfg__lf0l__fb_res_en_force__len 1
#define MA_acfg__lf0l__fb_res_en_force__mask 0x10
#define MA_acfg__lf0l__fb_res_en_force__shift 0x04
#define MA_acfg__lf0l__fb_res_en_force__reset 0x00
#define MA_acfg__lf0l__fb_res_en_force__inputonly 0
#define set_obj_MA_acfg__lf0l__fb_res_en_force(o,y) ({ uint8_t __ret = o.read(1610); o.write(1610,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_acfg__lf0l__fb_res_en_force(y) ({ uint8_t __ret = ma_read_byte(1610); ma_write_byte(1610,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_acfg__lf0l__fb_res_en_force(o) (o.read(1610) & 0x10)>>4
#define get_MA_acfg__lf0l__fb_res_en_force() ( ma_read_byte(1610) & 0x10)>>4
//------------------------------------------------------------------------------acfg__lf0l__rtrim---
// rtrim XXX fill in
#define MA_acfg__lf0l__rtrim__a 0x064a
#define MA_acfg__lf0l__rtrim__len 4
#define MA_acfg__lf0l__rtrim__mask 0x0f
#define MA_acfg__lf0l__rtrim__shift 0x00
#define MA_acfg__lf0l__rtrim__reset 0x00
#define MA_acfg__lf0l__rtrim__inputonly 0
#define set_obj_MA_acfg__lf0l__rtrim(o,y) ({ uint8_t __ret = o.read(1610); o.write(1610,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__lf0l__rtrim(y) ({ uint8_t __ret = ma_read_byte(1610); ma_write_byte(1610,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__lf0l__rtrim(o) (o.read(1610) & 0x0f)>>0
#define get_MA_acfg__lf0l__rtrim() ( ma_read_byte(1610) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__lf0l__cmr_ctrim_p---
// cmr_ctrim_p XXX fill in
#define MA_acfg__lf0l__cmr_ctrim_p__a 0x0649
#define MA_acfg__lf0l__cmr_ctrim_p__len 4
#define MA_acfg__lf0l__cmr_ctrim_p__mask 0xf0
#define MA_acfg__lf0l__cmr_ctrim_p__shift 0x04
#define MA_acfg__lf0l__cmr_ctrim_p__reset 0x00
#define MA_acfg__lf0l__cmr_ctrim_p__inputonly 0
#define set_obj_MA_acfg__lf0l__cmr_ctrim_p(o,y) ({ uint8_t __ret = o.read(1609); o.write(1609,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__lf0l__cmr_ctrim_p(y) ({ uint8_t __ret = ma_read_byte(1609); ma_write_byte(1609,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__lf0l__cmr_ctrim_p(o) (o.read(1609) & 0xf0)>>4
#define get_MA_acfg__lf0l__cmr_ctrim_p() ( ma_read_byte(1609) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__lf0l__cmr_ctrim_n---
// cmr_ctrim_n XXX fill in
#define MA_acfg__lf0l__cmr_ctrim_n__a 0x0649
#define MA_acfg__lf0l__cmr_ctrim_n__len 4
#define MA_acfg__lf0l__cmr_ctrim_n__mask 0x0f
#define MA_acfg__lf0l__cmr_ctrim_n__shift 0x00
#define MA_acfg__lf0l__cmr_ctrim_n__reset 0x00
#define MA_acfg__lf0l__cmr_ctrim_n__inputonly 0
#define set_obj_MA_acfg__lf0l__cmr_ctrim_n(o,y) ({ uint8_t __ret = o.read(1609); o.write(1609,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__lf0l__cmr_ctrim_n(y) ({ uint8_t __ret = ma_read_byte(1609); ma_write_byte(1609,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__lf0l__cmr_ctrim_n(o) (o.read(1609) & 0x0f)>>0
#define get_MA_acfg__lf0l__cmr_ctrim_n() ( ma_read_byte(1609) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__lf0l__cmr_rtrim_p---
// cmr_rtrim_p XXX fill in
#define MA_acfg__lf0l__cmr_rtrim_p__a 0x0648
#define MA_acfg__lf0l__cmr_rtrim_p__len 4
#define MA_acfg__lf0l__cmr_rtrim_p__mask 0xf0
#define MA_acfg__lf0l__cmr_rtrim_p__shift 0x04
#define MA_acfg__lf0l__cmr_rtrim_p__reset 0x00
#define MA_acfg__lf0l__cmr_rtrim_p__inputonly 0
#define set_obj_MA_acfg__lf0l__cmr_rtrim_p(o,y) ({ uint8_t __ret = o.read(1608); o.write(1608,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__lf0l__cmr_rtrim_p(y) ({ uint8_t __ret = ma_read_byte(1608); ma_write_byte(1608,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__lf0l__cmr_rtrim_p(o) (o.read(1608) & 0xf0)>>4
#define get_MA_acfg__lf0l__cmr_rtrim_p() ( ma_read_byte(1608) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__lf0l__cmr_rtrim_n---
// cmr_rtrim_n XXX fill in
#define MA_acfg__lf0l__cmr_rtrim_n__a 0x0648
#define MA_acfg__lf0l__cmr_rtrim_n__len 4
#define MA_acfg__lf0l__cmr_rtrim_n__mask 0x0f
#define MA_acfg__lf0l__cmr_rtrim_n__shift 0x00
#define MA_acfg__lf0l__cmr_rtrim_n__reset 0x00
#define MA_acfg__lf0l__cmr_rtrim_n__inputonly 0
#define set_obj_MA_acfg__lf0l__cmr_rtrim_n(o,y) ({ uint8_t __ret = o.read(1608); o.write(1608,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__lf0l__cmr_rtrim_n(y) ({ uint8_t __ret = ma_read_byte(1608); ma_write_byte(1608,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__lf0l__cmr_rtrim_n(o) (o.read(1608) & 0x0f)>>0
#define get_MA_acfg__lf0l__cmr_rtrim_n() ( ma_read_byte(1608) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__lf0l__spare_23---
// spare
#define MA_acfg__lf0l__spare_23__a 0x064a
#define MA_acfg__lf0l__spare_23__len 1
#define MA_acfg__lf0l__spare_23__mask 0x80
#define MA_acfg__lf0l__spare_23__shift 0x07
#define MA_acfg__lf0l__spare_23__reset 0x00
#define MA_acfg__lf0l__spare_23__inputonly 0
#define set_obj_MA_acfg__lf0l__spare_23(o,y) ({ uint8_t __ret = o.read(1610); o.write(1610,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__lf0l__spare_23(y) ({ uint8_t __ret = ma_read_byte(1610); ma_write_byte(1610,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__lf0l__spare_23(o) (o.read(1610) & 0x80)>>7
#define get_MA_acfg__lf0l__spare_23() ( ma_read_byte(1610) & 0x80)>>7
//------------------------------------------------------------------------------acfg__lf0h__ch0_mux---
// select debug ch0 amux
#define MA_acfg__lf0h__ch0_mux__a 0x0651
#define MA_acfg__lf0h__ch0_mux__len 4
#define MA_acfg__lf0h__ch0_mux__mask 0x0f
#define MA_acfg__lf0h__ch0_mux__shift 0x00
#define MA_acfg__lf0h__ch0_mux__reset 0x00
#define MA_acfg__lf0h__ch0_mux__inputonly 0
#define set_obj_MA_acfg__lf0h__ch0_mux(o,y) ({ uint8_t __ret = o.read(1617); o.write(1617,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__lf0h__ch0_mux(y) ({ uint8_t __ret = ma_read_byte(1617); ma_write_byte(1617,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__lf0h__ch0_mux(o) (o.read(1617) & 0x0f)>>0
#define get_MA_acfg__lf0h__ch0_mux() ( ma_read_byte(1617) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__lf0h__spare_1---
// spare_1
#define MA_acfg__lf0h__spare_1__a 0x0650
#define MA_acfg__lf0h__spare_1__len 2
#define MA_acfg__lf0h__spare_1__mask 0xc0
#define MA_acfg__lf0h__spare_1__shift 0x06
#define MA_acfg__lf0h__spare_1__reset 0x00
#define MA_acfg__lf0h__spare_1__inputonly 0
#define set_obj_MA_acfg__lf0h__spare_1(o,y) ({ uint8_t __ret = o.read(1616); o.write(1616,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_acfg__lf0h__spare_1(y) ({ uint8_t __ret = ma_read_byte(1616); ma_write_byte(1616,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_acfg__lf0h__spare_1(o) (o.read(1616) & 0xc0)>>6
#define get_MA_acfg__lf0h__spare_1() ( ma_read_byte(1616) & 0xc0)>>6
//------------------------------------------------------------------------------acfg__lf0h__gain_fwd---
// loopfilter gain_fwd
#define MA_acfg__lf0h__gain_fwd__a 0x0650
#define MA_acfg__lf0h__gain_fwd__len 3
#define MA_acfg__lf0h__gain_fwd__mask 0x07
#define MA_acfg__lf0h__gain_fwd__shift 0x00
#define MA_acfg__lf0h__gain_fwd__reset 0x00
#define MA_acfg__lf0h__gain_fwd__inputonly 0
#define set_obj_MA_acfg__lf0h__gain_fwd(o,y) ({ uint8_t __ret = o.read(1616); o.write(1616,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_acfg__lf0h__gain_fwd(y) ({ uint8_t __ret = ma_read_byte(1616); ma_write_byte(1616,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_acfg__lf0h__gain_fwd(o) (o.read(1616) & 0x07)>>0
#define get_MA_acfg__lf0h__gain_fwd() ( ma_read_byte(1616) & 0x07)>>0
//------------------------------------------------------------------------------acfg__lf0h__ch1_mux---
// select debug ch1 amux
#define MA_acfg__lf0h__ch1_mux__a 0x0651
#define MA_acfg__lf0h__ch1_mux__len 4
#define MA_acfg__lf0h__ch1_mux__mask 0xf0
#define MA_acfg__lf0h__ch1_mux__shift 0x04
#define MA_acfg__lf0h__ch1_mux__reset 0x00
#define MA_acfg__lf0h__ch1_mux__inputonly 0
#define set_obj_MA_acfg__lf0h__ch1_mux(o,y) ({ uint8_t __ret = o.read(1617); o.write(1617,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__lf0h__ch1_mux(y) ({ uint8_t __ret = ma_read_byte(1617); ma_write_byte(1617,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__lf0h__ch1_mux(o) (o.read(1617) & 0xf0)>>4
#define get_MA_acfg__lf0h__ch1_mux() ( ma_read_byte(1617) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__lf0h__int3_c_scale---
// integrator3 c scale
#define MA_acfg__lf0h__int3_c_scale__a 0x0650
#define MA_acfg__lf0h__int3_c_scale__len 3
#define MA_acfg__lf0h__int3_c_scale__mask 0x38
#define MA_acfg__lf0h__int3_c_scale__shift 0x03
#define MA_acfg__lf0h__int3_c_scale__reset 0x00
#define MA_acfg__lf0h__int3_c_scale__inputonly 0
#define set_obj_MA_acfg__lf0h__int3_c_scale(o,y) ({ uint8_t __ret = o.read(1616); o.write(1616,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_acfg__lf0h__int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(1616); ma_write_byte(1616,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_acfg__lf0h__int3_c_scale(o) (o.read(1616) & 0x38)>>3
#define get_MA_acfg__lf0h__int3_c_scale() ( ma_read_byte(1616) & 0x38)>>3
//------------------------------------------------------------------------------acfg__pwm0__sel_ch1_amux---
// select debug ch1 amux XXX fill in coding
#define MA_acfg__pwm0__sel_ch1_amux__a 0x0659
#define MA_acfg__pwm0__sel_ch1_amux__len 4
#define MA_acfg__pwm0__sel_ch1_amux__mask 0xf0
#define MA_acfg__pwm0__sel_ch1_amux__shift 0x04
#define MA_acfg__pwm0__sel_ch1_amux__reset 0x00
#define MA_acfg__pwm0__sel_ch1_amux__inputonly 0
#define set_obj_MA_acfg__pwm0__sel_ch1_amux(o,y) ({ uint8_t __ret = o.read(1625); o.write(1625,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__pwm0__sel_ch1_amux(y) ({ uint8_t __ret = ma_read_byte(1625); ma_write_byte(1625,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__pwm0__sel_ch1_amux(o) (o.read(1625) & 0xf0)>>4
#define get_MA_acfg__pwm0__sel_ch1_amux() ( ma_read_byte(1625) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__pwm0__sel_ch0_amux---
// select debug ch0 amux XXX fill in coding
#define MA_acfg__pwm0__sel_ch0_amux__a 0x0659
#define MA_acfg__pwm0__sel_ch0_amux__len 4
#define MA_acfg__pwm0__sel_ch0_amux__mask 0x0f
#define MA_acfg__pwm0__sel_ch0_amux__shift 0x00
#define MA_acfg__pwm0__sel_ch0_amux__reset 0x00
#define MA_acfg__pwm0__sel_ch0_amux__inputonly 0
#define set_obj_MA_acfg__pwm0__sel_ch0_amux(o,y) ({ uint8_t __ret = o.read(1625); o.write(1625,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__pwm0__sel_ch0_amux(y) ({ uint8_t __ret = ma_read_byte(1625); ma_write_byte(1625,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__pwm0__sel_ch0_amux(o) (o.read(1625) & 0x0f)>>0
#define get_MA_acfg__pwm0__sel_ch0_amux() ( ma_read_byte(1625) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__pwm0__ipol_pos_b---
// ipol_pos_b XXX fill in
#define MA_acfg__pwm0__ipol_pos_b__a 0x0658
#define MA_acfg__pwm0__ipol_pos_b__len 1
#define MA_acfg__pwm0__ipol_pos_b__mask 0x80
#define MA_acfg__pwm0__ipol_pos_b__shift 0x07
#define MA_acfg__pwm0__ipol_pos_b__reset 0x00
#define MA_acfg__pwm0__ipol_pos_b__inputonly 1
#define set_obj_MA_acfg__pwm0__ipol_pos_b(o,y) ({ uint8_t __ret = o.read(1624); o.write(1624,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__pwm0__ipol_pos_b(y) ({ uint8_t __ret = ma_read_byte(1624); ma_write_byte(1624,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__pwm0__ipol_pos_b(o) (o.read(1624) & 0x80)>>7
#define get_MA_acfg__pwm0__ipol_pos_b() ( ma_read_byte(1624) & 0x80)>>7
//------------------------------------------------------------------------------acfg__pwm0__ipol_neither_b---
// ipol_neither_b XXX fill in
#define MA_acfg__pwm0__ipol_neither_b__a 0x0658
#define MA_acfg__pwm0__ipol_neither_b__len 1
#define MA_acfg__pwm0__ipol_neither_b__mask 0x40
#define MA_acfg__pwm0__ipol_neither_b__shift 0x06
#define MA_acfg__pwm0__ipol_neither_b__reset 0x00
#define MA_acfg__pwm0__ipol_neither_b__inputonly 1
#define set_obj_MA_acfg__pwm0__ipol_neither_b(o,y) ({ uint8_t __ret = o.read(1624); o.write(1624,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_acfg__pwm0__ipol_neither_b(y) ({ uint8_t __ret = ma_read_byte(1624); ma_write_byte(1624,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_acfg__pwm0__ipol_neither_b(o) (o.read(1624) & 0x40)>>6
#define get_MA_acfg__pwm0__ipol_neither_b() ( ma_read_byte(1624) & 0x40)>>6
//------------------------------------------------------------------------------acfg__pwm0__ipol_neg_b---
// ipol_neg_b XXX fill in
#define MA_acfg__pwm0__ipol_neg_b__a 0x0658
#define MA_acfg__pwm0__ipol_neg_b__len 1
#define MA_acfg__pwm0__ipol_neg_b__mask 0x20
#define MA_acfg__pwm0__ipol_neg_b__shift 0x05
#define MA_acfg__pwm0__ipol_neg_b__reset 0x00
#define MA_acfg__pwm0__ipol_neg_b__inputonly 1
#define set_obj_MA_acfg__pwm0__ipol_neg_b(o,y) ({ uint8_t __ret = o.read(1624); o.write(1624,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_acfg__pwm0__ipol_neg_b(y) ({ uint8_t __ret = ma_read_byte(1624); ma_write_byte(1624,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_acfg__pwm0__ipol_neg_b(o) (o.read(1624) & 0x20)>>5
#define get_MA_acfg__pwm0__ipol_neg_b() ( ma_read_byte(1624) & 0x20)>>5
//------------------------------------------------------------------------------acfg__pwm0__clk_vcf_upd_b---
// clk_vcf_upd_b XXX fill in
#define MA_acfg__pwm0__clk_vcf_upd_b__a 0x0658
#define MA_acfg__pwm0__clk_vcf_upd_b__len 1
#define MA_acfg__pwm0__clk_vcf_upd_b__mask 0x10
#define MA_acfg__pwm0__clk_vcf_upd_b__shift 0x04
#define MA_acfg__pwm0__clk_vcf_upd_b__reset 0x00
#define MA_acfg__pwm0__clk_vcf_upd_b__inputonly 1
#define set_obj_MA_acfg__pwm0__clk_vcf_upd_b(o,y) ({ uint8_t __ret = o.read(1624); o.write(1624,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_acfg__pwm0__clk_vcf_upd_b(y) ({ uint8_t __ret = ma_read_byte(1624); ma_write_byte(1624,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_acfg__pwm0__clk_vcf_upd_b(o) (o.read(1624) & 0x10)>>4
#define get_MA_acfg__pwm0__clk_vcf_upd_b() ( ma_read_byte(1624) & 0x10)>>4
//------------------------------------------------------------------------------acfg__pwm0__ipol_pos_a---
// ipol_pos_a XXX fill in
#define MA_acfg__pwm0__ipol_pos_a__a 0x0658
#define MA_acfg__pwm0__ipol_pos_a__len 1
#define MA_acfg__pwm0__ipol_pos_a__mask 0x08
#define MA_acfg__pwm0__ipol_pos_a__shift 0x03
#define MA_acfg__pwm0__ipol_pos_a__reset 0x00
#define MA_acfg__pwm0__ipol_pos_a__inputonly 1
#define set_obj_MA_acfg__pwm0__ipol_pos_a(o,y) ({ uint8_t __ret = o.read(1624); o.write(1624,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_acfg__pwm0__ipol_pos_a(y) ({ uint8_t __ret = ma_read_byte(1624); ma_write_byte(1624,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_acfg__pwm0__ipol_pos_a(o) (o.read(1624) & 0x08)>>3
#define get_MA_acfg__pwm0__ipol_pos_a() ( ma_read_byte(1624) & 0x08)>>3
//------------------------------------------------------------------------------acfg__pwm0__ipol_neither_a---
// ipol_neither_a XXX fill in
#define MA_acfg__pwm0__ipol_neither_a__a 0x0658
#define MA_acfg__pwm0__ipol_neither_a__len 1
#define MA_acfg__pwm0__ipol_neither_a__mask 0x04
#define MA_acfg__pwm0__ipol_neither_a__shift 0x02
#define MA_acfg__pwm0__ipol_neither_a__reset 0x00
#define MA_acfg__pwm0__ipol_neither_a__inputonly 1
#define set_obj_MA_acfg__pwm0__ipol_neither_a(o,y) ({ uint8_t __ret = o.read(1624); o.write(1624,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_acfg__pwm0__ipol_neither_a(y) ({ uint8_t __ret = ma_read_byte(1624); ma_write_byte(1624,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_acfg__pwm0__ipol_neither_a(o) (o.read(1624) & 0x04)>>2
#define get_MA_acfg__pwm0__ipol_neither_a() ( ma_read_byte(1624) & 0x04)>>2
//------------------------------------------------------------------------------acfg__pwm0__ipol_neg_a---
// ipol_neg_a XXX fill in
#define MA_acfg__pwm0__ipol_neg_a__a 0x0658
#define MA_acfg__pwm0__ipol_neg_a__len 1
#define MA_acfg__pwm0__ipol_neg_a__mask 0x02
#define MA_acfg__pwm0__ipol_neg_a__shift 0x01
#define MA_acfg__pwm0__ipol_neg_a__reset 0x00
#define MA_acfg__pwm0__ipol_neg_a__inputonly 1
#define set_obj_MA_acfg__pwm0__ipol_neg_a(o,y) ({ uint8_t __ret = o.read(1624); o.write(1624,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_acfg__pwm0__ipol_neg_a(y) ({ uint8_t __ret = ma_read_byte(1624); ma_write_byte(1624,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_acfg__pwm0__ipol_neg_a(o) (o.read(1624) & 0x02)>>1
#define get_MA_acfg__pwm0__ipol_neg_a() ( ma_read_byte(1624) & 0x02)>>1
//------------------------------------------------------------------------------acfg__pwm0__clk_vcf_upd_a---
// clk_vcf_upd_a XXX fill in
#define MA_acfg__pwm0__clk_vcf_upd_a__a 0x0658
#define MA_acfg__pwm0__clk_vcf_upd_a__len 1
#define MA_acfg__pwm0__clk_vcf_upd_a__mask 0x01
#define MA_acfg__pwm0__clk_vcf_upd_a__shift 0x00
#define MA_acfg__pwm0__clk_vcf_upd_a__reset 0x00
#define MA_acfg__pwm0__clk_vcf_upd_a__inputonly 1
#define set_obj_MA_acfg__pwm0__clk_vcf_upd_a(o,y) ({ uint8_t __ret = o.read(1624); o.write(1624,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_acfg__pwm0__clk_vcf_upd_a(y) ({ uint8_t __ret = ma_read_byte(1624); ma_write_byte(1624,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_acfg__pwm0__clk_vcf_upd_a(o) (o.read(1624) & 0x01)>>0
#define get_MA_acfg__pwm0__clk_vcf_upd_a() ( ma_read_byte(1624) & 0x01)>>0
//------------------------------------------------------------------------------acfg__lf1l__spare_3_76---
// spare_0
#define MA_acfg__lf1l__spare_3_76__a 0x066b
#define MA_acfg__lf1l__spare_3_76__len 2
#define MA_acfg__lf1l__spare_3_76__mask 0xc0
#define MA_acfg__lf1l__spare_3_76__shift 0x06
#define MA_acfg__lf1l__spare_3_76__reset 0x00
#define MA_acfg__lf1l__spare_3_76__inputonly 0
#define set_obj_MA_acfg__lf1l__spare_3_76(o,y) ({ uint8_t __ret = o.read(1643); o.write(1643,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_acfg__lf1l__spare_3_76(y) ({ uint8_t __ret = ma_read_byte(1643); ma_write_byte(1643,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_acfg__lf1l__spare_3_76(o) (o.read(1643) & 0xc0)>>6
#define get_MA_acfg__lf1l__spare_3_76() ( ma_read_byte(1643) & 0xc0)>>6
//------------------------------------------------------------------------------acfg__lf1l__afir_rref_trim---
// afir_rref_trim
#define MA_acfg__lf1l__afir_rref_trim__a 0x066b
#define MA_acfg__lf1l__afir_rref_trim__len 6
#define MA_acfg__lf1l__afir_rref_trim__mask 0x3f
#define MA_acfg__lf1l__afir_rref_trim__shift 0x00
#define MA_acfg__lf1l__afir_rref_trim__reset 0x00
#define MA_acfg__lf1l__afir_rref_trim__inputonly 0
#define set_obj_MA_acfg__lf1l__afir_rref_trim(o,y) ({ uint8_t __ret = o.read(1643); o.write(1643,(__ret&0xc0)|((y<<0)&0x3f)); })
#define set_MA_acfg__lf1l__afir_rref_trim(y) ({ uint8_t __ret = ma_read_byte(1643); ma_write_byte(1643,(__ret&0xc0)|((y<<0)&0x3f)); })
#define get_obj_MA_acfg__lf1l__afir_rref_trim(o) (o.read(1643) & 0x3f)>>0
#define get_MA_acfg__lf1l__afir_rref_trim() ( ma_read_byte(1643) & 0x3f)>>0
//------------------------------------------------------------------------------acfg__lf1l__spare_2_7---
// spare fill in
#define MA_acfg__lf1l__spare_2_7__a 0x066a
#define MA_acfg__lf1l__spare_2_7__len 1
#define MA_acfg__lf1l__spare_2_7__mask 0x80
#define MA_acfg__lf1l__spare_2_7__shift 0x07
#define MA_acfg__lf1l__spare_2_7__reset 0x00
#define MA_acfg__lf1l__spare_2_7__inputonly 0
#define set_obj_MA_acfg__lf1l__spare_2_7(o,y) ({ uint8_t __ret = o.read(1642); o.write(1642,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__lf1l__spare_2_7(y) ({ uint8_t __ret = ma_read_byte(1642); ma_write_byte(1642,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__lf1l__spare_2_7(o) (o.read(1642) & 0x80)>>7
#define get_MA_acfg__lf1l__spare_2_7() ( ma_read_byte(1642) & 0x80)>>7
//------------------------------------------------------------------------------acfg__lf1l__chop_en---
// chop_en XXX fill in
#define MA_acfg__lf1l__chop_en__a 0x066a
#define MA_acfg__lf1l__chop_en__len 1
#define MA_acfg__lf1l__chop_en__mask 0x40
#define MA_acfg__lf1l__chop_en__shift 0x06
#define MA_acfg__lf1l__chop_en__reset 0x00
#define MA_acfg__lf1l__chop_en__inputonly 0
#define set_obj_MA_acfg__lf1l__chop_en(o,y) ({ uint8_t __ret = o.read(1642); o.write(1642,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_acfg__lf1l__chop_en(y) ({ uint8_t __ret = ma_read_byte(1642); ma_write_byte(1642,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_acfg__lf1l__chop_en(o) (o.read(1642) & 0x40)>>6
#define get_MA_acfg__lf1l__chop_en() ( ma_read_byte(1642) & 0x40)>>6
//------------------------------------------------------------------------------acfg__lf1l__chop_dis_state---
// chop_dis_state XXX fill in
#define MA_acfg__lf1l__chop_dis_state__a 0x066a
#define MA_acfg__lf1l__chop_dis_state__len 1
#define MA_acfg__lf1l__chop_dis_state__mask 0x20
#define MA_acfg__lf1l__chop_dis_state__shift 0x05
#define MA_acfg__lf1l__chop_dis_state__reset 0x00
#define MA_acfg__lf1l__chop_dis_state__inputonly 0
#define set_obj_MA_acfg__lf1l__chop_dis_state(o,y) ({ uint8_t __ret = o.read(1642); o.write(1642,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_acfg__lf1l__chop_dis_state(y) ({ uint8_t __ret = ma_read_byte(1642); ma_write_byte(1642,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_acfg__lf1l__chop_dis_state(o) (o.read(1642) & 0x20)>>5
#define get_MA_acfg__lf1l__chop_dis_state() ( ma_read_byte(1642) & 0x20)>>5
//------------------------------------------------------------------------------acfg__lf1l__fb_res_en_force---
// fb_res_en_force XXX fill in
#define MA_acfg__lf1l__fb_res_en_force__a 0x066a
#define MA_acfg__lf1l__fb_res_en_force__len 1
#define MA_acfg__lf1l__fb_res_en_force__mask 0x10
#define MA_acfg__lf1l__fb_res_en_force__shift 0x04
#define MA_acfg__lf1l__fb_res_en_force__reset 0x00
#define MA_acfg__lf1l__fb_res_en_force__inputonly 0
#define set_obj_MA_acfg__lf1l__fb_res_en_force(o,y) ({ uint8_t __ret = o.read(1642); o.write(1642,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_acfg__lf1l__fb_res_en_force(y) ({ uint8_t __ret = ma_read_byte(1642); ma_write_byte(1642,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_acfg__lf1l__fb_res_en_force(o) (o.read(1642) & 0x10)>>4
#define get_MA_acfg__lf1l__fb_res_en_force() ( ma_read_byte(1642) & 0x10)>>4
//------------------------------------------------------------------------------acfg__lf1l__rtrim---
// rtrim XXX fill in
#define MA_acfg__lf1l__rtrim__a 0x066a
#define MA_acfg__lf1l__rtrim__len 4
#define MA_acfg__lf1l__rtrim__mask 0x0f
#define MA_acfg__lf1l__rtrim__shift 0x00
#define MA_acfg__lf1l__rtrim__reset 0x00
#define MA_acfg__lf1l__rtrim__inputonly 0
#define set_obj_MA_acfg__lf1l__rtrim(o,y) ({ uint8_t __ret = o.read(1642); o.write(1642,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__lf1l__rtrim(y) ({ uint8_t __ret = ma_read_byte(1642); ma_write_byte(1642,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__lf1l__rtrim(o) (o.read(1642) & 0x0f)>>0
#define get_MA_acfg__lf1l__rtrim() ( ma_read_byte(1642) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__lf1l__cmr_ctrim_p---
// cmr_ctrim_p XXX fill in
#define MA_acfg__lf1l__cmr_ctrim_p__a 0x0669
#define MA_acfg__lf1l__cmr_ctrim_p__len 4
#define MA_acfg__lf1l__cmr_ctrim_p__mask 0xf0
#define MA_acfg__lf1l__cmr_ctrim_p__shift 0x04
#define MA_acfg__lf1l__cmr_ctrim_p__reset 0x00
#define MA_acfg__lf1l__cmr_ctrim_p__inputonly 0
#define set_obj_MA_acfg__lf1l__cmr_ctrim_p(o,y) ({ uint8_t __ret = o.read(1641); o.write(1641,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__lf1l__cmr_ctrim_p(y) ({ uint8_t __ret = ma_read_byte(1641); ma_write_byte(1641,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__lf1l__cmr_ctrim_p(o) (o.read(1641) & 0xf0)>>4
#define get_MA_acfg__lf1l__cmr_ctrim_p() ( ma_read_byte(1641) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__lf1l__cmr_ctrim_n---
// cmr_ctrim_n XXX fill in
#define MA_acfg__lf1l__cmr_ctrim_n__a 0x0669
#define MA_acfg__lf1l__cmr_ctrim_n__len 4
#define MA_acfg__lf1l__cmr_ctrim_n__mask 0x0f
#define MA_acfg__lf1l__cmr_ctrim_n__shift 0x00
#define MA_acfg__lf1l__cmr_ctrim_n__reset 0x00
#define MA_acfg__lf1l__cmr_ctrim_n__inputonly 0
#define set_obj_MA_acfg__lf1l__cmr_ctrim_n(o,y) ({ uint8_t __ret = o.read(1641); o.write(1641,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__lf1l__cmr_ctrim_n(y) ({ uint8_t __ret = ma_read_byte(1641); ma_write_byte(1641,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__lf1l__cmr_ctrim_n(o) (o.read(1641) & 0x0f)>>0
#define get_MA_acfg__lf1l__cmr_ctrim_n() ( ma_read_byte(1641) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__lf1l__cmr_rtrim_p---
// cmr_rtrim_p XXX fill in
#define MA_acfg__lf1l__cmr_rtrim_p__a 0x0668
#define MA_acfg__lf1l__cmr_rtrim_p__len 4
#define MA_acfg__lf1l__cmr_rtrim_p__mask 0xf0
#define MA_acfg__lf1l__cmr_rtrim_p__shift 0x04
#define MA_acfg__lf1l__cmr_rtrim_p__reset 0x00
#define MA_acfg__lf1l__cmr_rtrim_p__inputonly 0
#define set_obj_MA_acfg__lf1l__cmr_rtrim_p(o,y) ({ uint8_t __ret = o.read(1640); o.write(1640,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__lf1l__cmr_rtrim_p(y) ({ uint8_t __ret = ma_read_byte(1640); ma_write_byte(1640,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__lf1l__cmr_rtrim_p(o) (o.read(1640) & 0xf0)>>4
#define get_MA_acfg__lf1l__cmr_rtrim_p() ( ma_read_byte(1640) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__lf1l__cmr_rtrim_n---
// cmr_rtrim_n XXX fill in
#define MA_acfg__lf1l__cmr_rtrim_n__a 0x0668
#define MA_acfg__lf1l__cmr_rtrim_n__len 4
#define MA_acfg__lf1l__cmr_rtrim_n__mask 0x0f
#define MA_acfg__lf1l__cmr_rtrim_n__shift 0x00
#define MA_acfg__lf1l__cmr_rtrim_n__reset 0x00
#define MA_acfg__lf1l__cmr_rtrim_n__inputonly 0
#define set_obj_MA_acfg__lf1l__cmr_rtrim_n(o,y) ({ uint8_t __ret = o.read(1640); o.write(1640,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__lf1l__cmr_rtrim_n(y) ({ uint8_t __ret = ma_read_byte(1640); ma_write_byte(1640,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__lf1l__cmr_rtrim_n(o) (o.read(1640) & 0x0f)>>0
#define get_MA_acfg__lf1l__cmr_rtrim_n() ( ma_read_byte(1640) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__lf1h__ch1_amux---
// select debug ch1 amux
#define MA_acfg__lf1h__ch1_amux__a 0x0671
#define MA_acfg__lf1h__ch1_amux__len 4
#define MA_acfg__lf1h__ch1_amux__mask 0xf0
#define MA_acfg__lf1h__ch1_amux__shift 0x04
#define MA_acfg__lf1h__ch1_amux__reset 0x00
#define MA_acfg__lf1h__ch1_amux__inputonly 0
#define set_obj_MA_acfg__lf1h__ch1_amux(o,y) ({ uint8_t __ret = o.read(1649); o.write(1649,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__lf1h__ch1_amux(y) ({ uint8_t __ret = ma_read_byte(1649); ma_write_byte(1649,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__lf1h__ch1_amux(o) (o.read(1649) & 0xf0)>>4
#define get_MA_acfg__lf1h__ch1_amux() ( ma_read_byte(1649) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__lf1h__ch0_amux---
// select debug ch0 amux
#define MA_acfg__lf1h__ch0_amux__a 0x0671
#define MA_acfg__lf1h__ch0_amux__len 4
#define MA_acfg__lf1h__ch0_amux__mask 0x0f
#define MA_acfg__lf1h__ch0_amux__shift 0x00
#define MA_acfg__lf1h__ch0_amux__reset 0x00
#define MA_acfg__lf1h__ch0_amux__inputonly 0
#define set_obj_MA_acfg__lf1h__ch0_amux(o,y) ({ uint8_t __ret = o.read(1649); o.write(1649,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__lf1h__ch0_amux(y) ({ uint8_t __ret = ma_read_byte(1649); ma_write_byte(1649,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__lf1h__ch0_amux(o) (o.read(1649) & 0x0f)>>0
#define get_MA_acfg__lf1h__ch0_amux() ( ma_read_byte(1649) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__lf1h__spare_1---
// spare_1
#define MA_acfg__lf1h__spare_1__a 0x0670
#define MA_acfg__lf1h__spare_1__len 2
#define MA_acfg__lf1h__spare_1__mask 0xc0
#define MA_acfg__lf1h__spare_1__shift 0x06
#define MA_acfg__lf1h__spare_1__reset 0x00
#define MA_acfg__lf1h__spare_1__inputonly 0
#define set_obj_MA_acfg__lf1h__spare_1(o,y) ({ uint8_t __ret = o.read(1648); o.write(1648,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_acfg__lf1h__spare_1(y) ({ uint8_t __ret = ma_read_byte(1648); ma_write_byte(1648,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_acfg__lf1h__spare_1(o) (o.read(1648) & 0xc0)>>6
#define get_MA_acfg__lf1h__spare_1() ( ma_read_byte(1648) & 0xc0)>>6
//------------------------------------------------------------------------------acfg__lf1h__gain_fwd---
// loopfilter gain_fwd
#define MA_acfg__lf1h__gain_fwd__a 0x0670
#define MA_acfg__lf1h__gain_fwd__len 3
#define MA_acfg__lf1h__gain_fwd__mask 0x07
#define MA_acfg__lf1h__gain_fwd__shift 0x00
#define MA_acfg__lf1h__gain_fwd__reset 0x00
#define MA_acfg__lf1h__gain_fwd__inputonly 0
#define set_obj_MA_acfg__lf1h__gain_fwd(o,y) ({ uint8_t __ret = o.read(1648); o.write(1648,(__ret&0xf8)|((y<<0)&0x07)); })
#define set_MA_acfg__lf1h__gain_fwd(y) ({ uint8_t __ret = ma_read_byte(1648); ma_write_byte(1648,(__ret&0xf8)|((y<<0)&0x07)); })
#define get_obj_MA_acfg__lf1h__gain_fwd(o) (o.read(1648) & 0x07)>>0
#define get_MA_acfg__lf1h__gain_fwd() ( ma_read_byte(1648) & 0x07)>>0
//------------------------------------------------------------------------------acfg__lf1h__int3_c_scale---
// Integrator3 c scale
#define MA_acfg__lf1h__int3_c_scale__a 0x0670
#define MA_acfg__lf1h__int3_c_scale__len 3
#define MA_acfg__lf1h__int3_c_scale__mask 0x38
#define MA_acfg__lf1h__int3_c_scale__shift 0x03
#define MA_acfg__lf1h__int3_c_scale__reset 0x00
#define MA_acfg__lf1h__int3_c_scale__inputonly 0
#define set_obj_MA_acfg__lf1h__int3_c_scale(o,y) ({ uint8_t __ret = o.read(1648); o.write(1648,(__ret&0xc7)|((y<<3)&0x38)); })
#define set_MA_acfg__lf1h__int3_c_scale(y) ({ uint8_t __ret = ma_read_byte(1648); ma_write_byte(1648,(__ret&0xc7)|((y<<3)&0x38)); })
#define get_obj_MA_acfg__lf1h__int3_c_scale(o) (o.read(1648) & 0x38)>>3
#define get_MA_acfg__lf1h__int3_c_scale() ( ma_read_byte(1648) & 0x38)>>3
//------------------------------------------------------------------------------acfg__pwm1__sel_ch1_amux---
// select debug ch1 amux XXX fill in coding
#define MA_acfg__pwm1__sel_ch1_amux__a 0x0679
#define MA_acfg__pwm1__sel_ch1_amux__len 4
#define MA_acfg__pwm1__sel_ch1_amux__mask 0xf0
#define MA_acfg__pwm1__sel_ch1_amux__shift 0x04
#define MA_acfg__pwm1__sel_ch1_amux__reset 0x00
#define MA_acfg__pwm1__sel_ch1_amux__inputonly 0
#define set_obj_MA_acfg__pwm1__sel_ch1_amux(o,y) ({ uint8_t __ret = o.read(1657); o.write(1657,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__pwm1__sel_ch1_amux(y) ({ uint8_t __ret = ma_read_byte(1657); ma_write_byte(1657,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__pwm1__sel_ch1_amux(o) (o.read(1657) & 0xf0)>>4
#define get_MA_acfg__pwm1__sel_ch1_amux() ( ma_read_byte(1657) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__pwm1__sel_ch0_amux---
// select debug ch0 amux XXX fill in coding
#define MA_acfg__pwm1__sel_ch0_amux__a 0x0679
#define MA_acfg__pwm1__sel_ch0_amux__len 4
#define MA_acfg__pwm1__sel_ch0_amux__mask 0x0f
#define MA_acfg__pwm1__sel_ch0_amux__shift 0x00
#define MA_acfg__pwm1__sel_ch0_amux__reset 0x00
#define MA_acfg__pwm1__sel_ch0_amux__inputonly 0
#define set_obj_MA_acfg__pwm1__sel_ch0_amux(o,y) ({ uint8_t __ret = o.read(1657); o.write(1657,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__pwm1__sel_ch0_amux(y) ({ uint8_t __ret = ma_read_byte(1657); ma_write_byte(1657,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__pwm1__sel_ch0_amux(o) (o.read(1657) & 0x0f)>>0
#define get_MA_acfg__pwm1__sel_ch0_amux() ( ma_read_byte(1657) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__pwm1__ipol_pos_b---
// ipol_pos_b XXX fill in
#define MA_acfg__pwm1__ipol_pos_b__a 0x0678
#define MA_acfg__pwm1__ipol_pos_b__len 1
#define MA_acfg__pwm1__ipol_pos_b__mask 0x80
#define MA_acfg__pwm1__ipol_pos_b__shift 0x07
#define MA_acfg__pwm1__ipol_pos_b__reset 0x00
#define MA_acfg__pwm1__ipol_pos_b__inputonly 1
#define set_obj_MA_acfg__pwm1__ipol_pos_b(o,y) ({ uint8_t __ret = o.read(1656); o.write(1656,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__pwm1__ipol_pos_b(y) ({ uint8_t __ret = ma_read_byte(1656); ma_write_byte(1656,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__pwm1__ipol_pos_b(o) (o.read(1656) & 0x80)>>7
#define get_MA_acfg__pwm1__ipol_pos_b() ( ma_read_byte(1656) & 0x80)>>7
//------------------------------------------------------------------------------acfg__pwm1__ipol_neither_b---
// ipol_neither_b XXX fill in
#define MA_acfg__pwm1__ipol_neither_b__a 0x0678
#define MA_acfg__pwm1__ipol_neither_b__len 1
#define MA_acfg__pwm1__ipol_neither_b__mask 0x40
#define MA_acfg__pwm1__ipol_neither_b__shift 0x06
#define MA_acfg__pwm1__ipol_neither_b__reset 0x00
#define MA_acfg__pwm1__ipol_neither_b__inputonly 1
#define set_obj_MA_acfg__pwm1__ipol_neither_b(o,y) ({ uint8_t __ret = o.read(1656); o.write(1656,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_acfg__pwm1__ipol_neither_b(y) ({ uint8_t __ret = ma_read_byte(1656); ma_write_byte(1656,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_acfg__pwm1__ipol_neither_b(o) (o.read(1656) & 0x40)>>6
#define get_MA_acfg__pwm1__ipol_neither_b() ( ma_read_byte(1656) & 0x40)>>6
//------------------------------------------------------------------------------acfg__pwm1__ipol_neg_b---
// ipol_neg_b XXX fill in
#define MA_acfg__pwm1__ipol_neg_b__a 0x0678
#define MA_acfg__pwm1__ipol_neg_b__len 1
#define MA_acfg__pwm1__ipol_neg_b__mask 0x20
#define MA_acfg__pwm1__ipol_neg_b__shift 0x05
#define MA_acfg__pwm1__ipol_neg_b__reset 0x00
#define MA_acfg__pwm1__ipol_neg_b__inputonly 1
#define set_obj_MA_acfg__pwm1__ipol_neg_b(o,y) ({ uint8_t __ret = o.read(1656); o.write(1656,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_acfg__pwm1__ipol_neg_b(y) ({ uint8_t __ret = ma_read_byte(1656); ma_write_byte(1656,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_acfg__pwm1__ipol_neg_b(o) (o.read(1656) & 0x20)>>5
#define get_MA_acfg__pwm1__ipol_neg_b() ( ma_read_byte(1656) & 0x20)>>5
//------------------------------------------------------------------------------acfg__pwm1__clk_vcf_upd_b---
// clk_vcf_upd_b XXX fill in
#define MA_acfg__pwm1__clk_vcf_upd_b__a 0x0678
#define MA_acfg__pwm1__clk_vcf_upd_b__len 1
#define MA_acfg__pwm1__clk_vcf_upd_b__mask 0x10
#define MA_acfg__pwm1__clk_vcf_upd_b__shift 0x04
#define MA_acfg__pwm1__clk_vcf_upd_b__reset 0x00
#define MA_acfg__pwm1__clk_vcf_upd_b__inputonly 1
#define set_obj_MA_acfg__pwm1__clk_vcf_upd_b(o,y) ({ uint8_t __ret = o.read(1656); o.write(1656,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_acfg__pwm1__clk_vcf_upd_b(y) ({ uint8_t __ret = ma_read_byte(1656); ma_write_byte(1656,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_acfg__pwm1__clk_vcf_upd_b(o) (o.read(1656) & 0x10)>>4
#define get_MA_acfg__pwm1__clk_vcf_upd_b() ( ma_read_byte(1656) & 0x10)>>4
//------------------------------------------------------------------------------acfg__pwm1__ipol_pos_a---
// ipol_pos_a XXX fill in
#define MA_acfg__pwm1__ipol_pos_a__a 0x0678
#define MA_acfg__pwm1__ipol_pos_a__len 1
#define MA_acfg__pwm1__ipol_pos_a__mask 0x08
#define MA_acfg__pwm1__ipol_pos_a__shift 0x03
#define MA_acfg__pwm1__ipol_pos_a__reset 0x00
#define MA_acfg__pwm1__ipol_pos_a__inputonly 1
#define set_obj_MA_acfg__pwm1__ipol_pos_a(o,y) ({ uint8_t __ret = o.read(1656); o.write(1656,(__ret&0xf7)|((y<<3)&0x08)); })
#define set_MA_acfg__pwm1__ipol_pos_a(y) ({ uint8_t __ret = ma_read_byte(1656); ma_write_byte(1656,(__ret&0xf7)|((y<<3)&0x08)); })
#define get_obj_MA_acfg__pwm1__ipol_pos_a(o) (o.read(1656) & 0x08)>>3
#define get_MA_acfg__pwm1__ipol_pos_a() ( ma_read_byte(1656) & 0x08)>>3
//------------------------------------------------------------------------------acfg__pwm1__ipol_neither_a---
// ipol_neither_a XXX fill in
#define MA_acfg__pwm1__ipol_neither_a__a 0x0678
#define MA_acfg__pwm1__ipol_neither_a__len 1
#define MA_acfg__pwm1__ipol_neither_a__mask 0x04
#define MA_acfg__pwm1__ipol_neither_a__shift 0x02
#define MA_acfg__pwm1__ipol_neither_a__reset 0x00
#define MA_acfg__pwm1__ipol_neither_a__inputonly 1
#define set_obj_MA_acfg__pwm1__ipol_neither_a(o,y) ({ uint8_t __ret = o.read(1656); o.write(1656,(__ret&0xfb)|((y<<2)&0x04)); })
#define set_MA_acfg__pwm1__ipol_neither_a(y) ({ uint8_t __ret = ma_read_byte(1656); ma_write_byte(1656,(__ret&0xfb)|((y<<2)&0x04)); })
#define get_obj_MA_acfg__pwm1__ipol_neither_a(o) (o.read(1656) & 0x04)>>2
#define get_MA_acfg__pwm1__ipol_neither_a() ( ma_read_byte(1656) & 0x04)>>2
//------------------------------------------------------------------------------acfg__pwm1__ipol_neg_a---
// ipol_neg_a XXX fill in
#define MA_acfg__pwm1__ipol_neg_a__a 0x0678
#define MA_acfg__pwm1__ipol_neg_a__len 1
#define MA_acfg__pwm1__ipol_neg_a__mask 0x02
#define MA_acfg__pwm1__ipol_neg_a__shift 0x01
#define MA_acfg__pwm1__ipol_neg_a__reset 0x00
#define MA_acfg__pwm1__ipol_neg_a__inputonly 1
#define set_obj_MA_acfg__pwm1__ipol_neg_a(o,y) ({ uint8_t __ret = o.read(1656); o.write(1656,(__ret&0xfd)|((y<<1)&0x02)); })
#define set_MA_acfg__pwm1__ipol_neg_a(y) ({ uint8_t __ret = ma_read_byte(1656); ma_write_byte(1656,(__ret&0xfd)|((y<<1)&0x02)); })
#define get_obj_MA_acfg__pwm1__ipol_neg_a(o) (o.read(1656) & 0x02)>>1
#define get_MA_acfg__pwm1__ipol_neg_a() ( ma_read_byte(1656) & 0x02)>>1
//------------------------------------------------------------------------------acfg__pwm1__clk_vcf_upd_a---
// clk_vcf_upd_a XXX fill in
#define MA_acfg__pwm1__clk_vcf_upd_a__a 0x0678
#define MA_acfg__pwm1__clk_vcf_upd_a__len 1
#define MA_acfg__pwm1__clk_vcf_upd_a__mask 0x01
#define MA_acfg__pwm1__clk_vcf_upd_a__shift 0x00
#define MA_acfg__pwm1__clk_vcf_upd_a__reset 0x00
#define MA_acfg__pwm1__clk_vcf_upd_a__inputonly 1
#define set_obj_MA_acfg__pwm1__clk_vcf_upd_a(o,y) ({ uint8_t __ret = o.read(1656); o.write(1656,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_acfg__pwm1__clk_vcf_upd_a(y) ({ uint8_t __ret = ma_read_byte(1656); ma_write_byte(1656,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_acfg__pwm1__clk_vcf_upd_a(o) (o.read(1656) & 0x01)>>0
#define get_MA_acfg__pwm1__clk_vcf_upd_a() ( ma_read_byte(1656) & 0x01)>>0
//------------------------------------------------------------------------------acfg__afir1__rcmpu_en---
// rcmpu_en xxx filin
#define MA_acfg__afir1__rcmpu_en__a 0x0660
#define MA_acfg__afir1__rcmpu_en__len 1
#define MA_acfg__afir1__rcmpu_en__mask 0x01
#define MA_acfg__afir1__rcmpu_en__shift 0x00
#define MA_acfg__afir1__rcmpu_en__reset 0x00
#define MA_acfg__afir1__rcmpu_en__inputonly 0
#define set_obj_MA_acfg__afir1__rcmpu_en(o,y) ({ uint8_t __ret = o.read(1632); o.write(1632,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_acfg__afir1__rcmpu_en(y) ({ uint8_t __ret = ma_read_byte(1632); ma_write_byte(1632,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_acfg__afir1__rcmpu_en(o) (o.read(1632) & 0x01)>>0
#define get_MA_acfg__afir1__rcmpu_en() ( ma_read_byte(1632) & 0x01)>>0
//------------------------------------------------------------------------------acfg__afir1__rcmpu_set---
// rcmpu_set xxx filin
#define MA_acfg__afir1__rcmpu_set__a 0x0660
#define MA_acfg__afir1__rcmpu_set__len 3
#define MA_acfg__afir1__rcmpu_set__mask 0x0e
#define MA_acfg__afir1__rcmpu_set__shift 0x01
#define MA_acfg__afir1__rcmpu_set__reset 0x00
#define MA_acfg__afir1__rcmpu_set__inputonly 0
#define set_obj_MA_acfg__afir1__rcmpu_set(o,y) ({ uint8_t __ret = o.read(1632); o.write(1632,(__ret&0xf1)|((y<<1)&0x0e)); })
#define set_MA_acfg__afir1__rcmpu_set(y) ({ uint8_t __ret = ma_read_byte(1632); ma_write_byte(1632,(__ret&0xf1)|((y<<1)&0x0e)); })
#define get_obj_MA_acfg__afir1__rcmpu_set(o) (o.read(1632) & 0x0e)>>1
#define get_MA_acfg__afir1__rcmpu_set() ( ma_read_byte(1632) & 0x0e)>>1
//------------------------------------------------------------------------------acfg__afir1__rfilter_scale---
// rfilter_scale xxx filin
#define MA_acfg__afir1__rfilter_scale__a 0x0661
#define MA_acfg__afir1__rfilter_scale__len 2
#define MA_acfg__afir1__rfilter_scale__mask 0x60
#define MA_acfg__afir1__rfilter_scale__shift 0x05
#define MA_acfg__afir1__rfilter_scale__reset 0x00
#define MA_acfg__afir1__rfilter_scale__inputonly 0
#define set_obj_MA_acfg__afir1__rfilter_scale(o,y) ({ uint8_t __ret = o.read(1633); o.write(1633,(__ret&0x9f)|((y<<5)&0x60)); })
#define set_MA_acfg__afir1__rfilter_scale(y) ({ uint8_t __ret = ma_read_byte(1633); ma_write_byte(1633,(__ret&0x9f)|((y<<5)&0x60)); })
#define get_obj_MA_acfg__afir1__rfilter_scale(o) (o.read(1633) & 0x60)>>5
#define get_MA_acfg__afir1__rfilter_scale() ( ma_read_byte(1633) & 0x60)>>5
//------------------------------------------------------------------------------acfg__afir1__pvdd_scale---
// pvdd_scale xxx filin
#define MA_acfg__afir1__pvdd_scale__a 0x0660
#define MA_acfg__afir1__pvdd_scale__len 2
#define MA_acfg__afir1__pvdd_scale__mask 0xc0
#define MA_acfg__afir1__pvdd_scale__shift 0x06
#define MA_acfg__afir1__pvdd_scale__reset 0x00
#define MA_acfg__afir1__pvdd_scale__inputonly 0
#define set_obj_MA_acfg__afir1__pvdd_scale(o,y) ({ uint8_t __ret = o.read(1632); o.write(1632,(__ret&0x3f)|((y<<6)&0xc0)); })
#define set_MA_acfg__afir1__pvdd_scale(y) ({ uint8_t __ret = ma_read_byte(1632); ma_write_byte(1632,(__ret&0x3f)|((y<<6)&0xc0)); })
#define get_obj_MA_acfg__afir1__pvdd_scale(o) (o.read(1632) & 0xc0)>>6
#define get_MA_acfg__afir1__pvdd_scale() ( ma_read_byte(1632) & 0xc0)>>6
//------------------------------------------------------------------------------acfg__afir1__cmctrl_en---
// cmctrl_en dynamic pmp
#define MA_acfg__afir1__cmctrl_en__a 0x0660
#define MA_acfg__afir1__cmctrl_en__len 1
#define MA_acfg__afir1__cmctrl_en__mask 0x10
#define MA_acfg__afir1__cmctrl_en__shift 0x04
#define MA_acfg__afir1__cmctrl_en__reset 0x00
#define MA_acfg__afir1__cmctrl_en__inputonly 0
#define set_obj_MA_acfg__afir1__cmctrl_en(o,y) ({ uint8_t __ret = o.read(1632); o.write(1632,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_acfg__afir1__cmctrl_en(y) ({ uint8_t __ret = ma_read_byte(1632); ma_write_byte(1632,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_acfg__afir1__cmctrl_en(o) (o.read(1632) & 0x10)>>4
#define get_MA_acfg__afir1__cmctrl_en() ( ma_read_byte(1632) & 0x10)>>4
//------------------------------------------------------------------------------acfg__afir1__spare_dyn---
// spare_dynamic
#define MA_acfg__afir1__spare_dyn__a 0x0660
#define MA_acfg__afir1__spare_dyn__len 1
#define MA_acfg__afir1__spare_dyn__mask 0x20
#define MA_acfg__afir1__spare_dyn__shift 0x05
#define MA_acfg__afir1__spare_dyn__reset 0x00
#define MA_acfg__afir1__spare_dyn__inputonly 0
#define set_obj_MA_acfg__afir1__spare_dyn(o,y) ({ uint8_t __ret = o.read(1632); o.write(1632,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_acfg__afir1__spare_dyn(y) ({ uint8_t __ret = ma_read_byte(1632); ma_write_byte(1632,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_acfg__afir1__spare_dyn(o) (o.read(1632) & 0x20)>>5
#define get_MA_acfg__afir1__spare_dyn() ( ma_read_byte(1632) & 0x20)>>5
//------------------------------------------------------------------------------acfg__afir1__icmctrl_trim_en---
// icmctrl_trim_en
#define MA_acfg__afir1__icmctrl_trim_en__a 0x0661
#define MA_acfg__afir1__icmctrl_trim_en__len 1
#define MA_acfg__afir1__icmctrl_trim_en__mask 0x01
#define MA_acfg__afir1__icmctrl_trim_en__shift 0x00
#define MA_acfg__afir1__icmctrl_trim_en__reset 0x00
#define MA_acfg__afir1__icmctrl_trim_en__inputonly 0
#define set_obj_MA_acfg__afir1__icmctrl_trim_en(o,y) ({ uint8_t __ret = o.read(1633); o.write(1633,(__ret&0xfe)|((y<<0)&0x01)); })
#define set_MA_acfg__afir1__icmctrl_trim_en(y) ({ uint8_t __ret = ma_read_byte(1633); ma_write_byte(1633,(__ret&0xfe)|((y<<0)&0x01)); })
#define get_obj_MA_acfg__afir1__icmctrl_trim_en(o) (o.read(1633) & 0x01)>>0
#define get_MA_acfg__afir1__icmctrl_trim_en() ( ma_read_byte(1633) & 0x01)>>0
//------------------------------------------------------------------------------acfg__afir1__vdsat_trim---
// vdsat_trim
#define MA_acfg__afir1__vdsat_trim__a 0x0661
#define MA_acfg__afir1__vdsat_trim__len 4
#define MA_acfg__afir1__vdsat_trim__mask 0x1e
#define MA_acfg__afir1__vdsat_trim__shift 0x01
#define MA_acfg__afir1__vdsat_trim__reset 0x00
#define MA_acfg__afir1__vdsat_trim__inputonly 0
#define set_obj_MA_acfg__afir1__vdsat_trim(o,y) ({ uint8_t __ret = o.read(1633); o.write(1633,(__ret&0xe1)|((y<<1)&0x1e)); })
#define set_MA_acfg__afir1__vdsat_trim(y) ({ uint8_t __ret = ma_read_byte(1633); ma_write_byte(1633,(__ret&0xe1)|((y<<1)&0x1e)); })
#define get_obj_MA_acfg__afir1__vdsat_trim(o) (o.read(1633) & 0x1e)>>1
#define get_MA_acfg__afir1__vdsat_trim() ( ma_read_byte(1633) & 0x1e)>>1
//------------------------------------------------------------------------------acfg__afir1__dout_en---
// dout enable
#define MA_acfg__afir1__dout_en__a 0x0661
#define MA_acfg__afir1__dout_en__len 1
#define MA_acfg__afir1__dout_en__mask 0x80
#define MA_acfg__afir1__dout_en__shift 0x07
#define MA_acfg__afir1__dout_en__reset 0x00
#define MA_acfg__afir1__dout_en__inputonly 0
#define set_obj_MA_acfg__afir1__dout_en(o,y) ({ uint8_t __ret = o.read(1633); o.write(1633,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__afir1__dout_en(y) ({ uint8_t __ret = ma_read_byte(1633); ma_write_byte(1633,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__afir1__dout_en(o) (o.read(1633) & 0x80)>>7
#define get_MA_acfg__afir1__dout_en() ( ma_read_byte(1633) & 0x80)>>7
//------------------------------------------------------------------------------acfg__adc__vcmbuf_bias---
// Set vcmbuf_bias
#define MA_acfg__adc__vcmbuf_bias__a 0x0620
#define MA_acfg__adc__vcmbuf_bias__len 4
#define MA_acfg__adc__vcmbuf_bias__mask 0x0f
#define MA_acfg__adc__vcmbuf_bias__shift 0x00
#define MA_acfg__adc__vcmbuf_bias__reset 0x00
#define MA_acfg__adc__vcmbuf_bias__inputonly 0
#define set_obj_MA_acfg__adc__vcmbuf_bias(o,y) ({ uint8_t __ret = o.read(1568); o.write(1568,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__adc__vcmbuf_bias(y) ({ uint8_t __ret = ma_read_byte(1568); ma_write_byte(1568,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__adc__vcmbuf_bias(o) (o.read(1568) & 0x0f)>>0
#define get_MA_acfg__adc__vcmbuf_bias() ( ma_read_byte(1568) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__adc__vrefbuf_bias---
// Set vrefbuf_bias
#define MA_acfg__adc__vrefbuf_bias__a 0x0620
#define MA_acfg__adc__vrefbuf_bias__len 4
#define MA_acfg__adc__vrefbuf_bias__mask 0xf0
#define MA_acfg__adc__vrefbuf_bias__shift 0x04
#define MA_acfg__adc__vrefbuf_bias__reset 0x00
#define MA_acfg__adc__vrefbuf_bias__inputonly 0
#define set_obj_MA_acfg__adc__vrefbuf_bias(o,y) ({ uint8_t __ret = o.read(1568); o.write(1568,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__adc__vrefbuf_bias(y) ({ uint8_t __ret = ma_read_byte(1568); ma_write_byte(1568,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__adc__vrefbuf_bias(o) (o.read(1568) & 0xf0)>>4
#define get_MA_acfg__adc__vrefbuf_bias() ( ma_read_byte(1568) & 0xf0)>>4
//------------------------------------------------------------------------------acfg__adc__resample_bias---
// Set resamp_bias
#define MA_acfg__adc__resample_bias__a 0x0621
#define MA_acfg__adc__resample_bias__len 4
#define MA_acfg__adc__resample_bias__mask 0x0f
#define MA_acfg__adc__resample_bias__shift 0x00
#define MA_acfg__adc__resample_bias__reset 0x00
#define MA_acfg__adc__resample_bias__inputonly 0
#define set_obj_MA_acfg__adc__resample_bias(o,y) ({ uint8_t __ret = o.read(1569); o.write(1569,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__adc__resample_bias(y) ({ uint8_t __ret = ma_read_byte(1569); ma_write_byte(1569,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__adc__resample_bias(o) (o.read(1569) & 0x0f)>>0
#define get_MA_acfg__adc__resample_bias() ( ma_read_byte(1569) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__adc__ref_sel_rladder---
// ref_sel_rladder
#define MA_acfg__adc__ref_sel_rladder__a 0x0621
#define MA_acfg__adc__ref_sel_rladder__len 1
#define MA_acfg__adc__ref_sel_rladder__mask 0x10
#define MA_acfg__adc__ref_sel_rladder__shift 0x04
#define MA_acfg__adc__ref_sel_rladder__reset 0x00
#define MA_acfg__adc__ref_sel_rladder__inputonly 0
#define set_obj_MA_acfg__adc__ref_sel_rladder(o,y) ({ uint8_t __ret = o.read(1569); o.write(1569,(__ret&0xef)|((y<<4)&0x10)); })
#define set_MA_acfg__adc__ref_sel_rladder(y) ({ uint8_t __ret = ma_read_byte(1569); ma_write_byte(1569,(__ret&0xef)|((y<<4)&0x10)); })
#define get_obj_MA_acfg__adc__ref_sel_rladder(o) (o.read(1569) & 0x10)>>4
#define get_MA_acfg__adc__ref_sel_rladder() ( ma_read_byte(1569) & 0x10)>>4
//------------------------------------------------------------------------------acfg__adc__vrefn_sel---
// vrefn_sel
#define MA_acfg__adc__vrefn_sel__a 0x0621
#define MA_acfg__adc__vrefn_sel__len 1
#define MA_acfg__adc__vrefn_sel__mask 0x20
#define MA_acfg__adc__vrefn_sel__shift 0x05
#define MA_acfg__adc__vrefn_sel__reset 0x00
#define MA_acfg__adc__vrefn_sel__inputonly 0
#define set_obj_MA_acfg__adc__vrefn_sel(o,y) ({ uint8_t __ret = o.read(1569); o.write(1569,(__ret&0xdf)|((y<<5)&0x20)); })
#define set_MA_acfg__adc__vrefn_sel(y) ({ uint8_t __ret = ma_read_byte(1569); ma_write_byte(1569,(__ret&0xdf)|((y<<5)&0x20)); })
#define get_obj_MA_acfg__adc__vrefn_sel(o) (o.read(1569) & 0x20)>>5
#define get_MA_acfg__adc__vrefn_sel() ( ma_read_byte(1569) & 0x20)>>5
//------------------------------------------------------------------------------acfg__adc__vrefp_sel---
// vrefp_sel
#define MA_acfg__adc__vrefp_sel__a 0x0621
#define MA_acfg__adc__vrefp_sel__len 1
#define MA_acfg__adc__vrefp_sel__mask 0x40
#define MA_acfg__adc__vrefp_sel__shift 0x06
#define MA_acfg__adc__vrefp_sel__reset 0x00
#define MA_acfg__adc__vrefp_sel__inputonly 0
#define set_obj_MA_acfg__adc__vrefp_sel(o,y) ({ uint8_t __ret = o.read(1569); o.write(1569,(__ret&0xbf)|((y<<6)&0x40)); })
#define set_MA_acfg__adc__vrefp_sel(y) ({ uint8_t __ret = ma_read_byte(1569); ma_write_byte(1569,(__ret&0xbf)|((y<<6)&0x40)); })
#define get_obj_MA_acfg__adc__vrefp_sel(o) (o.read(1569) & 0x40)>>6
#define get_MA_acfg__adc__vrefp_sel() ( ma_read_byte(1569) & 0x40)>>6
//------------------------------------------------------------------------------acfg__adc__vcm_sel---
// vcm_sel
#define MA_acfg__adc__vcm_sel__a 0x0621
#define MA_acfg__adc__vcm_sel__len 1
#define MA_acfg__adc__vcm_sel__mask 0x80
#define MA_acfg__adc__vcm_sel__shift 0x07
#define MA_acfg__adc__vcm_sel__reset 0x00
#define MA_acfg__adc__vcm_sel__inputonly 0
#define set_obj_MA_acfg__adc__vcm_sel(o,y) ({ uint8_t __ret = o.read(1569); o.write(1569,(__ret&0x7f)|((y<<7)&0x80)); })
#define set_MA_acfg__adc__vcm_sel(y) ({ uint8_t __ret = ma_read_byte(1569); ma_write_byte(1569,(__ret&0x7f)|((y<<7)&0x80)); })
#define get_obj_MA_acfg__adc__vcm_sel(o) (o.read(1569) & 0x80)>>7
#define get_MA_acfg__adc__vcm_sel() ( ma_read_byte(1569) & 0x80)>>7
//------------------------------------------------------------------------------acfg__sb_amux__sel_ch0---
// Select amux channel 0 input; 0: Internal tie off, 1: Bus connected - nothing selected, N: Bus connected - select input N
#define MA_acfg__sb_amux__sel_ch0__a 0x0630
#define MA_acfg__sb_amux__sel_ch0__len 4
#define MA_acfg__sb_amux__sel_ch0__mask 0x0f
#define MA_acfg__sb_amux__sel_ch0__shift 0x00
#define MA_acfg__sb_amux__sel_ch0__reset 0x00
#define MA_acfg__sb_amux__sel_ch0__inputonly 0
#define set_obj_MA_acfg__sb_amux__sel_ch0(o,y) ({ uint8_t __ret = o.read(1584); o.write(1584,(__ret&0xf0)|((y<<0)&0x0f)); })
#define set_MA_acfg__sb_amux__sel_ch0(y) ({ uint8_t __ret = ma_read_byte(1584); ma_write_byte(1584,(__ret&0xf0)|((y<<0)&0x0f)); })
#define get_obj_MA_acfg__sb_amux__sel_ch0(o) (o.read(1584) & 0x0f)>>0
#define get_MA_acfg__sb_amux__sel_ch0() ( ma_read_byte(1584) & 0x0f)>>0
//------------------------------------------------------------------------------acfg__sb_amux__sel_ch1---
// Select amux channel 1 input; 0: Internal tie off, 1: Bus connected - nothing selected, N: Bus connected - select input N
#define MA_acfg__sb_amux__sel_ch1__a 0x0630
#define MA_acfg__sb_amux__sel_ch1__len 4
#define MA_acfg__sb_amux__sel_ch1__mask 0xf0
#define MA_acfg__sb_amux__sel_ch1__shift 0x04
#define MA_acfg__sb_amux__sel_ch1__reset 0x00
#define MA_acfg__sb_amux__sel_ch1__inputonly 0
#define set_obj_MA_acfg__sb_amux__sel_ch1(o,y) ({ uint8_t __ret = o.read(1584); o.write(1584,(__ret&0x0f)|((y<<4)&0xf0)); })
#define set_MA_acfg__sb_amux__sel_ch1(y) ({ uint8_t __ret = ma_read_byte(1584); ma_write_byte(1584,(__ret&0x0f)|((y<<4)&0xf0)); })
#define get_obj_MA_acfg__sb_amux__sel_ch1(o) (o.read(1584) & 0xf0)>>4
#define get_MA_acfg__sb_amux__sel_ch1() ( ma_read_byte(1584) & 0xf0)>>4
//------------------------------------------------------------------------------dsp__pmem__addr0_0---
// Program memory address 0 least significant byte
#define MA_dsp__pmem__addr0_0__a 0x1000
#define MA_dsp__pmem__addr0_0__len 8
#define MA_dsp__pmem__addr0_0__mask 0xff
#define MA_dsp__pmem__addr0_0__shift 0x00
#define MA_dsp__pmem__addr0_0__reset 0x00
#define MA_dsp__pmem__addr0_0__inputonly 0
#define set_obj_MA_dsp__pmem__addr0_0(o,y) o.write(4096,y);
#define set_MA_dsp__pmem__addr0_0(y) ma_write_byte(4096,y);
#define get_obj_MA_dsp__pmem__addr0_0(o) (o.read(4096) & 0xff)>>0
#define get_MA_dsp__pmem__addr0_0() ( ma_read_byte(4096) & 0xff)>>0
//------------------------------------------------------------------------------dsp__pmem__addr0_1---
// Program memory address 0 middle byte
#define MA_dsp__pmem__addr0_1__a 0x1001
#define MA_dsp__pmem__addr0_1__len 8
#define MA_dsp__pmem__addr0_1__mask 0xff
#define MA_dsp__pmem__addr0_1__shift 0x00
#define MA_dsp__pmem__addr0_1__reset 0x00
#define MA_dsp__pmem__addr0_1__inputonly 0
#define set_obj_MA_dsp__pmem__addr0_1(o,y) o.write(4097,y);
#define set_MA_dsp__pmem__addr0_1(y) ma_write_byte(4097,y);
#define get_obj_MA_dsp__pmem__addr0_1(o) (o.read(4097) & 0xff)>>0
#define get_MA_dsp__pmem__addr0_1() ( ma_read_byte(4097) & 0xff)>>0
//------------------------------------------------------------------------------dsp__pmem__addr0_2---
// Program memory address 0 most signficant  byte (writing commits to hardblock memory)
#define MA_dsp__pmem__addr0_2__a 0x1002
#define MA_dsp__pmem__addr0_2__len 8
#define MA_dsp__pmem__addr0_2__mask 0xff
#define MA_dsp__pmem__addr0_2__shift 0x00
#define MA_dsp__pmem__addr0_2__reset 0x00
#define MA_dsp__pmem__addr0_2__inputonly 0
#define set_obj_MA_dsp__pmem__addr0_2(o,y) o.write(4098,y);
#define set_MA_dsp__pmem__addr0_2(y) ma_write_byte(4098,y);
#define get_obj_MA_dsp__pmem__addr0_2(o) (o.read(4098) & 0xff)>>0
#define get_MA_dsp__pmem__addr0_2() ( ma_read_byte(4098) & 0xff)>>0
//------------------------------------------------------------------------------dsp__pmem__addr1_0---
// Program memory address 1 least significant byte
#define MA_dsp__pmem__addr1_0__a 0x1004
#define MA_dsp__pmem__addr1_0__len 8
#define MA_dsp__pmem__addr1_0__mask 0xff
#define MA_dsp__pmem__addr1_0__shift 0x00
#define MA_dsp__pmem__addr1_0__reset 0x00
#define MA_dsp__pmem__addr1_0__inputonly 0
#define set_obj_MA_dsp__pmem__addr1_0(o,y) o.write(4100,y);
#define set_MA_dsp__pmem__addr1_0(y) ma_write_byte(4100,y);
#define get_obj_MA_dsp__pmem__addr1_0(o) (o.read(4100) & 0xff)>>0
#define get_MA_dsp__pmem__addr1_0() ( ma_read_byte(4100) & 0xff)>>0
//------------------------------------------------------------------------------dsp__pmem__addr1_1---
// Program memory address 1 middle byte
#define MA_dsp__pmem__addr1_1__a 0x1005
#define MA_dsp__pmem__addr1_1__len 8
#define MA_dsp__pmem__addr1_1__mask 0xff
#define MA_dsp__pmem__addr1_1__shift 0x00
#define MA_dsp__pmem__addr1_1__reset 0x00
#define MA_dsp__pmem__addr1_1__inputonly 0
#define set_obj_MA_dsp__pmem__addr1_1(o,y) o.write(4101,y);
#define set_MA_dsp__pmem__addr1_1(y) ma_write_byte(4101,y);
#define get_obj_MA_dsp__pmem__addr1_1(o) (o.read(4101) & 0xff)>>0
#define get_MA_dsp__pmem__addr1_1() ( ma_read_byte(4101) & 0xff)>>0
//------------------------------------------------------------------------------dsp__pmem__addr1_2---
// Program memory address 1 most signficant  byte (writing commits to hardblock memory)
#define MA_dsp__pmem__addr1_2__a 0x1006
#define MA_dsp__pmem__addr1_2__len 8
#define MA_dsp__pmem__addr1_2__mask 0xff
#define MA_dsp__pmem__addr1_2__shift 0x00
#define MA_dsp__pmem__addr1_2__reset 0x00
#define MA_dsp__pmem__addr1_2__inputonly 0
#define set_obj_MA_dsp__pmem__addr1_2(o,y) o.write(4102,y);
#define set_MA_dsp__pmem__addr1_2(y) ma_write_byte(4102,y);
#define get_obj_MA_dsp__pmem__addr1_2(o) (o.read(4102) & 0xff)>>0
#define get_MA_dsp__pmem__addr1_2() ( ma_read_byte(4102) & 0xff)>>0
//------------------------------------------------------------------------------otp__otpmem__byte_0---
// OTP memory byte
#define MA_otp__otpmem__byte_0__a 0x8000
#define MA_otp__otpmem__byte_0__len 8
#define MA_otp__otpmem__byte_0__mask 0xff
#define MA_otp__otpmem__byte_0__shift 0x00
#define MA_otp__otpmem__byte_0__reset 0xff
#define MA_otp__otpmem__byte_0__inputonly 0
#define set_obj_MA_otp__otpmem__byte_0(o,y) o.write(32768,y);
#define set_MA_otp__otpmem__byte_0(y) ma_write_byte(32768,y);
#define get_obj_MA_otp__otpmem__byte_0(o) (o.read(32768) & 0xff)>>0
#define get_MA_otp__otpmem__byte_0() ( ma_read_byte(32768) & 0xff)>>0
//------------------------------------------------------------------------------otp__otpmem__byte_1---
// OTP memory byte
#define MA_otp__otpmem__byte_1__a 0x8001
#define MA_otp__otpmem__byte_1__len 8
#define MA_otp__otpmem__byte_1__mask 0xff
#define MA_otp__otpmem__byte_1__shift 0x00
#define MA_otp__otpmem__byte_1__reset 0xff
#define MA_otp__otpmem__byte_1__inputonly 0
#define set_obj_MA_otp__otpmem__byte_1(o,y) o.write(32769,y);
#define set_MA_otp__otpmem__byte_1(y) ma_write_byte(32769,y);
#define get_obj_MA_otp__otpmem__byte_1(o) (o.read(32769) & 0xff)>>0
#define get_MA_otp__otpmem__byte_1() ( ma_read_byte(32769) & 0xff)>>0
//------------------------------------------------------------------------------otp__otpmem__byte_2---
// OTP memory byte
#define MA_otp__otpmem__byte_2__a 0x8002
#define MA_otp__otpmem__byte_2__len 8
#define MA_otp__otpmem__byte_2__mask 0xff
#define MA_otp__otpmem__byte_2__shift 0x00
#define MA_otp__otpmem__byte_2__reset 0xff
#define MA_otp__otpmem__byte_2__inputonly 0
#define set_obj_MA_otp__otpmem__byte_2(o,y) o.write(32770,y);
#define set_MA_otp__otpmem__byte_2(y) ma_write_byte(32770,y);
#define get_obj_MA_otp__otpmem__byte_2(o) (o.read(32770) & 0xff)>>0
#define get_MA_otp__otpmem__byte_2() ( ma_read_byte(32770) & 0xff)>>0
//------------------------------------------------------------------------------otp__otpmem__byte_3---
// OTP memory byte
#define MA_otp__otpmem__byte_3__a 0x8003
#define MA_otp__otpmem__byte_3__len 8
#define MA_otp__otpmem__byte_3__mask 0xff
#define MA_otp__otpmem__byte_3__shift 0x00
#define MA_otp__otpmem__byte_3__reset 0xff
#define MA_otp__otpmem__byte_3__inputonly 0
#define set_obj_MA_otp__otpmem__byte_3(o,y) o.write(32771,y);
#define set_MA_otp__otpmem__byte_3(y) ma_write_byte(32771,y);
#define get_obj_MA_otp__otpmem__byte_3(o) (o.read(32771) & 0xff)>>0
#define get_MA_otp__otpmem__byte_3() ( ma_read_byte(32771) & 0xff)>>0
//------------------------------------------------------------------------------otp__otptrack__datecode3---
// Finaltest date code byte 3
#define MA_otp__otptrack__datecode3__a 0x81f1
#define MA_otp__otptrack__datecode3__len 8
#define MA_otp__otptrack__datecode3__mask 0xff
#define MA_otp__otptrack__datecode3__shift 0x00
#define MA_otp__otptrack__datecode3__reset 0xff
#define MA_otp__otptrack__datecode3__inputonly 0
#define set_obj_MA_otp__otptrack__datecode3(o,y) o.write(33265,y);
#define set_MA_otp__otptrack__datecode3(y) ma_write_byte(33265,y);
#define get_obj_MA_otp__otptrack__datecode3(o) (o.read(33265) & 0xff)>>0
#define get_MA_otp__otptrack__datecode3() ( ma_read_byte(33265) & 0xff)>>0
//------------------------------------------------------------------------------otp__otptrack__datecode2---
// Finaltest date code byte 2
#define MA_otp__otptrack__datecode2__a 0x81f2
#define MA_otp__otptrack__datecode2__len 8
#define MA_otp__otptrack__datecode2__mask 0xff
#define MA_otp__otptrack__datecode2__shift 0x00
#define MA_otp__otptrack__datecode2__reset 0xff
#define MA_otp__otptrack__datecode2__inputonly 0
#define set_obj_MA_otp__otptrack__datecode2(o,y) o.write(33266,y);
#define set_MA_otp__otptrack__datecode2(y) ma_write_byte(33266,y);
#define get_obj_MA_otp__otptrack__datecode2(o) (o.read(33266) & 0xff)>>0
#define get_MA_otp__otptrack__datecode2() ( ma_read_byte(33266) & 0xff)>>0
//------------------------------------------------------------------------------otp__otptrack__testsite---
// 0-23: Wafernumber, 25: Meruslab, 26: Salland preproduction, 27: ASE, 31:untested
#define MA_otp__otptrack__testsite__a 0x81f0
#define MA_otp__otptrack__testsite__len 5
#define MA_otp__otptrack__testsite__mask 0x1f
#define MA_otp__otptrack__testsite__shift 0x00
#define MA_otp__otptrack__testsite__reset 0x1f
#define MA_otp__otptrack__testsite__inputonly 0
#define set_obj_MA_otp__otptrack__testsite(o,y) ({ uint8_t __ret = o.read(33264); o.write(33264,(__ret&0xe0)|((y<<0)&0x1f)); })
#define set_MA_otp__otptrack__testsite(y) ({ uint8_t __ret = ma_read_byte(33264); ma_write_byte(33264,(__ret&0xe0)|((y<<0)&0x1f)); })
#define get_obj_MA_otp__otptrack__testsite(o) (o.read(33264) & 0x1f)>>0
#define get_MA_otp__otptrack__testsite() ( ma_read_byte(33264) & 0x1f)>>0
//------------------------------------------------------------------------------otp__otptrack__testversion---
// Test program version
#define MA_otp__otptrack__testversion__a 0x81f0
#define MA_otp__otptrack__testversion__len 3
#define MA_otp__otptrack__testversion__mask 0xe0
#define MA_otp__otptrack__testversion__shift 0x05
#define MA_otp__otptrack__testversion__reset 0x07
#define MA_otp__otptrack__testversion__inputonly 0
#define set_obj_MA_otp__otptrack__testversion(o,y) ({ uint8_t __ret = o.read(33264); o.write(33264,(__ret&0x1f)|((y<<5)&0xe0)); })
#define set_MA_otp__otptrack__testversion(y) ({ uint8_t __ret = ma_read_byte(33264); ma_write_byte(33264,(__ret&0x1f)|((y<<5)&0xe0)); })
#define get_obj_MA_otp__otptrack__testversion(o) (o.read(33264) & 0xe0)>>5
#define get_MA_otp__otptrack__testversion() ( ma_read_byte(33264) & 0xe0)>>5
//------------------------------------------------------------------------------otp__otptrack__datecode1---
// Finaltest date code byte 1
#define MA_otp__otptrack__datecode1__a 0x81f3
#define MA_otp__otptrack__datecode1__len 8
#define MA_otp__otptrack__datecode1__mask 0xff
#define MA_otp__otptrack__datecode1__shift 0x00
#define MA_otp__otptrack__datecode1__reset 0xff
#define MA_otp__otptrack__datecode1__inputonly 0
#define set_obj_MA_otp__otptrack__datecode1(o,y) o.write(33267,y);
#define set_MA_otp__otptrack__datecode1(y) ma_write_byte(33267,y);
#define get_obj_MA_otp__otptrack__datecode1(o) (o.read(33267) & 0xff)>>0
#define get_MA_otp__otptrack__datecode1() ( ma_read_byte(33267) & 0xff)>>0
//------------------------------------------------------------------------------otp__otptrack__datecode0---
// Finaltest date code byte 0, seconds
#define MA_otp__otptrack__datecode0__a 0x81f4
#define MA_otp__otptrack__datecode0__len 8
#define MA_otp__otptrack__datecode0__mask 0xff
#define MA_otp__otptrack__datecode0__shift 0x00
#define MA_otp__otptrack__datecode0__reset 0xff
#define MA_otp__otptrack__datecode0__inputonly 0
#define set_obj_MA_otp__otptrack__datecode0(o,y) o.write(33268,y);
#define set_MA_otp__otptrack__datecode0(y) ma_write_byte(33268,y);
#define get_obj_MA_otp__otptrack__datecode0(o) (o.read(33268) & 0xff)>>0
#define get_MA_otp__otptrack__datecode0() ( ma_read_byte(33268) & 0xff)>>0
//------------------------------------------------------------------------------otp__otptrack__testresult---
// msb:tested,bit2:afirbist,bit1:dspmembist,bit0:vdd_reg
#define MA_otp__otptrack__testresult__a 0x81f5
#define MA_otp__otptrack__testresult__len 8
#define MA_otp__otptrack__testresult__mask 0xff
#define MA_otp__otptrack__testresult__shift 0x00
#define MA_otp__otptrack__testresult__reset 0xff
#define MA_otp__otptrack__testresult__inputonly 0
#define set_obj_MA_otp__otptrack__testresult(o,y) o.write(33269,y);
#define set_MA_otp__otptrack__testresult(y) ma_write_byte(33269,y);
#define get_obj_MA_otp__otptrack__testresult(o) (o.read(33269) & 0xff)>>0
#define get_MA_otp__otptrack__testresult() ( ma_read_byte(33269) & 0xff)>>0
/* db_version 2 entries*/
// Define reset value for core and mlpin segment 
#ifndef DISABLE_RESET_VALUES
int MA120_reset[0x600] = { 0x32,0x03,0x00,0x20,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x12,0x00,0x00,0x00, // 0x0000 to 0x000f 
                           0x08,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0010 to 0x001f 
                           0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0020 to 0x002f 
                           0x3f,0x57,0x00,0x3b,0x8c,0x00,0x33,0xc8,0x00,0x22,0xc8,0x00,0x7e,0x57,0x00,0x7a, // 0x0030 to 0x003f 
                           0x8c,0x00,0x71,0xc8,0x00,0x61,0xc8,0x00,0xfd,0x57,0x00,0xf9,0x8c,0x00,0xf1,0xc8, // 0x0040 to 0x004f 
                           0x00,0x72,0x57,0x00,0x7e,0x57,0x00,0x76,0x8c,0x00,0x77,0xc8,0x00,0x65,0xc8,0x00, // 0x0050 to 0x005f 
                           0x16,0xc8,0x00,0x15,0xc8,0x00,0x15,0xc8,0x00,0x15,0xc8,0x00,0x00,0x21,0x70,0x98, // 0x0060 to 0x006f 
                           0x0d,0x00,0x31,0x70,0x98,0x0d,0x44,0x65,0x75,0x9a,0x08,0x44,0x75,0x75,0x9a,0x08, // 0x0070 to 0x007f 
                           0x88,0xa9,0x76,0x93,0x00,0x88,0x79,0x76,0x93,0x00,0x77,0x13,0x23,0x01,0x6f,0x0a, // 0x0080 to 0x008f 
                           0x0f,0x1e,0x43,0x46,0x11,0x40,0x40,0x20,0x40,0x40,0x00,0x12,0x04,0x44,0x65,0x75, // 0x0090 to 0x009f 
                           0x9a,0x00,0x44,0x65,0x75,0x9a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00a0 to 0x00af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00b0 to 0x00bf 
                           0x96,0x20,0x08,0x0c,0x20,0x00,0x3f,0x00,0x3b,0x7d,0x73,0x40,0x00,0x03,0x00,0x0e, // 0x00c0 to 0x00cf 
                           0x00,0x0c,0x00,0x0a,0x00,0x08,0x10,0x20,0x0a,0xd4,0x10,0x00,0x00,0x85,0x40,0x00, // 0x00d0 to 0x00df 
                           0x00,0x0a,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00,0x00,0x01,0x00,0x00, // 0x00e0 to 0x00ef 
                           0x10,0x02,0x00,0x00,0x00,0x00,0x10,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00f0 to 0x00ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x1f, // 0x0100 to 0x010f 
                           0x1f,0x77,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0110 to 0x011f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0120 to 0x012f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0130 to 0x013f 
                           0xba,0x20,0x3a,0x43,0x13,0x01,0x83,0x00,0xc0,0x00,0x80,0x00,0x80,0x00,0x80,0x00, // 0x0140 to 0x014f 
                           0x80,0x01,0xc2,0x00,0xc0,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0150 to 0x015f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0160 to 0x016f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0170 to 0x017f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x06,0x18,0x00, // 0x0180 to 0x018f 
                           0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0190 to 0x019f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01a0 to 0x01af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01b0 to 0x01bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01c0 to 0x01cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01d0 to 0x01df 
                           0x03,0x02,0xcd,0xcc,0x00,0x80,0x00,0x80,0x23,0x1a,0x73,0x03,0x2f,0x54,0x52,0x69, // 0x01e0 to 0x01ef 
                           0x0c,0x1f,0x0d,0x75,0xa5,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01f0 to 0x01ff 
                           0x0f,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0200 to 0x020f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0210 to 0x021f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0220 to 0x022f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0230 to 0x023f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0240 to 0x024f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x32,0x64,0x00, // 0x0250 to 0x025f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0260 to 0x026f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0270 to 0x027f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0280 to 0x028f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0290 to 0x029f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02a0 to 0x02af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02b0 to 0x02bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02c0 to 0x02cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02d0 to 0x02df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02e0 to 0x02ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02f0 to 0x02ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0300 to 0x030f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0310 to 0x031f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0320 to 0x032f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0330 to 0x033f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0340 to 0x034f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0350 to 0x035f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0360 to 0x036f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0370 to 0x037f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0380 to 0x038f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0390 to 0x039f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03a0 to 0x03af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03b0 to 0x03bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03c0 to 0x03cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03d0 to 0x03df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03e0 to 0x03ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03f0 to 0x03ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0400 to 0x040f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0410 to 0x041f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0420 to 0x042f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0430 to 0x043f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0440 to 0x044f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0450 to 0x045f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0460 to 0x046f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0470 to 0x047f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0480 to 0x048f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0490 to 0x049f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04a0 to 0x04af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04b0 to 0x04bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04c0 to 0x04cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04d0 to 0x04df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04e0 to 0x04ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04f0 to 0x04ff 
                           0x01,0x05,0x09,0x0e,0x12,0x16,0x1c,0x28,0x36,0x0d,0x20,0x00,0x00,0x00,0x00,0x00, // 0x0500 to 0x050f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0510 to 0x051f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0520 to 0x052f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0530 to 0x053f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0540 to 0x054f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0550 to 0x055f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0560 to 0x056f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0570 to 0x057f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0580 to 0x058f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0590 to 0x059f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05a0 to 0x05af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05b0 to 0x05bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05c0 to 0x05cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05d0 to 0x05df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05e0 to 0x05ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; // 0x05f0 to 0x05ff 
int MA120_mapped[0x600] = { 0x7f,0x03,0x1f,0xff,0xff,0x0f,0x03,0xff,0xff,0x1f,0x1f,0x1f,0x1f,0xff,0xff,0x00, // 0x0000 to 0x000f 
                           0xff,0x1f,0x1f,0x1f,0x1f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f, // 0x0010 to 0x001f 
                           0x3f,0x3f,0x3f,0x3f,0x3f,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0020 to 0x002f 
                           0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff, // 0x0030 to 0x003f 
                           0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff, // 0x0040 to 0x004f 
                           0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f, // 0x0050 to 0x005f 
                           0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0x0f,0xff,0xff,0xff,0xff, // 0x0060 to 0x006f 
                           0x0f,0xff,0xff,0xff,0xff,0x0f,0xff,0xff,0xff,0xff,0x0f,0xff,0xff,0xff,0xff,0x0f, // 0x0070 to 0x007f 
                           0xff,0xff,0xff,0xff,0x0f,0xff,0xff,0xff,0xff,0x0f,0xff,0xff,0xff,0xff,0xff,0xff, // 0x0080 to 0x008f 
                           0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 0x0090 to 0x009f 
                           0xff,0x0f,0xff,0xff,0xff,0xff,0x0f,0xff,0x07,0x3f,0xff,0xff,0x00,0x00,0x00,0x00, // 0x00a0 to 0x00af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00b0 to 0x00bf 
                           0xff,0xff,0x0f,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 0x00c0 to 0x00cf 
                           0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0xff,0xff,0xff, // 0x00d0 to 0x00df 
                           0x3f,0xff,0xff,0xff,0x3f,0xff,0xff,0xff,0x3f,0xff,0xff,0xff,0x3f,0xff,0x3f,0xff, // 0x00e0 to 0x00ef 
                           0x3f,0xff,0x3f,0xff,0x3f,0xff,0x3f,0xff,0x3f,0xff,0x3f,0xff,0x3f,0xff,0x3f,0xff, // 0x00f0 to 0x00ff 
                           0x3f,0xff,0x3f,0xff,0x3f,0xff,0x3f,0xff,0x3f,0x03,0x1f,0x1f,0xff,0x3f,0x01,0x1f, // 0x0100 to 0x010f 
                           0x1f,0xff,0x3f,0xff,0x0f,0x7f,0x00,0x00,0x1f,0x1f,0xff,0x3f,0x1f,0x1f,0xff,0x3f, // 0x0110 to 0x011f 
                           0x1f,0x1f,0xff,0x3f,0x1f,0x1f,0xff,0x3f,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0x00, // 0x0120 to 0x012f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0130 to 0x013f 
                           0xff,0x3f,0x3f,0xff,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, // 0x0140 to 0x014f 
                           0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x3f,0x3f,0x00,0xff,0x00, // 0x0150 to 0x015f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0160 to 0x016f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0170 to 0x017f 
                           0x7f,0xff,0x3f,0x3f,0x07,0xff,0x7f,0x1f,0x1f,0x3f,0x07,0xff,0x1f,0x1f,0x1f,0x1f, // 0x0180 to 0x018f 
                           0x3f,0x1f,0x07,0x1f,0x0f,0x00,0x00,0x00,0xff,0x01,0xff,0x1f,0x0f,0x1f,0x1f,0x7f, // 0x0190 to 0x019f 
                           0x0f,0x1f,0x0f,0x1f,0xff,0x03,0xff,0xff,0x1f,0xff,0x01,0x1f,0x3f,0xff,0x3f,0x1f, // 0x01a0 to 0x01af 
                           0x3f,0xff,0x3f,0xff,0x3f,0x1f,0x1f,0x1f,0xff,0x3f,0xff,0x3f,0x3f,0x3f,0xff,0x3f, // 0x01b0 to 0x01bf 
                           0x1f,0x3f,0x1f,0x3f,0xff,0x3f,0xff,0x3f,0x3f,0x3f,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01c0 to 0x01cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01d0 to 0x01df 
                           0xff,0x07,0xff,0xff,0xff,0xff,0xff,0xff,0x7f,0xff,0xff,0x03,0xff,0xff,0xff,0xff, // 0x01e0 to 0x01ef 
                           0xff,0xff,0x3f,0xff,0xff,0x07,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01f0 to 0x01ff 
                           0x0f,0xf7,0xff,0xff,0xff,0x00,0xf0,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x03, // 0x0200 to 0x020f 
                           0xff,0x03,0xff,0xff,0x03,0xff,0x03,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0210 to 0x021f 
                           0x07,0x03,0x0f,0x0f,0x0f,0x0f,0x3f,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0220 to 0x022f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0230 to 0x023f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0240 to 0x024f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03,0x3d,0x00,0x00,0xff,0xff,0xff, // 0x0250 to 0x025f 
                           0x07,0xff,0x0f,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0260 to 0x026f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0270 to 0x027f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0280 to 0x028f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0290 to 0x029f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02a0 to 0x02af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02b0 to 0x02bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02c0 to 0x02cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02d0 to 0x02df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02e0 to 0x02ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02f0 to 0x02ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0300 to 0x030f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0310 to 0x031f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0320 to 0x032f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0330 to 0x033f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0340 to 0x034f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0350 to 0x035f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0360 to 0x036f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0370 to 0x037f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0380 to 0x038f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0390 to 0x039f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03a0 to 0x03af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03b0 to 0x03bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03c0 to 0x03cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03d0 to 0x03df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03e0 to 0x03ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03f0 to 0x03ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0400 to 0x040f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0410 to 0x041f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0420 to 0x042f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0430 to 0x043f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0440 to 0x044f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0450 to 0x045f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0460 to 0x046f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0470 to 0x047f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0480 to 0x048f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0490 to 0x049f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04a0 to 0x04af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04b0 to 0x04bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04c0 to 0x04cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04d0 to 0x04df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04e0 to 0x04ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04f0 to 0x04ff 
                           0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x1f,0xff,0x3f,0x0f,0x0f,0x0f,0x0f, // 0x0500 to 0x050f 
                           0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0510 to 0x051f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0520 to 0x052f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0530 to 0x053f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0540 to 0x054f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0550 to 0x055f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0560 to 0x056f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0570 to 0x057f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0580 to 0x058f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0590 to 0x059f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05a0 to 0x05af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05b0 to 0x05bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05c0 to 0x05cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05d0 to 0x05df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05e0 to 0x05ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; // 0x05f0 to 0x05ff 
int MA120_volatile[0x600] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0000 to 0x000f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0010 to 0x001f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0020 to 0x002f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0030 to 0x003f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0040 to 0x004f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0050 to 0x005f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0060 to 0x006f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0070 to 0x007f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0080 to 0x008f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0090 to 0x009f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x01,0x01,0x00,0x00,0x00,0x00, // 0x00a0 to 0x00af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00b0 to 0x00bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00c0 to 0x00cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00d0 to 0x00df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00e0 to 0x00ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x00f0 to 0x00ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0100 to 0x010f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, // 0x0110 to 0x011f 
                           0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x03,0x01,0x01,0x01,0x01,0x02,0x02,0x00, // 0x0120 to 0x012f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0130 to 0x013f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0140 to 0x014f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00, // 0x0150 to 0x015f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0160 to 0x016f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0170 to 0x017f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0180 to 0x018f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x01,0x03,0x03,0x01,0x01,0x05,0x07, // 0x0190 to 0x019f 
                           0x04,0x05,0x04,0x05,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, // 0x01a0 to 0x01af 
                           0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01, // 0x01b0 to 0x01bf 
                           0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01c0 to 0x01cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01d0 to 0x01df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01e0 to 0x01ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x01f0 to 0x01ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x01,0x01,0x01,0x01, // 0x0200 to 0x020f 
                           0x01,0x01,0x03,0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0210 to 0x021f 
                           0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0220 to 0x022f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0230 to 0x023f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0240 to 0x024f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0250 to 0x025f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0260 to 0x026f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0270 to 0x027f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0280 to 0x028f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0290 to 0x029f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02a0 to 0x02af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02b0 to 0x02bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02c0 to 0x02cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02d0 to 0x02df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02e0 to 0x02ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x02f0 to 0x02ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0300 to 0x030f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0310 to 0x031f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0320 to 0x032f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0330 to 0x033f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0340 to 0x034f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0350 to 0x035f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0360 to 0x036f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0370 to 0x037f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0380 to 0x038f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0390 to 0x039f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03a0 to 0x03af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03b0 to 0x03bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03c0 to 0x03cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03d0 to 0x03df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03e0 to 0x03ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x03f0 to 0x03ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0400 to 0x040f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0410 to 0x041f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0420 to 0x042f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0430 to 0x043f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0440 to 0x044f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0450 to 0x045f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0460 to 0x046f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0470 to 0x047f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0480 to 0x048f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0490 to 0x049f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04a0 to 0x04af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04b0 to 0x04bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04c0 to 0x04cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04d0 to 0x04df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04e0 to 0x04ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x04f0 to 0x04ff 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01, // 0x0500 to 0x050f 
                           0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0510 to 0x051f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0520 to 0x052f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0530 to 0x053f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0540 to 0x054f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0550 to 0x055f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0560 to 0x056f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0570 to 0x057f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0580 to 0x058f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x0590 to 0x059f 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05a0 to 0x05af 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05b0 to 0x05bf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05c0 to 0x05cf 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05d0 to 0x05df 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0x05e0 to 0x05ef 
                           0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }; // 0x05f0 to 0x05ff 
#endif  /* DISABLE_RESET_VALUES */

#endif   /* _MA120_H_*/
